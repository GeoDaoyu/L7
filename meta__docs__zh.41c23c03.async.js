"use strict";(self.webpackChunk_antv_l7_site=self.webpackChunk_antv_l7_site||[]).push([[9600],{34601:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(96185);var d={}},79889:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(38876);var d={}},39781:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(42894);var d={}},18807:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(97822);var d={}},32996:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(92450);var d={}},42151:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(37503);var d={}},8025:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(32491);var d={}},77431:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(68832);var d={}},22365:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(18157);var d={}},14199:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(9300);var d={}},79130:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(48335);var d={}},71439:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(94706);var d={}},41826:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(55631);var d={}},50720:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(94837);var d={}},85492:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(40843);var d={}},29762:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(29525);var d={}},2487:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(23535);var d={}},28703:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(2976);var d={}},80969:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(44822);var d={}},35976:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(69068);var d={}},32337:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(66295);var d={}},15749:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(58812);var d={}},28895:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(35514);var d={}},32837:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(81613);var d={}},66476:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(58382);var d={}},99664:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(98199);var d={}},70523:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(73636);var d={}},9689:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(59818);var d={}},50157:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(70588);var d={}},7959:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(28327);var d={}},67077:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(31826);var d={}},4117:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(67468);var d={}},15058:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(55547);var d={}},77343:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(47116);var d={}},35461:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(94111);var d={}},44969:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(71647);var d={}},65977:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(17081);var d={}},27509:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(74427);var d={}},33521:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(78840);var d={}},69768:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(66802);var d={}},79134:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(32446);var d={}},80307:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(23819);var d={}},74060:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(35678);var d={}},1821:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(97873);var d={}},41023:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(23387);var d={}},54187:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(91817);var d={}},57536:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(28274);var d={}},45305:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(48889);var d={}},58755:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(91378);var d={}},46304:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(40435);var d={}},22488:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(61185);var d={}},73902:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(72259);var d={}},22221:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(60455);var d={}},87121:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(73894);var d={}},38689:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(10507);var d={}},85053:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(6992);var d={}},60158:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(78221);var d={}},62821:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(9375);var d={}},76370:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(89268);var d={}},22206:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(36999);var d={}},64934:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(10310);var d={}},50139:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(13198);var d={}},38825:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(73674);var d={}},34177:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(4571);var d={}},39095:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(37240);var d={}},66742:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(39816);var d={}},94583:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(79498);var d={}},68361:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(90546);var d={}},52520:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(4158);var d={}},70487:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(32780);var d={}},99347:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(10093);var d={}},91589:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(43112);var d={}},30480:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(53976);var d={}},65800:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(77788);var d={}},15457:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(36517);var d={}},45790:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(60486);var d={}},52308:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(83375);var d={}},50343:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(33957);var d={}},16491:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(62067);var d={}},49095:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(69477);var d={}},11848:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(8757);var d={}},38162:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(99571);var d={}},53035:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(4938);var d={}},32185:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(69416);var d={}},50284:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(10226);var d={}},52016:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(46837);var d={}},5387:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(67795);var d={}},60914:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(77932);var d={}},35682:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(59860);var d={}},78182:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(35560);var d={}},836:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(94214);var d={}},29517:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(21209);var d={}},93230:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(97571);var d={}},66992:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(84778);var d={}},90330:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(44269);var d={}},95163:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(88528);var d={}},67346:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(67294);var d={}},40016:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(5808);var d={}},92160:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(66866);var d={}},39098:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(93310);var d={}},49717:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(88955);var d={}},57949:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(8072);var d={}},86513:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(47503);var d={}},10817:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(25184);var d={}},13698:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(41495);var d={}},48412:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(47023);var d={}},56785:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(80239);var d={}},7212:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(40385);var d={}},38250:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(63618);var d={}},38019:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(83946);var d={}},22124:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(27155);var d={}},1531:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(18476);var d={}},87617:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(60526);var d={}},22936:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(13234);var d={}},33026:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(69493);var d={}},55299:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(38636);var d={}},19429:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(68598);var d={}},33079:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(79474);var d={}},60045:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(44134);var d={}},24485:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(27600);var d={}},97378:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(48769);var d={}},49021:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(28205);var d={}},55746:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(32233);var d={}},16524:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(25694);var d={}},67237:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(96474);var d={}},89934:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(74238);var d={}},64941:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(1902);var d={}},45398:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(5119);var d={}},15743:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(92053);var d={}},31479:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(39156);var d={}},69476:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(39906);var d={}},85205:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(67255);var d={}},40121:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(66170);var d={}},16201:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(72676);var d={}},12899:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(53767);var d={}},41161:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(3650);var d={}},17154:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(14438);var d={}},21280:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(17970);var d={}},1856:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(18847);var d={}},24990:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(93113);var d={}},51882:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(90143);var d={}},39900:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(85138);var d={}},41947:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(4021);var d={}},28414:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(19576);var d={}},64633:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(79088);var d={}},74988:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(13237);var d={}},42186:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(34646);var d={}},34665:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(36818);var d={}},76643:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(81796);var d={}},23577:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(40507);var d={}},64635:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(54089);var d={}},9115:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(33828);var d={}},50310:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(18552);var d={}},71285:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(19180);var d={}},98417:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(88497);var d={}},90006:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(46089);var d={}},22953:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(19515);var d={}},31443:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(8373);var d={}},94814:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(40159);var d={}},75686:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(91887);var d={}},7948:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(11189);var d={}},77154:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(49670);var d={}},90513:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(69971);var d={}},52349:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(42248);var d={}},26220:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(98098);var d={}},84376:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(46777);var d={}},80343:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(58097);var d={}},85982:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(60515);var d={}},61847:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(39942);var d={}},80067:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(57155);var d={}},93672:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(3089);var d={}},29275:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(66024);var d={}},31867:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(14319);var d={}},24647:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(57855);var d={}},55264:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(40246);var d={}},75081:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(69875);var d={}},28955:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(83237);var d={}},34582:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(29439);var d={}},50794:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(23854);var d={}},72551:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(7424);var d={}},37445:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(34541);var d={}},43531:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(44435);var d={}},41003:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(15232);var d={}},68897:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(70178);var d={}},63419:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(68233);var d={}},93695:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(37147);var d={}},91670:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(39133);var d={}},72146:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(15915);var d={}},67354:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(38766);var d={}},74114:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(25038);var d={}},14466:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(59660);var d={}},82319:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(15188);var d={}},97685:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});n(92379),n(66753);var d={}},57835:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(96185);const d=[{value:"L7 Layer 接口设计遵循图形语法，所有图层都继承于基类（baseLayer）。",paraId:0,tocIndex:0},{value:"语法示例",paraId:1,tocIndex:0},{value:"const layer = new BaseLayer(option) // option - 传入构造函数的参数对象，提供 layer 的初始状态\n  .source(...)    // 传入图层需要的数据以及相关的解析器\n  .filter()       // 数据过滤方法\n  .shape(...)     // 为图层指定具体的形状，如：circle/triangle 等\n  .color(...)     // 指定图层的颜色配置\n  .texture(...)   // 指定图层引用的纹理\n  .size(...)      // 设置图层元素的大小\n  .animate(...)   // 设置图层元素的动画模式\n  .active(...)    // 指定图层元素是否支持划过选中\n  .select(...)    // 指定图层元素是否支持点击选中\n  .style(...);    // 指定图层自定义样式的配置\n\nscene.addLayer(layer);\n",paraId:2,tocIndex:0},{value:" ",paraId:3,tocIndex:2},{value:"string",paraId:3,tocIndex:2},{value:" ",paraId:3,tocIndex:2},{value:"optional",paraId:3,tocIndex:2},{value:" ",paraId:3,tocIndex:2},{value:"default:",paraId:3,tocIndex:2},{value:" 自动数字编号",paraId:3,tocIndex:2},{value:"设置图层名称,可根据 name 获取 layer",paraId:4,tocIndex:2},{value:"scene.getLayerByName(name);\n",paraId:5,tocIndex:2},{value:" ",paraId:6,tocIndex:3},{value:"bool",paraId:6,tocIndex:3},{value:" ",paraId:6,tocIndex:3},{value:"optional",paraId:6,tocIndex:3},{value:" ",paraId:6,tocIndex:3},{value:"default:",paraId:6,tocIndex:3},{value:" true",paraId:6,tocIndex:3},{value:"图层是否可见",paraId:7,tocIndex:3},{value:" ",paraId:8,tocIndex:4},{value:"int",paraId:8,tocIndex:4},{value:" ",paraId:8,tocIndex:4},{value:"optional",paraId:8,tocIndex:4},{value:" ",paraId:8,tocIndex:4},{value:"default:",paraId:8,tocIndex:4},{value:" 0",paraId:8,tocIndex:4},{value:"图层绘制顺序，数值大绘制在上层，可以控制图层绘制的上下层级",paraId:9,tocIndex:4},{value:"L7 采用队列渲染的机制，所有的图层在内部保存在一个数组中，每一帧的渲染会将图层数组按照 zIndex 的值进行排序，然后遍历数组，将符合条件的图层渲染到场景中",paraId:10,tocIndex:4},{value:" ",paraId:11,tocIndex:5},{value:"number",paraId:11,tocIndex:5},{value:" ",paraId:11,tocIndex:5},{value:"optional",paraId:11,tocIndex:5},{value:" ",paraId:11,tocIndex:5},{value:"default:",paraId:11,tocIndex:5},{value:" Mapbox （0-24） 高德 （2-19)",paraId:11,tocIndex:5},{value:"图层显示最小缩放等级",paraId:12,tocIndex:5},{value:" ",paraId:13,tocIndex:6},{value:"number",paraId:13,tocIndex:6},{value:" ",paraId:13,tocIndex:6},{value:"optional",paraId:13,tocIndex:6},{value:" ",paraId:13,tocIndex:6},{value:"default:",paraId:13,tocIndex:6},{value:" Mapbox （0-24） 高德 （2-19)",paraId:13,tocIndex:6},{value:"图层显示最大缩放等级",paraId:14,tocIndex:6},{value:" ",paraId:15,tocIndex:7},{value:"bool",paraId:15,tocIndex:7},{value:" ",paraId:15,tocIndex:7},{value:"optional",paraId:15,tocIndex:7},{value:" ",paraId:15,tocIndex:7},{value:"default:",paraId:15,tocIndex:7},{value:" false",paraId:15,tocIndex:7},{value:"layer 初始化完成之后，地图是否自动缩放到图层范围",paraId:16,tocIndex:7},{value:" ",paraId:17,tocIndex:8},{value:"bool",paraId:17,tocIndex:8},{value:" ",paraId:17,tocIndex:8},{value:"optional",paraId:17,tocIndex:8},{value:" ",paraId:17,tocIndex:8},{value:"default:",paraId:17,tocIndex:8},{value:" 0",paraId:17,tocIndex:8},{value:"图层拾取缓存机制，如 1px 宽度的线鼠标很难拾取(点击)到, 通过设置该参数可扩大拾取的范围（放大图层对象的尺寸）",paraId:18,tocIndex:8},{value:" ",paraId:19,tocIndex:9},{value:"string",paraId:19,tocIndex:9},{value:" ",paraId:19,tocIndex:9},{value:"optional",paraId:19,tocIndex:9},{value:" ",paraId:19,tocIndex:9},{value:"default:",paraId:19,tocIndex:9},{value:" 'normal'",paraId:19,tocIndex:9},{value:"图层元素混合效果",paraId:20,tocIndex:9},{value:"normal 正常效果 默认 发生遮挡的时候，只会显示前面的图层的颜色",paraId:21,tocIndex:9},{value:"additive 叠加模式 发生遮挡的时候，显示前后图层颜色的叠加",paraId:21,tocIndex:9},{value:"subtractive 相减模式 发生遮挡的时候，显示前后图层颜色的相减",paraId:21,tocIndex:9},{value:"max 最大值 发生遮挡的时候，显示图层颜色 rgb 的最大值",paraId:21,tocIndex:9},{value:" ",paraId:22,tocIndex:10},{value:"boolean",paraId:22,tocIndex:10},{value:" ",paraId:22,tocIndex:10},{value:"optional",paraId:22,tocIndex:10},{value:" ",paraId:22,tocIndex:10},{value:"default:",paraId:22,tocIndex:10},{value:" 'false'",paraId:22,tocIndex:10},{value:"\n图层事件，默认只响应最上层图层，设置为true 将允许事件透传",paraId:22,tocIndex:10},{value:"⚠️ mask、maskfence 不推荐使用，一下配置 2.14.x 之后版本生效",paraId:23,tocIndex:10},{value:"模板图层：用做模板的图层，PointLayer、LineLayer、PolygonLayer 都可以作为模板\n掩模图层：被模板切割的图层",paraId:24,tocIndex:10},{value:"掩模图层生效",paraId:25,tocIndex:11},{value:" ",paraId:26,tocIndex:11},{value:"array Layer",paraId:26,tocIndex:11},{value:" ",paraId:26,tocIndex:11},{value:"optional",paraId:26,tocIndex:11},{value:" ",paraId:26,tocIndex:11},{value:"default:",paraId:26,tocIndex:11},{value:" []",paraId:26,tocIndex:11},{value:"掩模图层生效",paraId:27,tocIndex:12},{value:"是否开启掩模，默认开启 maskLayers 不为空时生效",paraId:28,tocIndex:12},{value:" ",paraId:29,tocIndex:12},{value:"bool",paraId:29,tocIndex:12},{value:" ",paraId:29,tocIndex:12},{value:"optional",paraId:29,tocIndex:12},{value:" ",paraId:29,tocIndex:12},{value:"default:",paraId:29,tocIndex:12},{value:" true",paraId:29,tocIndex:12},{value:"掩模图层生效\n",paraId:30,tocIndex:13},{value:" ",paraId:31,tocIndex:13},{value:"boolean",paraId:31,tocIndex:13},{value:" ",paraId:31,tocIndex:13},{value:"optional",paraId:31,tocIndex:13},{value:" ",paraId:31,tocIndex:13},{value:"default:",paraId:31,tocIndex:13},{value:" true",paraId:31,tocIndex:13},{value:"用来描述当前图层的内容与掩模边界显示。",paraId:32,tocIndex:13},{value:"true",paraId:33,tocIndex:13},{value:" 在掩模内部显示",paraId:33,tocIndex:13},{value:"false",paraId:33,tocIndex:13},{value:" 在掩模外部显示",paraId:33,tocIndex:13},{value:"模板图层生效\n",paraId:34,tocIndex:14},{value:" ",paraId:34,tocIndex:14},{value:"枚举",paraId:34,tocIndex:14},{value:" ",paraId:34,tocIndex:14},{value:"optional",paraId:34,tocIndex:14},{value:" ",paraId:34,tocIndex:14},{value:"default:",paraId:34,tocIndex:14},{value:" and",paraId:34,tocIndex:14},{value:"\nmaskLayers 为多个时失效，需要在模板图层设置",paraId:34,tocIndex:14},{value:"or 交集",paraId:35,tocIndex:14},{value:"and 并集",paraId:35,tocIndex:14},{value:"使用示例",paraId:36,tocIndex:14},{value:"const polygonLayer = new Polygon();\nconst rasterLayer = new Raster({\n  // 栅格图层使用polygon 掩模\n  maskLayers: [polygonLayer],\n  enableMask: true,\n  maskInside: true,\n});\n",paraId:37,tocIndex:14},{value:"设置图层数据以及解析配置 ",paraId:38,tocIndex:16},{value:"source(data, config)",paraId:38,tocIndex:16},{value:"。",paraId:38,tocIndex:16},{value:"data { geojson | json | csv }",paraId:39,tocIndex:16},{value:"config   可选   数据源配置项\n",paraId:39,tocIndex:16},{value:"parser 数据解析，默认是解析层 geojson",paraId:40,tocIndex:16},{value:"transforms [transform，transform ]  数据处理转换可设置多个",paraId:40,tocIndex:16},{value:"parser",paraId:41,tocIndex:16},{value:" 和  ",paraId:41,tocIndex:16},{value:"transforms",paraId:41,tocIndex:16},{value:" ",paraId:41,tocIndex:16},{value:"见 source 文档",paraId:42,tocIndex:16},{value:"。",paraId:41,tocIndex:16},{value:"layer.source(data, {\n  parser: {\n    type: 'csv',\n    x: 'lng',\n    y: 'lat',\n  },\n  transforms: [\n    {\n      type: 'map',\n      callback: function (item) {\n        const [x, y] = item.coordinates;\n        item.lat = item.lat * 1;\n        item.lng = item.lng * 1;\n        item.v = item.v * 1;\n        item.coordinates = [x * 1, y * 1];\n        return item;\n      },\n    },\n    {\n      type: 'hexagon',\n      size: 6000,\n      field: 'v',\n      method: 'sum',\n    },\n  ],\n});\n",paraId:43,tocIndex:16},{value:"我们在使用 ",paraId:44,tocIndex:17},{value:"cluster",paraId:44,tocIndex:17},{value:" 配置聚合图之后就可以使用一些聚合方法来获取对应参数。",paraId:44,tocIndex:17},{value:"获取指定缩放等级的聚合数据",paraId:45,tocIndex:18},{value:"zoom",paraId:46,tocIndex:18},{value:" 缩放等级",paraId:46,tocIndex:18},{value:"根据 ",paraId:47,tocIndex:19},{value:"id",paraId:47,tocIndex:19},{value:" 获取聚合节点的数据，每个聚合节点会有一个唯一 ",paraId:47,tocIndex:19},{value:"ID",paraId:47,tocIndex:19},{value:"。",paraId:47,tocIndex:19},{value:"id",paraId:48,tocIndex:19},{value:" 聚合节点的 ",paraId:48,tocIndex:19},{value:"id",paraId:48,tocIndex:19},{value:"const source = layer.getSource();\nsource.getClustersLeaves(id);\nlayer.on('click', (e) => {\n  console.log(source.getClustersLeaves(e.feature.cluster_id));\n});\n",paraId:49,tocIndex:19},{value:"Scale 度量是将地图数据值（数字、日期、类别等数据）转成视觉值（颜色、大小、形状）。尺度 Scale 是数据可视化的基本组成部分，因为它们决定了视觉编码的性质。 L7 目前支持连续、离散、枚举类型数据的Scale，并支持位置、形状、大小和颜色编码的映射。",paraId:50,tocIndex:20},{value:"在使用 L7 过程中，默认情况下不需要进行 Scale 的配置，因为 L7 会根据数据类型对 scale 推断，推断过程如下：",paraId:51,tocIndex:20},{value:"查看用户是否设置了 Scale，如果没有:",paraId:52,tocIndex:20},{value:"判断字段的第一条数据的字段类型，如果数据中不存在对应的字段：",paraId:53,tocIndex:20},{value:"认为是常量为固定值",paraId:54,tocIndex:20},{value:"如果是数字则为 'linear';",paraId:55,tocIndex:20},{value:"如果是字符串类型 'cat';",paraId:56,tocIndex:20},{value:"Scale 详细介绍",paraId:57,tocIndex:21},{value:"参数： (field: string, scaleOptions: IscaleOptions)",paraId:58,tocIndex:21},{value:"field",paraId:59,tocIndex:21},{value:" 指定 source 中传入的数据中用于映射的字段名",paraId:59,tocIndex:21},{value:"scaleOptions",paraId:59,tocIndex:21},{value:" 列定义配置，对象类型\n",paraId:59,tocIndex:21},{value:"type scale 类型",paraId:60,tocIndex:21},{value:"unknown 未匹配颜色 可选 默认透明",paraId:60,tocIndex:21},{value:"domain 值域 可选",paraId:60,tocIndex:21},{value:"interface IscaleOptions {\n  type: ScaleTypeName;\n  domain?: any[];\n  ...\n}\n\nlayer.color('id', ['#f00', '#ff0'])\n.size('mag', [1, 80])\n.scale('mag', {\n  type: 'linear',\n  domain: [ 1, 50]\n})；\n",paraId:61,tocIndex:21},{value:"Range 和 domain 是 Scale 中非常重要的两个参数",paraId:62,tocIndex:22},{value:"domain: 地图数据值的定义区间\nrange：视觉值的区间\n不同Scale 的差异在于 domain->range 的转换方法的不同",paraId:63,tocIndex:22},{value:"domain: 地图数据值的定义区间",paraId:64,tocIndex:22},{value:"range：视觉值的区间定义",paraId:64,tocIndex:22},{value:"数据类",paraId:65,tocIndex:22},{value:"度量类型",paraId:65,tocIndex:22},{value:"连续",paraId:65,tocIndex:22},{value:"linear、log、pow",paraId:65,tocIndex:22},{value:"连续分类",paraId:65,tocIndex:22},{value:"quantize quantile,threshold,diverging",paraId:65,tocIndex:22},{value:"分类 枚举",paraId:65,tocIndex:22},{value:"cat",paraId:65,tocIndex:22},{value:"Cat 指枚举类型，用于展示分类数据，比如农作物种植区分布图，水稻、玉米、大豆等不同类别需要映射为不同的颜色。",paraId:66,tocIndex:23},{value:"// 三种作物会分别转成对应的颜色\n// domain = ['corn','rice', 'soybean'];\n// range = ['red','white','blue'];\nconst data = [\n  { lng: 120, lat: 30, t: 'corn' },\n  { lng: 121, lat: 30, t: 'rice' },\n  { lng: 122, lat: 30, t: 'soybean' },\n];\nlayer.source(data, {\n  parser: {\n    type: 'type',\n    x: 'lng',\n    y: 'lat',\n  },\n});\nlayer.scale('t', { type: 'cat' });\nlayer.color('t', ['red', 'white', 'blue']);\n",paraId:67,tocIndex:23},{value:"数据值和映射值相同\n比如数据中value 字段记录了每个要素的颜色，数值既为要映射的结果值s",paraId:68,tocIndex:24},{value:"// 设置为 identify\nlayer.scale('value', { type: 'identify' });\n\n// 或者\n\nlayer.scale('value'); // L7  能够自动推断为  identify\n\n",paraId:69,tocIndex:24},{value:"线性是连续数据的映射方法，数据和视觉值是通过线性方法换算的。如数据值 1-100 线性映射到红到蓝的线下渐变色每个数字对应一个颜色",paraId:70,tocIndex:25},{value:"相等间隔会将属性值的范围划分为若干个大小相等的子范围。相等间隔最适用于常见的数据范围，如百分比和温度。这种方法强调的是某个属性值相对于其他值的量",paraId:71,tocIndex:26},{value:"每个类都含有相等数量的要素。分位数分类非常适用于呈线性分布的数据。分位数为每个类分配数量相等的数据值。不存在空类，也不存在值过多或过少的类。\n由于使用“分位数”分类将要素以同等数量分组到每个类中，因此得到的地图往往具有误导性。可能会将相似的要素置于相邻的类中，或将值差异较大的要素置于相同类中。可通过增加类的数量将这种失真降至最低。",paraId:72,tocIndex:27},{value:"他允许将域的任意子集（非统一段）映射到范围内的离散值。输入域仍然是连续的，并根据提供给域属性的一组阈值划分为多个切片。 range 属性必须有 N+1 个元素，其中 N 是域中提供的阈值边界数",paraId:73,tocIndex:28},{value:"手动设置间隔 Manual interval 手动设置分级分类区间，某些数据会有相应的业界标准，或者需要进行某种特殊的显示。如空气质量数据有严格数据分段标准",paraId:74,tocIndex:28},{value:'-1   => "red"\n0    => "white"\n0.5  => "white"\n1.0  => "blue"\n1000 => "blue\n\n',paraId:75,tocIndex:28},{value:"离散分类通常与两种相反的色调一起使用，以显示从负值到中心到正值的变化。这些类型的地图显示了彼此相关的值的大小。",paraId:76,tocIndex:29},{value:"根据视觉通道名称获取 scale 实例,调用之前确保 layer 已经初始化完成",paraId:77,tocIndex:30},{value:"const scale = layer.getScale('color');\nconst color = scale(1); // 将数值转换成颜色\n",paraId:78,tocIndex:30},{value:"更多是方法\n",paraId:79,tocIndex:30},{value:"scale 示例使用",paraId:79,tocIndex:30},{value:"可视化编码是将数据转换为可视形式的过程，L7 目前支持形状，大小，颜色 3 种视觉通道，你可以指定数据字段，为不同要素设置不同的图形属性。",paraId:80,tocIndex:31},{value:"数据过滤方法,支持回调函数，将数据映射为true | false, 结果为true 时可见",paraId:81,tocIndex:32},{value:"pointLayer.filter('type', (type) => {\n  // 回调函数\n  if (type === 'a') {\n    return false;\n  }\n  return true;\n});\n",paraId:82,tocIndex:32},{value:"将数据值映射到图形的大小上的方法，size 方法具体的参数使用可以查看对应图层的详细文档",paraId:83,tocIndex:33},{value:"pointLayer.size(10); // 常量\npointLayer.size('type'); // 使用字段映射到大小\npointLayer.size('type', [0, 10]); // 使用字段映射到大小，并指定最大值和最小值\npointLayer.size('type', (type) => {\n  // 回调函数\n  if (type === 'a') {\n    return 10;\n  }\n  return 5;\n});\n",paraId:84,tocIndex:33},{value:"传入数字常量，如  ",paraId:85,tocIndex:34},{value:"pointLayer.size(20)",paraId:85,tocIndex:34},{value:"根据 field 字段的值映射大小，使用默认的",paraId:86,tocIndex:35},{value:"最大值 max:10",paraId:86,tocIndex:35},{value:"  和",paraId:86,tocIndex:35},{value:"最小值 min: 1",paraId:86,tocIndex:35},{value:"。",paraId:86,tocIndex:35},{value:"使用回调函数控制图形大小。",paraId:87,tocIndex:36},{value:"callback",paraId:88,tocIndex:36},{value:": function 回调函数。",paraId:88,tocIndex:36},{value:"pointLayer.size('age', (value) => {\n  if (value === 1) {\n    return 5;\n  }\n  return 10;\n});\n",paraId:89,tocIndex:36},{value:"将数据值映射到图形的颜色上的方法。",paraId:90,tocIndex:37},{value:"layer.color('red'); // 常量颜色\nlayer.color('type'); // 对 type 字段进行映射，使用内置的颜色\nlayer.color('type', ['red', 'blue']); // 指定颜色\nlayer.color('type', (type) => {\n  // 通过回调函数\n  if (type === 'a') {\n    return 'red';\n  }\n  return 'blue';\n});\nlayer.color('type*value', (type, value) => {\n  //多个参数，通过回调函数\n  if (type === 'a' && value > 100) {\n    return 'red';\n  }\n  return 'blue';\n});\n",paraId:91,tocIndex:37},{value:"参数：",paraId:92,tocIndex:38},{value:"value",paraId:92,tocIndex:38},{value:" ：string",paraId:92,tocIndex:38},{value:"只支持接收一个参数，value 可以是：",paraId:93,tocIndex:38},{value:"映射至颜色属性的数据源字段名，如果数据源中不存在这个字段名的话，则按照常量进行解析，这个时候会使用 L7 默认提供的颜色。",paraId:94,tocIndex:38},{value:"也可以直接指定某一个具体的颜色值 color，如 '#fff', 'white','rgba(255,0,0,0.5)' ,rgb(255,0,1) 等。",paraId:95,tocIndex:38},{value:"如果数据为映射到颜色，默认为透明色不显示，如果需要设置该颜色，需要在scale 中设置",paraId:96,tocIndex:38},{value:"示例",paraId:97,tocIndex:38},{value:"layer.color('name'); // 映射数据字段\nlayer.color('white'); // 指定颜色\n",paraId:98,tocIndex:38},{value:"参数：",paraId:99,tocIndex:39},{value:"field",paraId:100,tocIndex:39},{value:": stringfield 为映射至颜色属性的数据源字段名，也支持指定多个参数。",paraId:100,tocIndex:39},{value:"colors",paraId:101,tocIndex:39},{value:": string | array | function",paraId:101,tocIndex:39},{value:"colors 的参数有以下情况：  如果为空，即未指定颜色的数组，那么使用内置的全局的颜色；如果需要指定颜色，则需要以数组格式传入，那么分类的颜色按照数组中的颜色确定。",paraId:102,tocIndex:39},{value:"layer.scale('name',{\n  type:'quantile'\n  unknown:'#ccc' // 设置无效颜色\n})\nlayer.color('name'); // 使用identity\nlayer.color('name', ['red', 'blue']); // 使用传入的指定颜色\n",paraId:103,tocIndex:39},{value:"colors 如果是回调函数，则该回调函数的参数为对应字段的数值，具体使用如下，当 color 映射为多个字段时，参数按照字段声明的顺序传入：",paraId:104,tocIndex:39},{value:"layer.color('gender', (value) => {\n  if (value === 1) {\n    return 'red';\n  }\n  return 'blue';\n});\nlayer.color('gender*age', (gender, age) => {\n  if (age === 20 && gender == ' 男') {\n    return 'red';\n  }\n  return 'blue';\n});\n",paraId:105,tocIndex:39},{value:"通常一种图层可以有多种表现形式，shape 方法用于指定图层具体的表现形式，以 PointLayer 的 shape 为例：",paraId:106,tocIndex:40},{value:"shape('circle'); // 圆形\nshape('triangle'); // 三角形\nshape('cylinder'); // 圆柱\n",paraId:107,tocIndex:40},{value:"shape(shape)",paraId:108,tocIndex:40},{value:"参数 ",paraId:109,tocIndex:40},{value:"shape",paraId:109,tocIndex:40},{value:" string",paraId:109,tocIndex:40},{value:"只支持接收一个参数，指定几何图像对象绘制的形状。下表列出了不同的 图层 几何图形对象支持的 shape 形状",paraId:110,tocIndex:40},{value:"layer 类型",paraId:111,tocIndex:40},{value:"shape 类型",paraId:111,tocIndex:40},{value:"备注",paraId:111,tocIndex:40},{value:"point",paraId:111,tocIndex:40},{value:"2d:point,circle, square, triangle,hexagon,image,text 3d:circle,triangle,hexagon,square",paraId:111,tocIndex:40},{value:"line",paraId:111,tocIndex:40},{value:"line,arc, arc3d, greatcircle",paraId:111,tocIndex:40},{value:"polygon",paraId:111,tocIndex:40},{value:"fill,line, extrude",paraId:111,tocIndex:40},{value:"shape(field, shapes)",paraId:112,tocIndex:40},{value:"shape 根据字段指定行形状，比如根据字段指定 PointLayer/imageLayer 的 icon 类型",paraId:113,tocIndex:40},{value:"scene.addImage(\n  '00',\n  'https://gw.alipayobjects.com/zos/basement_prod/604b5e7f-309e-40db-b95b-4fac746c5153.svg',\n);\nscene.addImage(\n  '01',\n  'https://gw.alipayobjects.com/zos/basement_prod/30580bc9-506f-4438-8c1a-744e082054ec.svg',\n);\nscene.addImage(\n  '02',\n  'https://gw.alipayobjects.com/zos/basement_prod/7aa1f460-9f9f-499f-afdf-13424aa26bbf.svg',\n);\nconst imageLayer = new PointLayer()\n  .source(data, {\n    parser: {\n      type: 'json',\n      x: 'longitude',\n      y: 'latitude',\n    },\n  })\n  .shape('name', ['00', '01', '02'])\n  .size(20);\nscene.addLayer(imageLayer);\n",paraId:114,tocIndex:40},{value:"在线案例",paraId:115},{value:"shape(field, callback)",paraId:116},{value:"shape 也支持回调函数的写法",paraId:117},{value:".shape('key', value => {\n  if(value > 10) {\n    return 'circle';\n  } else {\n    return 'triangle';\n  }\n}\n",paraId:118},{value:"style 方法通常用于描述图层具体的样式，大多数图层会支持一些比较通用的属性， 如 opacity 属性，同时每个图层也会有仅限本图层支持的属性，如只有\nCityBuildingLayer 支持的 windowColor 属性，每个图层具体要如何配置属性请查看每个图层的详细文档。",paraId:119,tocIndex:41},{value:"opacity 设置透明度 大部分图层都支持",paraId:120,tocIndex:41},{value:"stroke 线填充颜色 仅点图层支持",paraId:121,tocIndex:41},{value:"strokeWidth 线的宽度 仅点图层支持",paraId:122,tocIndex:41},{value:"layer.style({\n  opacity: 0.8,\n  stroke: 'white',\n});\n",paraId:123,tocIndex:41},{value:"样式数据映射🌟",paraId:124,tocIndex:41},{value:"\n在正常情况下，style 的参数会作用到一个图层上的所有图形，如一个 PointLayer 中有十个点，我们设置 opacity = 0.5， 这样十个点的透明度都是 0.5。",paraId:124,tocIndex:41},{value:"\n而在特殊情况下，我们可能需要为每个点分别设置一个透明度，这时候按照原来的方式直接设置 style 方法的 opacity 的值就无法满足需求了，为此我们需要提供特殊的赋值方式。",paraId:124,tocIndex:41},{value:"\n通常我们会根据传入图层的数据为图层的每个图形设置单独的值，因此我们称之为“样式数据映射”。",paraId:124,tocIndex:41},{value:"\n我们支持几种设置 style 中的参数从 source 数据中动态取值的写法。",paraId:124,tocIndex:41},{value:"// 根据数据中的 v 字段的值设置点图层各个点的透明度\nconst data = [\n  {\n    lng: 120,\n    lat: 30,\n    v: 0.5\n  },\n  ...\n]\nconst layer = new PointLayer()\n  .source(data, {\n    parser: {\n      x: 'lng',\n      y: 'lat'\n    }\n  })\n  .shape('circle')\n  .color('#f00')\n  .size({\n    // 第一种写法 根据字段从 data 中直接取值\n    opacity: 'v'// opacity = 0.5\n  });\nscene.addLayer(layer);\n",paraId:125,tocIndex:41},{value:"在线案例",paraId:126},{value:"从 ",paraId:127},{value:"L7 2.5",paraId:127},{value:" 开始，各图层样式将逐步支持样式数据映射，目前支持样式数据映射的 ",paraId:127},{value:"style",paraId:127},{value:" 参数如下：",paraId:127},{value:"layer 类型/shape",paraId:128},{value:"支持的样式字段",paraId:128},{value:"备注",paraId:128},{value:"pointLayer/fill",paraId:128},{value:"opacity、strokeOpacity、strokeWidth、stroke、offsets",paraId:128},{value:"shape circle、triangle...",paraId:128},{value:"pointLayer/image",paraId:128},{value:"opacity、offsets",paraId:128},{value:"offsets 经纬度偏移",paraId:128},{value:"pointLayer/normal",paraId:128},{value:"opacity、offsets",paraId:128},{value:"pointLayer/text",paraId:128},{value:"opacity、strokeWidth、stroke、textOffset",paraId:128},{value:"textOffset 相对文字画布位置的偏移",paraId:128},{value:"pointLayer/extrude",paraId:128},{value:"opacity",paraId:128},{value:"polygonLayer/fill",paraId:128},{value:"opacity",paraId:128},{value:"polygonLayer/extrude",paraId:128},{value:"opacity",paraId:128},{value:"lineLayer/line",paraId:128},{value:"opacity",paraId:128},{value:"lineLayer/arc",paraId:128},{value:"opacity、thetaOffset",paraId:128},{value:"thetaOffset 弧线的弯曲弧度",paraId:128},{value:"lineLayer/arc3d",paraId:128},{value:"opacity",paraId:128},{value:"lineLayer/great_circle",paraId:128},{value:"opacity",paraId:128},{value:"在线案例",paraId:129},{value:"目前只在线图层上支持了纹理方法",paraId:130,tocIndex:42},{value:"texture 方法支持传入由 scene.addImage 方法添加的全局 icon 贴图资源",paraId:131,tocIndex:42},{value:"// 首先在全局加载图片资源\nscene.addImage(\n  'plane',\n  'https://gw.alipayobjects.com/zos/bmw-prod/0ca1668e-38c2-4010-8568-b57cb33839b9.svg',\n);\n\nconst layer = new LineLayer({\n  blend: 'normal',\n})\n  .source(data, {\n    parser: {\n      type: 'json',\n      x: 'lng1',\n      y: 'lat1',\n      x1: 'lng2',\n      y1: 'lat2',\n    },\n  })\n  .size(25)\n  .shape('arc')\n  .texture('plane') // 为图层绑定纹理\n  .color('#8C1EB2')\n  .style({\n    lineTexture: true, // 开启线的贴图功能\n    iconStep: 30, // 设置贴图纹理的间距\n    textureBlend: 'replace', // 设置纹理混合方式，默认值为 normal，可选值有 normal/replace 两种\n  });\n",paraId:132,tocIndex:42},{value:"在线案例",paraId:133},{value:"如果已经添加了图层，需要修改图层显示样式可以再次调用图形映射方法，然后调用 ",paraId:134,tocIndex:43},{value:"scene.render()",paraId:134,tocIndex:43},{value:"更新渲染即可",paraId:134,tocIndex:43},{value:"重新调用scale 方法",paraId:135,tocIndex:44},{value:"layer.scale('value', {\n  type: 'quantile',\n});\nscene.render();\n",paraId:136,tocIndex:44},{value:"重新调用 color/size/filter/shape等方法",paraId:137,tocIndex:45},{value:"layer.color('blue');\nlayer.size(10);\n\nscene.render();\n",paraId:138,tocIndex:45},{value:"layer.style({\n  opacity: 1,\n});\n\nscene.render();\n",paraId:139,tocIndex:46},{value:"更新 Source 数据",paraId:140,tocIndex:47},{value:"参数:",paraId:141,tocIndex:47},{value:"data 数据",paraId:142,tocIndex:47},{value:"option 默认和初始配置项一致，如果数据格式相同可不设置",paraId:142,tocIndex:47},{value:"调用 setData 方法会自动更新图层渲染",paraId:143,tocIndex:47},{value:"layer.setData(data);\n",paraId:144,tocIndex:47},{value:"设置图层叠加方法\n参数：",paraId:145,tocIndex:48},{value:"type blend 类型 normal ｜ additive ｜ subtractive ｜ max",paraId:146,tocIndex:48},{value:"图层显示",paraId:147,tocIndex:50},{value:"layer.show();\n",paraId:148,tocIndex:50},{value:"图层隐藏",paraId:149,tocIndex:51},{value:"layer.hide();\n",paraId:150,tocIndex:51},{value:"图层是否可见",paraId:151,tocIndex:52},{value:"layer.isVisible();\n",paraId:152,tocIndex:52},{value:"设置图层绘制顺序",paraId:153,tocIndex:53},{value:"layer.setIndex(1);\n",paraId:154,tocIndex:53},{value:"缩放到图层范围",paraId:155,tocIndex:54},{value:"layer.fitBounds();\n",paraId:156,tocIndex:54},{value:"设置图层最小缩放等级",paraId:157,tocIndex:55},{value:"layer.setMinZoom(zoom);\n",paraId:158,tocIndex:55},{value:"设置图层最大缩放等级",paraId:159,tocIndex:56},{value:"layer.setMinZoom(zoom);\n",paraId:160,tocIndex:56},{value:"设置图层最大缩放等级",paraId:161,tocIndex:56},{value:"参数",paraId:162,tocIndex:56},{value:"zoom {number}",paraId:163,tocIndex:56},{value:"layer.setMinZoom(zoom);\n",paraId:164,tocIndex:56},{value:"开启或者关闭 mousehover 元素高亮效果",paraId:165,tocIndex:58},{value:"activeOption",paraId:165,tocIndex:58},{value:"color",paraId:166,tocIndex:58},{value:": 高亮颜色",paraId:166,tocIndex:58},{value:"mix",paraId:166,tocIndex:58},{value:": 可选参数，默认为 0，表示高亮颜色是指定纯色，最大有效值是1，表示高亮色全部是底色",paraId:166,tocIndex:58},{value:"activeOption: {\n  color: '#f00';\n  mix: 0.6;\n}\n",paraId:167,tocIndex:58},{value:"// 开启 Active  使用默认高亮颜色\nlayer.active(true);\n\n//  开启 Active  自定义高亮颜色\n\nlayer.active({\n  color: 'red',\n  mix: 0.6,\n});\n\n// 关闭高亮效果\nlayer.active(false);\n",paraId:168,tocIndex:58},{value:"根据元素 ID 设置指定元素 hover 高亮",paraId:169,tocIndex:59},{value:"🌟 指定元素高亮不等于图层高亮，一个图层包含多个元素，一般传入 source 的数据数组中有多少单条数据，一个图层就有多少元素",paraId:170,tocIndex:59},{value:"layer.setActive(featureId);\n",paraId:171,tocIndex:59},{value:"开启或者关闭 mouseclick 元素选中高亮效果",paraId:172,tocIndex:60},{value:"selectOption\n",paraId:172,tocIndex:60},{value:"color",paraId:173,tocIndex:60},{value:": 选中高亮颜色",paraId:173,tocIndex:60},{value:"mix",paraId:173,tocIndex:60},{value:": 可选参数，默认为 0，表示选中高亮颜色是指定纯色，最大有效值是1，表示选中高亮色全部是底色",paraId:173,tocIndex:60},{value:"selectOption: {\n  color: '#f00';\n  mix: 0.6;\n}\n",paraId:174,tocIndex:60},{value:"// 开启 Active  使用默认高亮颜色\nlayer.select(true);\n\n//  开启 Active  自定义高亮颜色\n\nlayer.select({\n  color: 'red',\n  mix: 0.6,\n});\n\n// 关闭高亮效果\nlayer.select(false);\n",paraId:175,tocIndex:60},{value:"根据元素 ID 设置指定元素 click 选中 高亮",paraId:176,tocIndex:61},{value:"🌟 指定元素高亮不等于图层高亮，一个图层包含多个元素，一般传入 source 的数据数组中有多少单条数据，一个图层就有多少元素",paraId:177,tocIndex:61},{value:"layer.setSelect(featureId);\n",paraId:178,tocIndex:61},{value:"让用户可以主动设置图层的 autoFit 参数",paraId:179,tocIndex:62},{value:"\n🌟 设置完该方法后会在图层发生更新的时候生效，如在 setData 之后触发",paraId:179,tocIndex:62},{value:"// 使用方法\nlayer.setAutoFit(true);\n// 内部实现\npublic setAutoFit(autoFit: boolean): ILayer {\n    this.updateLayerConfig({\n      autoFit,\n    });\n    return this;\n  }\n",paraId:180,tocIndex:62},{value:"支持单独获取某个图形经过 scale 计算后的值， 满足用户获取图层某些 feature 值的需求。",paraId:181,tocIndex:63},{value:"attr scale 的属性值",paraId:182,tocIndex:63},{value:"const data = [\n  { lng: 120, lat: 30, name: 'n1' },\n  { lng: 120, lat: 30, name: 'n2' },\n];\nconst layer = new PointLayer()\n  .source(data, {\n    parser: {\n      x: 'lng',\n      y: 'lat',\n      type: 'json',\n    },\n  })\n  .shape('circle')\n  .color('name', ['#f00', '#ff0'])\n  .size('name', [20, 40]);\n\nscene.addLayer(layer);\n\n// 此时在 scene 上绘制两个点\n// 一个颜色为黄色，大小为 40 的点，对应 name 为 n1\n// 一个颜色为红色，大小为 20 的点，对应 name 为 n2\n\nconst colorScale = layer.getScale('color'); // 获取 color 方法产生的 scale\nconst color1 = colorScale('n1'); // '#ff0'\nconst color1 = colorScale('n2'); // '#f00'\n\nconst sizeScale = layer.getScale('size'); // 获取 size 方法产生的 scale\nconst size1 = sizeScale('n1'); // 40\nconst size2 = sizeScale('n2'); // 20\n",paraId:183,tocIndex:63},{value:"不推荐使用，将废弃，",paraId:184,tocIndex:64},{value:"获取图例配置",paraId:185,tocIndex:64},{value:"type 图例类型",paraId:186,tocIndex:64},{value:"index 可选 默认",paraId:186,tocIndex:64},{value:"layer.getLegendItems('color');\n\nlayer.getLegendItems('size');\n",paraId:187,tocIndex:64},{value:"getLegendItems方法的替代方法",paraId:188,tocIndex:65},{value:"该方法需要",paraId:189,tocIndex:65},{value:"返回值",paraId:190,tocIndex:65},{value:"type 图例类型",paraId:191,tocIndex:65},{value:"field 映射字段",paraId:191,tocIndex:65},{value:"items 图例项",paraId:191,tocIndex:65},{value:"layer.getLegend('color');\n\nlayer.getLegend('size');\n",paraId:192,tocIndex:65},{value:"注：rasterayer 只支持 color 类型",paraId:193,tocIndex:65},{value:"添加 Mask 图层\n",paraId:194,tocIndex:67},{value:"const polygonLayer = new Polygon();\nlayer.addMask(polygonLayer);\nscene.render();\n",paraId:195,tocIndex:67},{value:"const polygonLayer = new Polygon();\nlayer.removeMask(polygonLayer);\nscene.render();\n",paraId:196,tocIndex:68},{value:"layer.disableMask();\nscene.render();\n",paraId:197,tocIndex:69},{value:"layer.disableMask();\nscene.render();\n",paraId:198,tocIndex:70},{value:"鼠标事件回调参数 target",paraId:199,tocIndex:71},{value:"layer.on(eventName, (target) => console.log(target));\n",paraId:200,tocIndex:71},{value:"x: number 鼠标 \b 在地图位置 x 坐标",paraId:201,tocIndex:71},{value:"y: number 鼠标 \b 在地图位置 y 坐标",paraId:201,tocIndex:71},{value:"type: string 鼠标事件类型",paraId:201,tocIndex:71},{value:"lngLat: 经度度对象 {lng:number, lat: number }; 鼠标所在位置经纬度",paraId:201,tocIndex:71},{value:"feature: any; 数据选中的地理要素信息",paraId:201,tocIndex:71},{value:"featureId: number | null; 数据选中的地理要素的 ID",paraId:201,tocIndex:71},{value:"点击事件",paraId:202,tocIndex:72},{value:"layer.on('click', (e) => console.log(e));\n",paraId:203,tocIndex:72},{value:"双击",paraId:204,tocIndex:73},{value:"layer.on('dblclick', (e) => console.log(e));\n",paraId:205,tocIndex:73},{value:"鼠标移动事件",paraId:206,tocIndex:74},{value:"layer.on('mousemove', (e) => console.log(e));\n",paraId:207,tocIndex:74},{value:"鼠标移除",paraId:208,tocIndex:75},{value:"layer.on('mouseout', (e) => console.log(e));\n",paraId:209,tocIndex:75},{value:"鼠标抬起",paraId:210,tocIndex:76},{value:"layer.on('mouseup', (e) => console.log(e));\n",paraId:211,tocIndex:76},{value:"鼠标按下",paraId:212,tocIndex:77},{value:"layer.on('mousedown', (e) => console.log(e));\n",paraId:213,tocIndex:77},{value:"鼠标右键",paraId:214,tocIndex:78},{value:"layer.on('contextmenu', (e) => console.log(e));\n",paraId:215,tocIndex:78},{value:"双击拾取元素",paraId:216,tocIndex:79},{value:"layer.on('dblclick', (e) => console.log(e));\n",paraId:217,tocIndex:79},{value:"点击未拾取到元素",paraId:218,tocIndex:80},{value:"layer.on('unclick', (e) => console.log(e));\n",paraId:219,tocIndex:80},{value:"鼠标移动未拾取到元素",paraId:220,tocIndex:81},{value:"layer.on('unmousemove', (e) => console.log(e));\n",paraId:221,tocIndex:81},{value:"鼠标抬起未拾取到元素",paraId:222,tocIndex:82},{value:"layer.on('unmouseup', (e) => console.log(e));\n",paraId:223,tocIndex:82},{value:"鼠标按下未拾取到元素",paraId:224,tocIndex:83},{value:"layer.on('unmousedown', (e) => console.log(e));\n",paraId:225,tocIndex:83},{value:"鼠标右键位拾取到元素",paraId:226,tocIndex:84},{value:"layer.on('uncontextmenu', (e) => console.log(e));\n",paraId:227,tocIndex:84},{value:"所有鼠标事件未拾取到",paraId:228,tocIndex:85},{value:"layer.on('unpick', (e) => console.log(e));\n",paraId:229,tocIndex:85},{value:"移动端事件 touchstart",paraId:230,tocIndex:86},{value:"layer.on('touchstart', (e) => console.log(e));\n",paraId:231,tocIndex:86},{value:"移动端事件 touchend",paraId:232,tocIndex:87},{value:"layer.on('touchend', (e) => console.log(e));\n",paraId:233,tocIndex:87},{value:"使用示例",paraId:234,tocIndex:87},{value:"layer.on('click', (ev) => {}); // 鼠标左键点击图层事件\nlayer.on('mouseenter', (ev) => {}); // 鼠标进入图层要素\nlayer.on('mousemove', (ev) => {}); // 鼠标在图层上移动时触发\nlayer.on('mouseout', (ev) => {}); // 鼠标移出图层要素时触发\nlayer.on('mouseup', (ev) => {}); // 鼠标在图层上单击抬起时触发\nlayer.on('mousedown', (ev) => {}); // 鼠标在图层上单击按下时触发\nlayer.on('contextmenu', (ev) => {}); // 图层要素点击右键菜单\n\n// 鼠标在图层外的事件\nlayer.on('unclick', (ev) => {}); // 图层外点击\nlayer.on('unmousemove', (ev) => {}); // 图层外移动\nlayer.on('unmouseup', (ev) => {}); // 图层外鼠标抬起\nlayer.on('unmousedown', (ev) => {}); // 图层外单击按下时触发\nlayer.on('uncontextmenu', (ev) => {}); // 图层外点击右键\nlayer.on('unpick', (ev) => {}); // 图层外的操作的所有事件\n",paraId:235,tocIndex:87},{value:"参数 option",paraId:236,tocIndex:89},{value:"target 当前 layer",paraId:237,tocIndex:89},{value:"type 事件类型",paraId:237,tocIndex:89},{value:"图层初始化完成后触发",paraId:238,tocIndex:89},{value:"layer.on('inited', (option) => {});\n",paraId:239,tocIndex:89},{value:"图层添加到 scene",paraId:240,tocIndex:90},{value:"参数 option",paraId:241,tocIndex:90},{value:"target 当前 layer",paraId:242,tocIndex:90},{value:"type 事件类型",paraId:242,tocIndex:90},{value:"layer.on('add', (type) => console.log(type));\n",paraId:243,tocIndex:90},{value:"图层移除时触发",paraId:244,tocIndex:91},{value:"参数 option",paraId:245,tocIndex:91},{value:"target 当前 layer",paraId:246,tocIndex:91},{value:"type 事件类型",paraId:246,tocIndex:91},{value:"layer.on('remove', (type) => console.log(type));\n",paraId:247,tocIndex:91},{value:"数据映射更新，图例发生变化,主要 color、size",paraId:248,tocIndex:92},{value:"legend:color",paraId:249},{value:"数据映射更新，图例 color 颜色改变",paraId:250,tocIndex:93},{value:"参数 option：",paraId:251,tocIndex:93},{value:"type 图例类型",paraId:252,tocIndex:93},{value:"field 映射字段",paraId:252,tocIndex:93},{value:"items 图例项",paraId:252,tocIndex:93},{value:"layer.on('legend:color', (ev) => console.log(ev));\n",paraId:253,tocIndex:93},{value:"legend:size",paraId:249},{value:"数据映射更新，图例 size 大小改变",paraId:254,tocIndex:94},{value:"参数 option：",paraId:255,tocIndex:94},{value:"type 图例类型",paraId:256,tocIndex:94},{value:"field 映射字段",paraId:256,tocIndex:94},{value:"items 图例项",paraId:256,tocIndex:94},{value:"layer.on('legend:size', (ev) => console.log(ev));\n",paraId:257,tocIndex:94},{value:"参数 option",paraId:258,tocIndex:96},{value:"box [x1: number, y1: number, x2: number, y2: number] 相较于",paraId:259,tocIndex:96},{value:"cb (...args: any[]) => void 传入的回调方法，返回框选内部的 feature",paraId:259,tocIndex:96},{value:"layer.boxSelect(box, cb);\n// (x1, y1), (x2, y2) 框选的方框左上角和右下角相对于地图左上角的像素坐标\n// cb 是传入的回调函数，回调函数返回的参数是选中的 feature 对象数组，对象的字段和用户传入的数据相关\n",paraId:260,tocIndex:96}]},91191:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(38876);const d=[{value:"名称",paraId:0},{value:"说明",paraId:0},{value:"类型",paraId:0},{value:"position",paraId:0},{value:"控件被添加到地图中的位置以及排列方式，详情可见 ",paraId:0},{value:"控件插槽",paraId:1},{value:"Position",paraId:2},{value:"className",paraId:0},{value:"自定义样式名",paraId:0},{value:"string",paraId:0},{value:"style",paraId:0},{value:"自定义样式",paraId:0},{value:"string",paraId:0},{value:"export type Position =\n  | 'topleft' // ↖ 左上角，纵向排列\n  | 'lefttop' // ↖ 左上角，横向排列\n  | 'topright' // ↗ 右上角，纵向排列\n  | 'righttop' // ↗ 右上角，横向排列\n  | 'bottomleft' // ↙ 左下角，纵向排列\n  | 'leftbottom' // ↙ 左下角，横向排列\n  | 'bottomright' // ↘ 右下角，纵向排列\n  | 'rightbottom' // ↘ 右下角，横向排列\n  | 'topcenter' // ↑ 上方中央，横向排列\n  | 'bottomcenter' // ↓ 下方中间，横向排列\n  | 'leftcenter' // ← 左边中间，纵向排列\n  | 'rightcenter' // → 右边中间，纵向排列\n  | Element; // 传入 DOM 作为当前控件的容器\n",paraId:3,tocIndex:0}]},80010:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(42894);const d=[{value:"名称",paraId:0},{value:"说明",paraId:0},{value:"类型",paraId:0},{value:"btnIcon",paraId:0},{value:"按钮图标",paraId:0},{value:"HTMLElement",paraId:0},{value:" | ",paraId:0},{value:"SVGElement",paraId:0},{value:"btnText",paraId:0},{value:"按钮内容文本",paraId:0},{value:"string",paraId:0},{value:"title",paraId:0},{value:"按钮的 ",paraId:0},{value:"title",paraId:0},{value:" 属性",paraId:0},{value:"string",paraId:0},{value:"vertical",paraId:0},{value:"在 btnIcon 有值的情况下，按钮内的图标和文案是否纵向排列",paraId:0},{value:"boolean",paraId:0}]},92965:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(97822);const d=[{value:"名称",paraId:0},{value:"说明",paraId:0},{value:"类型",paraId:0},{value:"add",paraId:0},{value:"组件被添加时的事件",paraId:0},{value:"(this) => void",paraId:0},{value:"remove",paraId:0},{value:"组件被移除时的事件",paraId:0},{value:"(this) => void",paraId:0},{value:"show",paraId:0},{value:"组件显示时的事件",paraId:0},{value:"(this) => void",paraId:0},{value:"hide",paraId:0},{value:"组件隐藏时的事件",paraId:0},{value:"(this) => void",paraId:0}]},15435:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(92450);const d=[{value:"名称",paraId:0},{value:"说明",paraId:0},{value:"类型",paraId:0},{value:"setOptions",paraId:0},{value:"更新配置，参数需要参考对应组件的",paraId:0},{value:"配置",paraId:1},{value:"(newOption: Partial<Option>) => void",paraId:0},{value:"getOptions",paraId:0},{value:"获取当前",paraId:0},{value:"配置",paraId:2},{value:"() => Option",paraId:0},{value:"show",paraId:0},{value:"显示组件",paraId:0},{value:"() => void",paraId:0},{value:"hide",paraId:0},{value:"隐藏组件",paraId:0},{value:"() => void",paraId:0},{value:"getContainer",paraId:0},{value:"获取当前控件对应的 ",paraId:0},{value:"DOM",paraId:0},{value:" 容器",paraId:0},{value:"() => HTMLElement",paraId:0}]},64959:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(37503);const d=[{value:"名称",paraId:0},{value:"说明",paraId:0},{value:"类型",paraId:0},{value:"popperPlacement",paraId:0},{value:"气泡相对于按钮的位置",paraId:0},{value:"PopperPlacement",paraId:1},{value:"popperTrigger",paraId:0},{value:"气泡弹出的触发方式",paraId:0},{value:"'click'",paraId:0},{value:" | ",paraId:0},{value:"'hover'",paraId:0},{value:"popperClassName",paraId:0},{value:"气泡容器自定义样式名",paraId:0},{value:"string",paraId:0},{value:"export type PopperPlacement =\n  | 'top-start'\n  | 'top'\n  | 'top-end'\n  | 'left-start'\n  | 'left'\n  | 'left-end'\n  | 'bottom-start'\n  | 'bottom'\n  | 'bottom-end'\n  | 'right-start'\n  | 'right'\n  | 'right-end';\n",paraId:2,tocIndex:0}]},22719:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(32491);const d=[{value:"名称",paraId:0},{value:"说明",paraId:0},{value:"类型",paraId:0},{value:"popperShow",paraId:0},{value:"气泡显示时的回调",paraId:0},{value:"(this) => void",paraId:0},{value:"popperHide",paraId:0},{value:"气泡隐藏时的回调",paraId:0},{value:"(this) => void",paraId:0}]},90230:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(68832);const d=[{value:"| 名称         | 说明                   | 类型     |\n| ------------ | ---------------------- | -------- | ------------------ |\n| selectChange | 当所选值发生改变时触发 | ",paraId:0},{value:"(string | string[]) => void",paraId:0},{value:" |",paraId:0}]},16489:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(18157);const d=[{value:"enable\n",paraId:0,tocIndex:0},{value:"boolean",paraId:0,tocIndex:0},{value:" 是否显示气泡 ",paraId:0,tocIndex:0},{value:"true",paraId:0,tocIndex:0},{value:"shape:\nAttributeType; 气泡形状支持数据映射",paraId:0,tocIndex:0},{value:"size:\nAttributeType; 气泡大小支持数据映射",paraId:0,tocIndex:0},{value:"color:\nAttributeType; 气泡颜色支持数据映射",paraId:0,tocIndex:0},{value:"scale: { // 数字度量\nfield: string; 度量字段\ntype: ScaleTypeName; 度量字段\n};",paraId:0,tocIndex:0},{value:"style: {\nopacity: number; 透明度\nstroke: string; 填充色\nstrokeWidth: number; 填充宽度\n};",paraId:0,tocIndex:0}]},94560:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(9300);const d=[{value:"按图表方式，",paraId:0,tocIndex:0},{value:"在线示例",paraId:0,tocIndex:0},{value:"import { Choropleth } from '@antv/l7plot';\n\nconst choropleth = new Choropleth('container', options);\n",paraId:1,tocIndex:0},{value:"按场景方式，",paraId:2,tocIndex:0},{value:"在线示例",paraId:3,tocIndex:0},{value:"import { Scene, Mapbox } from '@antv/l7';\nimport { Choropleth } from '@antv/l7plot';\n\nconst scene = new Scene({\n  id: 'container',\n  map: new Mapbox({\n    style: 'light',\n    center: [102.447303, 37.753574],\n    zoom: 5,\n  }),\n});\n\nconst choropleth = new Choropleth(options);\n\nscene.on('loaded', () => {\n  choropleth.addToScene(scene);\n});\n",paraId:4,tocIndex:0},{value:"Choropleth 具体 API 文档移步 ",paraId:5,tocIndex:1},{value:"L7Plot 官网",paraId:5,tocIndex:1},{value:"。",paraId:5,tocIndex:1}]},45600:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(48335);const d=[]},97603:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(94706);const d=[{value:"color 图层填充颜色，支持常量和数据映射\n常量：统一设置成一样的颜色\n数据映射\n",paraId:0,tocIndex:0},{value:"field 填充映射字段",paraId:1,tocIndex:0},{value:"values 映射值，同color方法第二个参数数组，回调函数",paraId:1,tocIndex:0},{value:"filter 图层过滤方法，支持常量和数据映射 同layer.filter方法\n数据映射 - field 填充映射字段 - values 回调函数 ",paraId:0,tocIndex:0},{value:"false",paraId:0,tocIndex:0},{value:" 返回值将会被过滤掉",paraId:0,tocIndex:0},{value:"style 同 polygonLayer的style方法",paraId:0,tocIndex:0},{value:"activeColor 鼠标滑过高亮颜色, ",paraId:0,tocIndex:0},{value:"string | boolean",paraId:0,tocIndex:0},{value:" 如果设置为 ",paraId:0,tocIndex:0},{value:"false",paraId:0,tocIndex:0},{value:"取消高亮",paraId:0,tocIndex:0}]},83686:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(55631);const d=[{value:"文本标注配置项，目前只支持常量配置，不支持数据映射",paraId:0,tocIndex:0},{value:"enable ",paraId:1,tocIndex:0},{value:"boolean",paraId:1,tocIndex:0},{value:" 是否显示标注\n",paraId:1,tocIndex:0},{value:"color\n标注字体颜色 常量",paraId:2,tocIndex:0},{value:"field\n标注字段 常量",paraId:2,tocIndex:0},{value:"size\n标注大小 常量",paraId:2,tocIndex:0},{value:"stroke\n文字描边颜色",paraId:2,tocIndex:0},{value:"strokeWidth\n文字描边宽度",paraId:2,tocIndex:0},{value:"textAllowOverlap\n是否允许文字压盖",paraId:2,tocIndex:0},{value:"opacity\n标注透明度",paraId:2,tocIndex:0},{value:"spacing:\n",paraId:2,tocIndex:0},{value:"number",paraId:2,tocIndex:0},{value:" 文本间隔",paraId:2,tocIndex:0},{value:"strokeOpacity\n",paraId:2,tocIndex:0},{value:"number",paraId:2,tocIndex:0},{value:" 描边透明度",paraId:2,tocIndex:0},{value:"fontWeight\n",paraId:2,tocIndex:0},{value:"string",paraId:2,tocIndex:0},{value:" 字体粗细",paraId:2,tocIndex:0},{value:"fontFamily\n",paraId:2,tocIndex:0},{value:"string",paraId:2,tocIndex:0},{value:" 字号",paraId:2,tocIndex:0},{value:"textOffset\n",paraId:2,tocIndex:0},{value:"[number, number]",paraId:2,tocIndex:0},{value:" 文本偏移量",paraId:2,tocIndex:0}]},82247:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(94837);const d=[{value:"下钻各个层级的配置项，可以独立配置，每一层级的样式，不设置和上一层就保持一致",paraId:0,tocIndex:0},{value:"joinBy: [string, string];",paraId:1,tocIndex:0},{value:"label: Partial",paraId:1,tocIndex:0},{value:";",paraId:2,tocIndex:0},{value:"bubble: Partial",paraId:1,tocIndex:0},{value:";",paraId:3,tocIndex:0},{value:"fill: Partial",paraId:1,tocIndex:0},{value:";\n⛔中国地图视角设置，省界，海岸线，宽度通过以下属性",paraId:4,tocIndex:0},{value:"chinaNationalStroke 中国国界线颜色",paraId:1,tocIndex:0},{value:"chinaNationalWidth 中国国界线宽度",paraId:1,tocIndex:0},{value:"coastlineStroke 海岸线颜色",paraId:1,tocIndex:0},{value:"coastlineWidth 海岸线宽度",paraId:1,tocIndex:0},{value:"nationalWidth 国界线",paraId:1,tocIndex:0},{value:"nationalStroke 国界线",paraId:1,tocIndex:0},{value:"provinceStroke 省界颜色",paraId:1,tocIndex:0},{value:"provinceStrokeWidth 省界宽度",paraId:1,tocIndex:0}]},24356:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(40843);const d=[{value:"enable 是否开启 ",paraId:0,tocIndex:0},{value:"boolean",paraId:0,tocIndex:0},{value:"triggerEvent 触发事件 例如 'mousemove' | 'click';",paraId:0,tocIndex:0},{value:"HTML popup html字符串，支持回调函数 (properties: any) => string;",paraId:0,tocIndex:0}]},20607:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(29525);const d=[{value:"layer.animate(true);\nlayer.animate(false);\n",paraId:0,tocIndex:1},{value:"duration 动画时间 单位(s)秒",paraId:1,tocIndex:2},{value:"interval 轨迹间隔, 取值区间 0 - 1",paraId:1,tocIndex:2},{value:"trailLength 轨迹长度 取值区间 0 - 1",paraId:1,tocIndex:2},{value:"layer.animate({\n  duration: 4,\n  interval: 0.2,\n  trailLength: 0.1,\n});\n",paraId:2,tocIndex:2},{value:"L7 目前动画参数为相对单位，我们默认一条线段的长度为 1\n",paraId:3,tocIndex:3},{value:"如果 interval = 0.2,则一条轨迹将会分成 5 段，如果 interval = 0.5 则为两段。",paraId:4,tocIndex:3},{value:"在线案例",paraId:5}]},43290:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(23535);const d=[{value:"线图层支持在 style 中设置边框的宽度和颜色",paraId:0,tocIndex:0},{value:"const layer = new LineLayer({})\n  .source(data, {\n    parser: {\n      type: 'csv',\n      x: 'lng1',\n      y: 'lat1',\n      x1: 'lng2',\n      y1: 'lat2',\n    },\n  })\n  .size(1)\n  .shape('arc')\n  .color('#8C1EB2')\n  .style({\n    borderWidth: 0.35, // 默认文 0，最大有效值为 0.5\n    borderColor: '#888', // 默认为 #ccc\n  });\n",paraId:1,tocIndex:0},{value:"在线案例",paraId:2}]},73170:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(2976);const d=[{value:"线图层通过在 style 中设置线的类型，同时指定虚线部分和实线部分",paraId:0,tocIndex:0},{value:"const layer = new LineLayer({})\n  .source(data)\n  .size(1.5)\n  .shape('line')\n  .color('标准名称', ['#5B8FF9', '#5CCEA1', '#F6BD16'])\n  .active(true)\n  .style({\n    lineType: 'dash',\n    dashArray: [5, 5],\n  });\nscene.addLayer(layer);\n",paraId:1,tocIndex:0},{value:"lineType\n默认为 solid，表示实线，dash 表示虚线",paraId:2,tocIndex:0},{value:"dashArray[len1: number, len2: number]\nlen1 实线长度\nlen2 间隔长度",paraId:2,tocIndex:0},{value:"在线案例",paraId:3}]},2983:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(44822);const d=[{value:"线图层通过在 style 中设置起始颜色和终点颜色来设置颜色渐变，渐变色的优先级比 color 方法设置的颜色更高",paraId:0,tocIndex:0},{value:"const layer = new LineLayer({})\n  .source(data, {\n    parser: {\n      type: 'csv',\n      x: 'lng1',\n      y: 'lat1',\n      x1: 'lng2',\n      y1: 'lat2',\n    },\n  })\n  .size(1)\n  .shape('arc')\n  .color('#8C1EB2')\n  .style({\n    sourceColor: '#f00', // 起点颜色\n    targetColor: '#0f0', // 终点颜色\n  });\n",paraId:1,tocIndex:0},{value:"在线案例",paraId:2}]},66630:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(69068);const d=[{value:"arc 图层的弧线默认分段数是 30，然而有有些时候用户并不需要这么多的分段数，适当降低分段数量可以在保证效果的情况下提高性能。",paraId:0,tocIndex:0},{value:"const layer = new LineLayer({})\n  .source(data, {\n    parser: {\n      type: 'csv',\n      x: 'lng1',\n      y: 'lat1',\n      x1: 'lng2',\n      y1: 'lat2',\n    },\n  })\n  .size(1)\n  .shape('arc')\n  .color('#8C1EB2')\n  .style({\n    segmentNumber: 15,\n  });\n",paraId:1,tocIndex:0}]},48826:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(66295);const d=[{value:"线图层支持纹理贴图和多种表现形式，通过 ",paraId:0},{value:"scene.addImage",paraId:0},{value:" 方法添加到全局的资源，使用 ",paraId:0},{value:"texture",paraId:0},{value:" 方法指定贴图。",paraId:0},{value:"scene.addImage(\n  '02',\n  'https://gw.alipayobjects.com/zos/bmw-prod/ce83fc30-701f-415b-9750-4b146f4b3dd6.svg',\n);\nconst layer = new LineLayer()\n  .source(data)\n  .size(4)\n  .shape('line')\n  .texture('02')\n  .color('#25d8b7')\n  .animate({\n    interval: 1, // 间隔\n    duration: 1, // 持续时间，延时\n    trailLength: 2, // 流线长度\n  })\n  .style({\n    lineTexture: true, // 开启线的贴图功能\n    iconStep: 20, // 设置贴图纹理的间距\n  });\n",paraId:1},{value:"\n  ",paraId:2},{value:"\n    ",paraId:2},{value:"\n  ",paraId:2},{value:"lineTexture 指定是否开启纹理贴图能力",paraId:3},{value:"iconStep 指定贴图在线图层上面排布的间隔",paraId:3},{value:"在线案例",paraId:4},{value:"✨ animate",paraId:5,tocIndex:0},{value:"\n当线图层 (",paraId:5,tocIndex:0},{value:"shape",paraId:5,tocIndex:0},{value:" 为 ",paraId:5,tocIndex:0},{value:"arc",paraId:5,tocIndex:0},{value:"/",paraId:5,tocIndex:0},{value:"arc3d",paraId:5,tocIndex:0},{value:") 开启动画模式的时候，纹理在线图层上的分布还会和 ",paraId:5,tocIndex:0},{value:"animate",paraId:5,tocIndex:0},{value:" 的参数相关.",paraId:5,tocIndex:0},{value:"线图层上排列的纹理的数量大致为 duration/interval",paraId:6,tocIndex:0},{value:".animate({\n    duration: 1,\n    interval: 0.2,\n    trailLength: 0.1\n});\n\n// 此时 纹理贴图数量为  duration / interval = 5\n",paraId:7,tocIndex:0},{value:"✨ textureBlend 参数",paraId:8,tocIndex:0},{value:"\n通过控制 style 方法中的 textureBlend 参数，我们可以控制纹理图层和线图层的混合情况",paraId:8,tocIndex:0},{value:"normal",paraId:9,tocIndex:0},{value:"replace",paraId:9,tocIndex:0},{value:".style({\n    lineTexture: true, // 开启线的贴图功能\n    iconStep: 30, // 设置贴图纹理的间距\n    textureBlend: 'replace', // 设置纹理混合方式，默认值为 normal，可选值有 normal/replace 两种\n  });\n\n",paraId:10,tocIndex:0},{value:"在线案例",paraId:11}]},86052:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(58812);const d=[{value:"thetaOffset 参数 表示 arc 弧线的弧度，默认值是 0.314",paraId:0,tocIndex:0},{value:"const layer = new LineLayer({})\n  .source(data, {\n    parser: {\n      type: 'csv',\n      x: 'lng1',\n      y: 'lat1',\n      x1: 'lng2',\n      y1: 'lat2',\n    },\n  })\n  .size(1)\n  .shape('arc')\n  .color('#8C1EB2')\n  .style({\n    thetaOffset: 0.35,\n  });\n",paraId:1,tocIndex:0},{value:"在线案例",paraId:2}]},31991:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(35514);const d=[{value:"线图层支持给每个顶点赋予高度值，同时允许用户在 style 方法中通过 vertexHeightScale 属性设置高度比例。",paraId:0,tocIndex:0},{value:"const layer = new LineLayer({})\n  .source(data)\n  .size(1)\n  .shape('line')\n  .style({\n    vertexHeightScale: 30,\n  })\n  .color('#ccc');\n\nscene.addLayer(layer);\n",paraId:1,tocIndex:0},{value:"带有高度值的数据",paraId:2,tocIndex:0},{value:'{\n"type": "FeatureCollection",\n"name": "tw",\n"crs": { "type": "name", "properties": { "name": "urn:ogc:def:crs:OGC:1.3:CRS84" } },\n"features": [\n  {\n    "type": "Feature",\n    "properties": { },\n    "geometry": {\n      "type": "LineString", "coordinates":\n      [\n        [ 121.519153647, 25.288692533, 41.0 ],\n        [ 121.529153646999987, 25.288692533, 35.0 ],\n        [ 121.539153647, 25.288692533, 27.0 ],\n        [ 121.549153647, 25.288692533, 66.0 ],\n        [ 121.559153646999988, 25.288692533, 83.0 ],\n        [ 121.569153647, 25.288692533, 88.0 ]\n      ]\n    }\n  },\n...\n}\n\n',paraId:3,tocIndex:0},{value:"在线案例",paraId:4}]},95950:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(81613);const d=[{value:" ",paraId:0,tocIndex:1},{value:"string",paraId:0,tocIndex:1},{value:" ",paraId:0,tocIndex:1},{value:"optional",paraId:0,tocIndex:1},{value:" ",paraId:0,tocIndex:1},{value:"default:",paraId:0,tocIndex:1},{value:" 自动数字编号",paraId:0,tocIndex:1},{value:"设置图层名称,可根据 name 获取 layer",paraId:1,tocIndex:1},{value:"scene.getLayerByName(name);\n",paraId:2,tocIndex:1},{value:" ",paraId:3,tocIndex:2},{value:"bool",paraId:3,tocIndex:2},{value:" ",paraId:3,tocIndex:2},{value:"optional",paraId:3,tocIndex:2},{value:" ",paraId:3,tocIndex:2},{value:"default:",paraId:3,tocIndex:2},{value:" true",paraId:3,tocIndex:2},{value:"图层是否可见",paraId:4,tocIndex:2},{value:" ",paraId:5,tocIndex:3},{value:"int",paraId:5,tocIndex:3},{value:" ",paraId:5,tocIndex:3},{value:"optional",paraId:5,tocIndex:3},{value:" ",paraId:5,tocIndex:3},{value:"default:",paraId:5,tocIndex:3},{value:" 0",paraId:5,tocIndex:3},{value:"图层绘制顺序，数值大绘制在上层，可以控制图层绘制的上下层级",paraId:6,tocIndex:3},{value:"L7 采用队列渲染的机制，所有的图层在内部保存在一个数组中，每一帧的渲染会将图层数组按照 zIndex 的值进行排序，然后遍历数组，将符合条件的图层渲染到场景中",paraId:7,tocIndex:3},{value:" ",paraId:8,tocIndex:4},{value:"number",paraId:8,tocIndex:4},{value:" ",paraId:8,tocIndex:4},{value:"optional",paraId:8,tocIndex:4},{value:" ",paraId:8,tocIndex:4},{value:"default:",paraId:8,tocIndex:4},{value:" Mapbox （0-24） 高德 （2-19)",paraId:8,tocIndex:4},{value:"图层显示最小缩放等级",paraId:9,tocIndex:4},{value:" ",paraId:10,tocIndex:5},{value:"number",paraId:10,tocIndex:5},{value:" ",paraId:10,tocIndex:5},{value:"optional",paraId:10,tocIndex:5},{value:" ",paraId:10,tocIndex:5},{value:"default:",paraId:10,tocIndex:5},{value:" Mapbox （0-24） 高德 （2-19)",paraId:10,tocIndex:5},{value:"图层显示最大缩放等级",paraId:11,tocIndex:5},{value:" ",paraId:12,tocIndex:6},{value:"bool",paraId:12,tocIndex:6},{value:" ",paraId:12,tocIndex:6},{value:"optional",paraId:12,tocIndex:6},{value:" ",paraId:12,tocIndex:6},{value:"default:",paraId:12,tocIndex:6},{value:" false",paraId:12,tocIndex:6},{value:"layer 初始化完成之后，地图是否自动缩放到图层范围",paraId:13,tocIndex:6},{value:" ",paraId:14,tocIndex:7},{value:"bool",paraId:14,tocIndex:7},{value:" ",paraId:14,tocIndex:7},{value:"optional",paraId:14,tocIndex:7},{value:" ",paraId:14,tocIndex:7},{value:"default:",paraId:14,tocIndex:7},{value:" 0",paraId:14,tocIndex:7},{value:"图层拾取缓存机制，如 1px 宽度的线鼠标很难拾取(点击)到, 通过设置该参数可扩大拾取的范围（放大图层对象的尺寸）",paraId:15,tocIndex:7},{value:" ",paraId:16,tocIndex:8},{value:"string",paraId:16,tocIndex:8},{value:" ",paraId:16,tocIndex:8},{value:"optional",paraId:16,tocIndex:8},{value:" ",paraId:16,tocIndex:8},{value:"default:",paraId:16,tocIndex:8},{value:" 'normal'",paraId:16,tocIndex:8},{value:"图层元素混合效果",paraId:17,tocIndex:8},{value:"normal 正常效果 默认 发生遮挡的时候，只会显示前面的图层的颜色",paraId:18,tocIndex:8},{value:"additive 叠加模式 发生遮挡的时候，显示前后图层颜色的叠加",paraId:18,tocIndex:8},{value:"subtractive 相减模式 发生遮挡的时候，显示前后图层颜色的相减",paraId:18,tocIndex:8},{value:"max 最大值 发生遮挡的时候，显示图层颜色 rgb 的最大值",paraId:18,tocIndex:8},{value:" ",paraId:19,tocIndex:9},{value:"boolean",paraId:19,tocIndex:9},{value:" ",paraId:19,tocIndex:9},{value:"optional",paraId:19,tocIndex:9},{value:" ",paraId:19,tocIndex:9},{value:"default:",paraId:19,tocIndex:9},{value:" 'false'",paraId:19,tocIndex:9},{value:"\n图层事件，默认只响应最上层图层，设置为true 将允许事件透传",paraId:19,tocIndex:9},{value:"⚠️ mask、maskfence 不推荐使用，一下配置 2.14.x 之后版本生效",paraId:20,tocIndex:9},{value:"模板图层：用做模板的图层，PointLayer、LineLayer、PolygonLayer 都可以作为模板\n掩模图层：被模板切割的图层",paraId:21,tocIndex:9},{value:"掩模图层生效",paraId:22,tocIndex:10},{value:" ",paraId:23,tocIndex:10},{value:"array Layer",paraId:23,tocIndex:10},{value:" ",paraId:23,tocIndex:10},{value:"optional",paraId:23,tocIndex:10},{value:" ",paraId:23,tocIndex:10},{value:"default:",paraId:23,tocIndex:10},{value:" []",paraId:23,tocIndex:10},{value:"掩模图层生效",paraId:24,tocIndex:11},{value:"是否开启掩模，默认开启 maskLayers 不为空时生效",paraId:25,tocIndex:11},{value:" ",paraId:26,tocIndex:11},{value:"bool",paraId:26,tocIndex:11},{value:" ",paraId:26,tocIndex:11},{value:"optional",paraId:26,tocIndex:11},{value:" ",paraId:26,tocIndex:11},{value:"default:",paraId:26,tocIndex:11},{value:" true",paraId:26,tocIndex:11},{value:"掩模图层生效\n",paraId:27,tocIndex:12},{value:" ",paraId:28,tocIndex:12},{value:"boolean",paraId:28,tocIndex:12},{value:" ",paraId:28,tocIndex:12},{value:"optional",paraId:28,tocIndex:12},{value:" ",paraId:28,tocIndex:12},{value:"default:",paraId:28,tocIndex:12},{value:" true",paraId:28,tocIndex:12},{value:"用来描述当前图层的内容与掩模边界显示。",paraId:29,tocIndex:12},{value:"true",paraId:30,tocIndex:12},{value:" 在掩模内部显示",paraId:30,tocIndex:12},{value:"false",paraId:30,tocIndex:12},{value:" 在掩模外部显示",paraId:30,tocIndex:12},{value:"模板图层生效\n",paraId:31,tocIndex:13},{value:" ",paraId:31,tocIndex:13},{value:"枚举",paraId:31,tocIndex:13},{value:" ",paraId:31,tocIndex:13},{value:"optional",paraId:31,tocIndex:13},{value:" ",paraId:31,tocIndex:13},{value:"default:",paraId:31,tocIndex:13},{value:" and",paraId:31,tocIndex:13},{value:"\nmaskLayers 为多个时失效，需要在模板图层设置",paraId:31,tocIndex:13},{value:"or 交集",paraId:32,tocIndex:13},{value:"and 并集",paraId:32,tocIndex:13},{value:"使用示例",paraId:33,tocIndex:13},{value:"const polygonLayer = new Polygon();\nconst rasterLayer = new Raster({\n  // 栅格图层使用polygon 掩模\n  maskLayers: [polygonLayer],\n  enableMask: true,\n  maskInside: true,\n});\n",paraId:34,tocIndex:13},{value:"设置图层数据以及解析配置 ",paraId:35,tocIndex:15},{value:"source(data, config)",paraId:35,tocIndex:15},{value:"。",paraId:35,tocIndex:15},{value:"data { geojson | json | csv }",paraId:36,tocIndex:15},{value:"config   可选   数据源配置项\n",paraId:36,tocIndex:15},{value:"parser 数据解析，默认是解析层 geojson",paraId:37,tocIndex:15},{value:"transforms [transform，transform ]  数据处理转换可设置多个",paraId:37,tocIndex:15},{value:"parser",paraId:38,tocIndex:15},{value:" 和  ",paraId:38,tocIndex:15},{value:"transforms",paraId:38,tocIndex:15},{value:" ",paraId:38,tocIndex:15},{value:"见 source 文档",paraId:39,tocIndex:15},{value:"。",paraId:38,tocIndex:15},{value:"layer.source(data, {\n  parser: {\n    type: 'csv',\n    x: 'lng',\n    y: 'lat',\n  },\n  transforms: [\n    {\n      type: 'map',\n      callback: function (item) {\n        const [x, y] = item.coordinates;\n        item.lat = item.lat * 1;\n        item.lng = item.lng * 1;\n        item.v = item.v * 1;\n        item.coordinates = [x * 1, y * 1];\n        return item;\n      },\n    },\n    {\n      type: 'hexagon',\n      size: 6000,\n      field: 'v',\n      method: 'sum',\n    },\n  ],\n});\n",paraId:40,tocIndex:15},{value:"我们在使用 ",paraId:41,tocIndex:16},{value:"cluster",paraId:41,tocIndex:16},{value:" 配置聚合图之后就可以使用一些聚合方法来获取对应参数。",paraId:41,tocIndex:16},{value:"获取指定缩放等级的聚合数据",paraId:42,tocIndex:17},{value:"zoom",paraId:43,tocIndex:17},{value:" 缩放等级",paraId:43,tocIndex:17},{value:"根据 ",paraId:44,tocIndex:18},{value:"id",paraId:44,tocIndex:18},{value:" 获取聚合节点的数据，每个聚合节点会有一个唯一 ",paraId:44,tocIndex:18},{value:"ID",paraId:44,tocIndex:18},{value:"。",paraId:44,tocIndex:18},{value:"id",paraId:45,tocIndex:18},{value:" 聚合节点的 ",paraId:45,tocIndex:18},{value:"id",paraId:45,tocIndex:18},{value:"const source = layer.getSource();\nsource.getClustersLeaves(id);\nlayer.on('click', (e) => {\n  console.log(source.getClustersLeaves(e.feature.cluster_id));\n});\n",paraId:46,tocIndex:18},{value:"Scale 度量是将地图数据值（数字、日期、类别等数据）转成视觉值（颜色、大小、形状）。尺度 Scale 是数据可视化的基本组成部分，因为它们决定了视觉编码的性质。 L7 目前支持连续、离散、枚举类型数据的Scale，并支持位置、形状、大小和颜色编码的映射。",paraId:47,tocIndex:19},{value:"在使用 L7 过程中，默认情况下不需要进行 Scale 的配置，因为 L7 会根据数据类型对 scale 推断，推断过程如下：",paraId:48,tocIndex:19},{value:"查看用户是否设置了 Scale，如果没有:",paraId:49,tocIndex:19},{value:"判断字段的第一条数据的字段类型，如果数据中不存在对应的字段：",paraId:50,tocIndex:19},{value:"认为是常量为固定值",paraId:51,tocIndex:19},{value:"如果是数字则为 'linear';",paraId:52,tocIndex:19},{value:"如果是字符串类型 'cat';",paraId:53,tocIndex:19},{value:"Scale 详细介绍",paraId:54,tocIndex:20},{value:"参数： (field: string, scaleOptions: IscaleOptions)",paraId:55,tocIndex:20},{value:"field",paraId:56,tocIndex:20},{value:" 指定 source 中传入的数据中用于映射的字段名",paraId:56,tocIndex:20},{value:"scaleOptions",paraId:56,tocIndex:20},{value:" 列定义配置，对象类型\n",paraId:56,tocIndex:20},{value:"type scale 类型",paraId:57,tocIndex:20},{value:"unknown 未匹配颜色 可选 默认透明",paraId:57,tocIndex:20},{value:"domain 值域 可选",paraId:57,tocIndex:20},{value:"interface IscaleOptions {\n  type: ScaleTypeName;\n  domain?: any[];\n  ...\n}\n\nlayer.color('id', ['#f00', '#ff0'])\n.size('mag', [1, 80])\n.scale('mag', {\n  type: 'linear',\n  domain: [ 1, 50]\n})；\n",paraId:58,tocIndex:20},{value:"Range 和 domain 是 Scale 中非常重要的两个参数",paraId:59,tocIndex:21},{value:"domain: 地图数据值的定义区间\nrange：视觉值的区间\n不同Scale 的差异在于 domain->range 的转换方法的不同",paraId:60,tocIndex:21},{value:"domain: 地图数据值的定义区间",paraId:61,tocIndex:21},{value:"range：视觉值的区间定义",paraId:61,tocIndex:21},{value:"数据类",paraId:62,tocIndex:21},{value:"度量类型",paraId:62,tocIndex:21},{value:"连续",paraId:62,tocIndex:21},{value:"linear、log、pow",paraId:62,tocIndex:21},{value:"连续分类",paraId:62,tocIndex:21},{value:"quantize quantile,threshold,diverging",paraId:62,tocIndex:21},{value:"分类 枚举",paraId:62,tocIndex:21},{value:"cat",paraId:62,tocIndex:21},{value:"Cat 指枚举类型，用于展示分类数据，比如农作物种植区分布图，水稻、玉米、大豆等不同类别需要映射为不同的颜色。",paraId:63,tocIndex:22},{value:"// 三种作物会分别转成对应的颜色\n// domain = ['corn','rice', 'soybean'];\n// range = ['red','white','blue'];\nconst data = [\n  { lng: 120, lat: 30, t: 'corn' },\n  { lng: 121, lat: 30, t: 'rice' },\n  { lng: 122, lat: 30, t: 'soybean' },\n];\nlayer.source(data, {\n  parser: {\n    type: 'type',\n    x: 'lng',\n    y: 'lat',\n  },\n});\nlayer.scale('t', { type: 'cat' });\nlayer.color('t', ['red', 'white', 'blue']);\n",paraId:64,tocIndex:22},{value:"数据值和映射值相同\n比如数据中value 字段记录了每个要素的颜色，数值既为要映射的结果值s",paraId:65,tocIndex:23},{value:"// 设置为 identify\nlayer.scale('value', { type: 'identify' });\n\n// 或者\n\nlayer.scale('value'); // L7  能够自动推断为  identify\n\n",paraId:66,tocIndex:23},{value:"线性是连续数据的映射方法，数据和视觉值是通过线性方法换算的。如数据值 1-100 线性映射到红到蓝的线下渐变色每个数字对应一个颜色",paraId:67,tocIndex:24},{value:"相等间隔会将属性值的范围划分为若干个大小相等的子范围。相等间隔最适用于常见的数据范围，如百分比和温度。这种方法强调的是某个属性值相对于其他值的量",paraId:68,tocIndex:25},{value:"每个类都含有相等数量的要素。分位数分类非常适用于呈线性分布的数据。分位数为每个类分配数量相等的数据值。不存在空类，也不存在值过多或过少的类。\n由于使用“分位数”分类将要素以同等数量分组到每个类中，因此得到的地图往往具有误导性。可能会将相似的要素置于相邻的类中，或将值差异较大的要素置于相同类中。可通过增加类的数量将这种失真降至最低。",paraId:69,tocIndex:26},{value:"他允许将域的任意子集（非统一段）映射到范围内的离散值。输入域仍然是连续的，并根据提供给域属性的一组阈值划分为多个切片。 range 属性必须有 N+1 个元素，其中 N 是域中提供的阈值边界数",paraId:70,tocIndex:27},{value:"手动设置间隔 Manual interval 手动设置分级分类区间，某些数据会有相应的业界标准，或者需要进行某种特殊的显示。如空气质量数据有严格数据分段标准",paraId:71,tocIndex:27},{value:'-1   => "red"\n0    => "white"\n0.5  => "white"\n1.0  => "blue"\n1000 => "blue\n\n',paraId:72,tocIndex:27},{value:"离散分类通常与两种相反的色调一起使用，以显示从负值到中心到正值的变化。这些类型的地图显示了彼此相关的值的大小。",paraId:73,tocIndex:28},{value:"根据视觉通道名称获取 scale 实例,调用之前确保 layer 已经初始化完成",paraId:74,tocIndex:29},{value:"const scale = layer.getScale('color');\nconst color = scale(1); // 将数值转换成颜色\n",paraId:75,tocIndex:29},{value:"更多是方法\n",paraId:76,tocIndex:29},{value:"scale 示例使用",paraId:76,tocIndex:29},{value:"可视化编码是将数据转换为可视形式的过程，L7 目前支持形状，大小，颜色 3 种视觉通道，你可以指定数据字段，为不同要素设置不同的图形属性。",paraId:77,tocIndex:30},{value:"数据过滤方法,支持回调函数，将数据映射为true | false, 结果为true 时可见",paraId:78,tocIndex:31},{value:"pointLayer.filter('type', (type) => {\n  // 回调函数\n  if (type === 'a') {\n    return false;\n  }\n  return true;\n});\n",paraId:79,tocIndex:31},{value:"将数据值映射到图形的大小上的方法，size 方法具体的参数使用可以查看对应图层的详细文档",paraId:80,tocIndex:32},{value:"pointLayer.size(10); // 常量\npointLayer.size('type'); // 使用字段映射到大小\npointLayer.size('type', [0, 10]); // 使用字段映射到大小，并指定最大值和最小值\npointLayer.size('type', (type) => {\n  // 回调函数\n  if (type === 'a') {\n    return 10;\n  }\n  return 5;\n});\n",paraId:81,tocIndex:32},{value:"传入数字常量，如  ",paraId:82,tocIndex:33},{value:"pointLayer.size(20)",paraId:82,tocIndex:33},{value:"根据 field 字段的值映射大小，使用默认的",paraId:83,tocIndex:34},{value:"最大值 max:10",paraId:83,tocIndex:34},{value:"  和",paraId:83,tocIndex:34},{value:"最小值 min: 1",paraId:83,tocIndex:34},{value:"。",paraId:83,tocIndex:34},{value:"使用回调函数控制图形大小。",paraId:84,tocIndex:35},{value:"callback",paraId:85,tocIndex:35},{value:": function 回调函数。",paraId:85,tocIndex:35},{value:"pointLayer.size('age', (value) => {\n  if (value === 1) {\n    return 5;\n  }\n  return 10;\n});\n",paraId:86,tocIndex:35},{value:"将数据值映射到图形的颜色上的方法。",paraId:87,tocIndex:36},{value:"layer.color('red'); // 常量颜色\nlayer.color('type'); // 对 type 字段进行映射，使用内置的颜色\nlayer.color('type', ['red', 'blue']); // 指定颜色\nlayer.color('type', (type) => {\n  // 通过回调函数\n  if (type === 'a') {\n    return 'red';\n  }\n  return 'blue';\n});\nlayer.color('type*value', (type, value) => {\n  //多个参数，通过回调函数\n  if (type === 'a' && value > 100) {\n    return 'red';\n  }\n  return 'blue';\n});\n",paraId:88,tocIndex:36},{value:"参数：",paraId:89,tocIndex:37},{value:"value",paraId:89,tocIndex:37},{value:" ：string",paraId:89,tocIndex:37},{value:"只支持接收一个参数，value 可以是：",paraId:90,tocIndex:37},{value:"映射至颜色属性的数据源字段名，如果数据源中不存在这个字段名的话，则按照常量进行解析，这个时候会使用 L7 默认提供的颜色。",paraId:91,tocIndex:37},{value:"也可以直接指定某一个具体的颜色值 color，如 '#fff', 'white','rgba(255,0,0,0.5)' ,rgb(255,0,1) 等。",paraId:92,tocIndex:37},{value:"如果数据为映射到颜色，默认为透明色不显示，如果需要设置该颜色，需要在scale 中设置",paraId:93,tocIndex:37},{value:"示例",paraId:94,tocIndex:37},{value:"layer.color('name'); // 映射数据字段\nlayer.color('white'); // 指定颜色\n",paraId:95,tocIndex:37},{value:"参数：",paraId:96,tocIndex:38},{value:"field",paraId:97,tocIndex:38},{value:": stringfield 为映射至颜色属性的数据源字段名，也支持指定多个参数。",paraId:97,tocIndex:38},{value:"colors",paraId:98,tocIndex:38},{value:": string | array | function",paraId:98,tocIndex:38},{value:"colors 的参数有以下情况：  如果为空，即未指定颜色的数组，那么使用内置的全局的颜色；如果需要指定颜色，则需要以数组格式传入，那么分类的颜色按照数组中的颜色确定。",paraId:99,tocIndex:38},{value:"layer.scale('name',{\n  type:'quantile'\n  unknown:'#ccc' // 设置无效颜色\n})\nlayer.color('name'); // 使用identity\nlayer.color('name', ['red', 'blue']); // 使用传入的指定颜色\n",paraId:100,tocIndex:38},{value:"colors 如果是回调函数，则该回调函数的参数为对应字段的数值，具体使用如下，当 color 映射为多个字段时，参数按照字段声明的顺序传入：",paraId:101,tocIndex:38},{value:"layer.color('gender', (value) => {\n  if (value === 1) {\n    return 'red';\n  }\n  return 'blue';\n});\nlayer.color('gender*age', (gender, age) => {\n  if (age === 20 && gender == ' 男') {\n    return 'red';\n  }\n  return 'blue';\n});\n",paraId:102,tocIndex:38},{value:"通常一种图层可以有多种表现形式，shape 方法用于指定图层具体的表现形式，以 PointLayer 的 shape 为例：",paraId:103,tocIndex:39},{value:"shape('circle'); // 圆形\nshape('triangle'); // 三角形\nshape('cylinder'); // 圆柱\n",paraId:104,tocIndex:39},{value:"shape(shape)",paraId:105,tocIndex:39},{value:"参数 ",paraId:106,tocIndex:39},{value:"shape",paraId:106,tocIndex:39},{value:" string",paraId:106,tocIndex:39},{value:"只支持接收一个参数，指定几何图像对象绘制的形状。下表列出了不同的 图层 几何图形对象支持的 shape 形状",paraId:107,tocIndex:39},{value:"layer 类型",paraId:108,tocIndex:39},{value:"shape 类型",paraId:108,tocIndex:39},{value:"备注",paraId:108,tocIndex:39},{value:"point",paraId:108,tocIndex:39},{value:"2d:point,circle, square, triangle,hexagon,image,text 3d:circle,triangle,hexagon,square",paraId:108,tocIndex:39},{value:"line",paraId:108,tocIndex:39},{value:"line,arc, arc3d, greatcircle",paraId:108,tocIndex:39},{value:"polygon",paraId:108,tocIndex:39},{value:"fill,line, extrude",paraId:108,tocIndex:39},{value:"shape(field, shapes)",paraId:109,tocIndex:39},{value:"shape 根据字段指定行形状，比如根据字段指定 PointLayer/imageLayer 的 icon 类型",paraId:110,tocIndex:39},{value:"scene.addImage(\n  '00',\n  'https://gw.alipayobjects.com/zos/basement_prod/604b5e7f-309e-40db-b95b-4fac746c5153.svg',\n);\nscene.addImage(\n  '01',\n  'https://gw.alipayobjects.com/zos/basement_prod/30580bc9-506f-4438-8c1a-744e082054ec.svg',\n);\nscene.addImage(\n  '02',\n  'https://gw.alipayobjects.com/zos/basement_prod/7aa1f460-9f9f-499f-afdf-13424aa26bbf.svg',\n);\nconst imageLayer = new PointLayer()\n  .source(data, {\n    parser: {\n      type: 'json',\n      x: 'longitude',\n      y: 'latitude',\n    },\n  })\n  .shape('name', ['00', '01', '02'])\n  .size(20);\nscene.addLayer(imageLayer);\n",paraId:111,tocIndex:39},{value:"在线案例",paraId:112},{value:"shape(field, callback)",paraId:113},{value:"shape 也支持回调函数的写法",paraId:114},{value:".shape('key', value => {\n  if(value > 10) {\n    return 'circle';\n  } else {\n    return 'triangle';\n  }\n}\n",paraId:115},{value:"style 方法通常用于描述图层具体的样式，大多数图层会支持一些比较通用的属性， 如 opacity 属性，同时每个图层也会有仅限本图层支持的属性，如只有\nCityBuildingLayer 支持的 windowColor 属性，每个图层具体要如何配置属性请查看每个图层的详细文档。",paraId:116,tocIndex:40},{value:"opacity 设置透明度 大部分图层都支持",paraId:117,tocIndex:40},{value:"stroke 线填充颜色 仅点图层支持",paraId:118,tocIndex:40},{value:"strokeWidth 线的宽度 仅点图层支持",paraId:119,tocIndex:40},{value:"layer.style({\n  opacity: 0.8,\n  stroke: 'white',\n});\n",paraId:120,tocIndex:40},{value:"样式数据映射🌟",paraId:121,tocIndex:40},{value:"\n在正常情况下，style 的参数会作用到一个图层上的所有图形，如一个 PointLayer 中有十个点，我们设置 opacity = 0.5， 这样十个点的透明度都是 0.5。",paraId:121,tocIndex:40},{value:"\n而在特殊情况下，我们可能需要为每个点分别设置一个透明度，这时候按照原来的方式直接设置 style 方法的 opacity 的值就无法满足需求了，为此我们需要提供特殊的赋值方式。",paraId:121,tocIndex:40},{value:"\n通常我们会根据传入图层的数据为图层的每个图形设置单独的值，因此我们称之为“样式数据映射”。",paraId:121,tocIndex:40},{value:"\n我们支持几种设置 style 中的参数从 source 数据中动态取值的写法。",paraId:121,tocIndex:40},{value:"// 根据数据中的 v 字段的值设置点图层各个点的透明度\nconst data = [\n  {\n    lng: 120,\n    lat: 30,\n    v: 0.5\n  },\n  ...\n]\nconst layer = new PointLayer()\n  .source(data, {\n    parser: {\n      x: 'lng',\n      y: 'lat'\n    }\n  })\n  .shape('circle')\n  .color('#f00')\n  .size({\n    // 第一种写法 根据字段从 data 中直接取值\n    opacity: 'v'// opacity = 0.5\n  });\nscene.addLayer(layer);\n",paraId:122,tocIndex:40},{value:"在线案例",paraId:123},{value:"从 ",paraId:124},{value:"L7 2.5",paraId:124},{value:" 开始，各图层样式将逐步支持样式数据映射，目前支持样式数据映射的 ",paraId:124},{value:"style",paraId:124},{value:" 参数如下：",paraId:124},{value:"layer 类型/shape",paraId:125},{value:"支持的样式字段",paraId:125},{value:"备注",paraId:125},{value:"pointLayer/fill",paraId:125},{value:"opacity、strokeOpacity、strokeWidth、stroke、offsets",paraId:125},{value:"shape circle、triangle...",paraId:125},{value:"pointLayer/image",paraId:125},{value:"opacity、offsets",paraId:125},{value:"offsets 经纬度偏移",paraId:125},{value:"pointLayer/normal",paraId:125},{value:"opacity、offsets",paraId:125},{value:"pointLayer/text",paraId:125},{value:"opacity、strokeWidth、stroke、textOffset",paraId:125},{value:"textOffset 相对文字画布位置的偏移",paraId:125},{value:"pointLayer/extrude",paraId:125},{value:"opacity",paraId:125},{value:"polygonLayer/fill",paraId:125},{value:"opacity",paraId:125},{value:"polygonLayer/extrude",paraId:125},{value:"opacity",paraId:125},{value:"lineLayer/line",paraId:125},{value:"opacity",paraId:125},{value:"lineLayer/arc",paraId:125},{value:"opacity、thetaOffset",paraId:125},{value:"thetaOffset 弧线的弯曲弧度",paraId:125},{value:"lineLayer/arc3d",paraId:125},{value:"opacity",paraId:125},{value:"lineLayer/great_circle",paraId:125},{value:"opacity",paraId:125},{value:"在线案例",paraId:126},{value:"目前只在线图层上支持了纹理方法",paraId:127,tocIndex:41},{value:"texture 方法支持传入由 scene.addImage 方法添加的全局 icon 贴图资源",paraId:128,tocIndex:41},{value:"// 首先在全局加载图片资源\nscene.addImage(\n  'plane',\n  'https://gw.alipayobjects.com/zos/bmw-prod/0ca1668e-38c2-4010-8568-b57cb33839b9.svg',\n);\n\nconst layer = new LineLayer({\n  blend: 'normal',\n})\n  .source(data, {\n    parser: {\n      type: 'json',\n      x: 'lng1',\n      y: 'lat1',\n      x1: 'lng2',\n      y1: 'lat2',\n    },\n  })\n  .size(25)\n  .shape('arc')\n  .texture('plane') // 为图层绑定纹理\n  .color('#8C1EB2')\n  .style({\n    lineTexture: true, // 开启线的贴图功能\n    iconStep: 30, // 设置贴图纹理的间距\n    textureBlend: 'replace', // 设置纹理混合方式，默认值为 normal，可选值有 normal/replace 两种\n  });\n",paraId:129,tocIndex:41},{value:"在线案例",paraId:130},{value:"如果已经添加了图层，需要修改图层显示样式可以再次调用图形映射方法，然后调用 ",paraId:131,tocIndex:42},{value:"scene.render()",paraId:131,tocIndex:42},{value:"更新渲染即可",paraId:131,tocIndex:42},{value:"重新调用scale 方法",paraId:132,tocIndex:43},{value:"layer.scale('value', {\n  type: 'quantile',\n});\nscene.render();\n",paraId:133,tocIndex:43},{value:"重新调用 color/size/filter/shape等方法",paraId:134,tocIndex:44},{value:"layer.color('blue');\nlayer.size(10);\n\nscene.render();\n",paraId:135,tocIndex:44},{value:"layer.style({\n  opacity: 1,\n});\n\nscene.render();\n",paraId:136,tocIndex:45},{value:"更新 Source 数据",paraId:137,tocIndex:46},{value:"参数:",paraId:138,tocIndex:46},{value:"data 数据",paraId:139,tocIndex:46},{value:"option 默认和初始配置项一致，如果数据格式相同可不设置",paraId:139,tocIndex:46},{value:"调用 setData 方法会自动更新图层渲染",paraId:140,tocIndex:46},{value:"layer.setData(data);\n",paraId:141,tocIndex:46},{value:"设置图层叠加方法\n参数：",paraId:142,tocIndex:47},{value:"type blend 类型 normal ｜ additive ｜ subtractive ｜ max",paraId:143,tocIndex:47},{value:"图层显示",paraId:144,tocIndex:49},{value:"layer.show();\n",paraId:145,tocIndex:49},{value:"图层隐藏",paraId:146,tocIndex:50},{value:"layer.hide();\n",paraId:147,tocIndex:50},{value:"图层是否可见",paraId:148,tocIndex:51},{value:"layer.isVisible();\n",paraId:149,tocIndex:51},{value:"设置图层绘制顺序",paraId:150,tocIndex:52},{value:"layer.setIndex(1);\n",paraId:151,tocIndex:52},{value:"缩放到图层范围",paraId:152,tocIndex:53},{value:"layer.fitBounds();\n",paraId:153,tocIndex:53},{value:"设置图层最小缩放等级",paraId:154,tocIndex:54},{value:"layer.setMinZoom(zoom);\n",paraId:155,tocIndex:54},{value:"设置图层最大缩放等级",paraId:156,tocIndex:55},{value:"layer.setMinZoom(zoom);\n",paraId:157,tocIndex:55},{value:"设置图层最大缩放等级",paraId:158,tocIndex:55},{value:"参数",paraId:159,tocIndex:55},{value:"zoom {number}",paraId:160,tocIndex:55},{value:"layer.setMinZoom(zoom);\n",paraId:161,tocIndex:55},{value:"开启或者关闭 mousehover 元素高亮效果",paraId:162,tocIndex:57},{value:"activeOption",paraId:162,tocIndex:57},{value:"color",paraId:163,tocIndex:57},{value:": 高亮颜色",paraId:163,tocIndex:57},{value:"mix",paraId:163,tocIndex:57},{value:": 可选参数，默认为 0，表示高亮颜色是指定纯色，最大有效值是1，表示高亮色全部是底色",paraId:163,tocIndex:57},{value:"activeOption: {\n  color: '#f00';\n  mix: 0.6;\n}\n",paraId:164,tocIndex:57},{value:"// 开启 Active  使用默认高亮颜色\nlayer.active(true);\n\n//  开启 Active  自定义高亮颜色\n\nlayer.active({\n  color: 'red',\n  mix: 0.6,\n});\n\n// 关闭高亮效果\nlayer.active(false);\n",paraId:165,tocIndex:57},{value:"根据元素 ID 设置指定元素 hover 高亮",paraId:166,tocIndex:58},{value:"🌟 指定元素高亮不等于图层高亮，一个图层包含多个元素，一般传入 source 的数据数组中有多少单条数据，一个图层就有多少元素",paraId:167,tocIndex:58},{value:"layer.setActive(featureId);\n",paraId:168,tocIndex:58},{value:"开启或者关闭 mouseclick 元素选中高亮效果",paraId:169,tocIndex:59},{value:"selectOption\n",paraId:169,tocIndex:59},{value:"color",paraId:170,tocIndex:59},{value:": 选中高亮颜色",paraId:170,tocIndex:59},{value:"mix",paraId:170,tocIndex:59},{value:": 可选参数，默认为 0，表示选中高亮颜色是指定纯色，最大有效值是1，表示选中高亮色全部是底色",paraId:170,tocIndex:59},{value:"selectOption: {\n  color: '#f00';\n  mix: 0.6;\n}\n",paraId:171,tocIndex:59},{value:"// 开启 Active  使用默认高亮颜色\nlayer.select(true);\n\n//  开启 Active  自定义高亮颜色\n\nlayer.select({\n  color: 'red',\n  mix: 0.6,\n});\n\n// 关闭高亮效果\nlayer.select(false);\n",paraId:172,tocIndex:59},{value:"根据元素 ID 设置指定元素 click 选中 高亮",paraId:173,tocIndex:60},{value:"🌟 指定元素高亮不等于图层高亮，一个图层包含多个元素，一般传入 source 的数据数组中有多少单条数据，一个图层就有多少元素",paraId:174,tocIndex:60},{value:"layer.setSelect(featureId);\n",paraId:175,tocIndex:60},{value:"让用户可以主动设置图层的 autoFit 参数",paraId:176,tocIndex:61},{value:"\n🌟 设置完该方法后会在图层发生更新的时候生效，如在 setData 之后触发",paraId:176,tocIndex:61},{value:"// 使用方法\nlayer.setAutoFit(true);\n// 内部实现\npublic setAutoFit(autoFit: boolean): ILayer {\n    this.updateLayerConfig({\n      autoFit,\n    });\n    return this;\n  }\n",paraId:177,tocIndex:61},{value:"支持单独获取某个图形经过 scale 计算后的值， 满足用户获取图层某些 feature 值的需求。",paraId:178,tocIndex:62},{value:"attr scale 的属性值",paraId:179,tocIndex:62},{value:"const data = [\n  { lng: 120, lat: 30, name: 'n1' },\n  { lng: 120, lat: 30, name: 'n2' },\n];\nconst layer = new PointLayer()\n  .source(data, {\n    parser: {\n      x: 'lng',\n      y: 'lat',\n      type: 'json',\n    },\n  })\n  .shape('circle')\n  .color('name', ['#f00', '#ff0'])\n  .size('name', [20, 40]);\n\nscene.addLayer(layer);\n\n// 此时在 scene 上绘制两个点\n// 一个颜色为黄色，大小为 40 的点，对应 name 为 n1\n// 一个颜色为红色，大小为 20 的点，对应 name 为 n2\n\nconst colorScale = layer.getScale('color'); // 获取 color 方法产生的 scale\nconst color1 = colorScale('n1'); // '#ff0'\nconst color1 = colorScale('n2'); // '#f00'\n\nconst sizeScale = layer.getScale('size'); // 获取 size 方法产生的 scale\nconst size1 = sizeScale('n1'); // 40\nconst size2 = sizeScale('n2'); // 20\n",paraId:180,tocIndex:62},{value:"不推荐使用，将废弃，",paraId:181,tocIndex:63},{value:"获取图例配置",paraId:182,tocIndex:63},{value:"type 图例类型",paraId:183,tocIndex:63},{value:"index 可选 默认",paraId:183,tocIndex:63},{value:"layer.getLegendItems('color');\n\nlayer.getLegendItems('size');\n",paraId:184,tocIndex:63},{value:"getLegendItems方法的替代方法",paraId:185,tocIndex:64},{value:"该方法需要",paraId:186,tocIndex:64},{value:"返回值",paraId:187,tocIndex:64},{value:"type 图例类型",paraId:188,tocIndex:64},{value:"field 映射字段",paraId:188,tocIndex:64},{value:"items 图例项",paraId:188,tocIndex:64},{value:"layer.getLegend('color');\n\nlayer.getLegend('size');\n",paraId:189,tocIndex:64},{value:"注：rasterayer 只支持 color 类型",paraId:190,tocIndex:64},{value:"添加 Mask 图层\n",paraId:191,tocIndex:66},{value:"const polygonLayer = new Polygon();\nlayer.addMask(polygonLayer);\nscene.render();\n",paraId:192,tocIndex:66},{value:"const polygonLayer = new Polygon();\nlayer.removeMask(polygonLayer);\nscene.render();\n",paraId:193,tocIndex:67},{value:"layer.disableMask();\nscene.render();\n",paraId:194,tocIndex:68},{value:"layer.disableMask();\nscene.render();\n",paraId:195,tocIndex:69},{value:"鼠标事件回调参数 target",paraId:196,tocIndex:70},{value:"layer.on(eventName, (target) => console.log(target));\n",paraId:197,tocIndex:70},{value:"x: number 鼠标 \b 在地图位置 x 坐标",paraId:198,tocIndex:70},{value:"y: number 鼠标 \b 在地图位置 y 坐标",paraId:198,tocIndex:70},{value:"type: string 鼠标事件类型",paraId:198,tocIndex:70},{value:"lngLat: 经度度对象 {lng:number, lat: number }; 鼠标所在位置经纬度",paraId:198,tocIndex:70},{value:"feature: any; 数据选中的地理要素信息",paraId:198,tocIndex:70},{value:"featureId: number | null; 数据选中的地理要素的 ID",paraId:198,tocIndex:70},{value:"点击事件",paraId:199,tocIndex:71},{value:"layer.on('click', (e) => console.log(e));\n",paraId:200,tocIndex:71},{value:"双击",paraId:201,tocIndex:72},{value:"layer.on('dblclick', (e) => console.log(e));\n",paraId:202,tocIndex:72},{value:"鼠标移动事件",paraId:203,tocIndex:73},{value:"layer.on('mousemove', (e) => console.log(e));\n",paraId:204,tocIndex:73},{value:"鼠标移除",paraId:205,tocIndex:74},{value:"layer.on('mouseout', (e) => console.log(e));\n",paraId:206,tocIndex:74},{value:"鼠标抬起",paraId:207,tocIndex:75},{value:"layer.on('mouseup', (e) => console.log(e));\n",paraId:208,tocIndex:75},{value:"鼠标按下",paraId:209,tocIndex:76},{value:"layer.on('mousedown', (e) => console.log(e));\n",paraId:210,tocIndex:76},{value:"鼠标右键",paraId:211,tocIndex:77},{value:"layer.on('contextmenu', (e) => console.log(e));\n",paraId:212,tocIndex:77},{value:"双击拾取元素",paraId:213,tocIndex:78},{value:"layer.on('dblclick', (e) => console.log(e));\n",paraId:214,tocIndex:78},{value:"点击未拾取到元素",paraId:215,tocIndex:79},{value:"layer.on('unclick', (e) => console.log(e));\n",paraId:216,tocIndex:79},{value:"鼠标移动未拾取到元素",paraId:217,tocIndex:80},{value:"layer.on('unmousemove', (e) => console.log(e));\n",paraId:218,tocIndex:80},{value:"鼠标抬起未拾取到元素",paraId:219,tocIndex:81},{value:"layer.on('unmouseup', (e) => console.log(e));\n",paraId:220,tocIndex:81},{value:"鼠标按下未拾取到元素",paraId:221,tocIndex:82},{value:"layer.on('unmousedown', (e) => console.log(e));\n",paraId:222,tocIndex:82},{value:"鼠标右键位拾取到元素",paraId:223,tocIndex:83},{value:"layer.on('uncontextmenu', (e) => console.log(e));\n",paraId:224,tocIndex:83},{value:"所有鼠标事件未拾取到",paraId:225,tocIndex:84},{value:"layer.on('unpick', (e) => console.log(e));\n",paraId:226,tocIndex:84},{value:"移动端事件 touchstart",paraId:227,tocIndex:85},{value:"layer.on('touchstart', (e) => console.log(e));\n",paraId:228,tocIndex:85},{value:"移动端事件 touchend",paraId:229,tocIndex:86},{value:"layer.on('touchend', (e) => console.log(e));\n",paraId:230,tocIndex:86},{value:"使用示例",paraId:231,tocIndex:86},{value:"layer.on('click', (ev) => {}); // 鼠标左键点击图层事件\nlayer.on('mouseenter', (ev) => {}); // 鼠标进入图层要素\nlayer.on('mousemove', (ev) => {}); // 鼠标在图层上移动时触发\nlayer.on('mouseout', (ev) => {}); // 鼠标移出图层要素时触发\nlayer.on('mouseup', (ev) => {}); // 鼠标在图层上单击抬起时触发\nlayer.on('mousedown', (ev) => {}); // 鼠标在图层上单击按下时触发\nlayer.on('contextmenu', (ev) => {}); // 图层要素点击右键菜单\n\n// 鼠标在图层外的事件\nlayer.on('unclick', (ev) => {}); // 图层外点击\nlayer.on('unmousemove', (ev) => {}); // 图层外移动\nlayer.on('unmouseup', (ev) => {}); // 图层外鼠标抬起\nlayer.on('unmousedown', (ev) => {}); // 图层外单击按下时触发\nlayer.on('uncontextmenu', (ev) => {}); // 图层外点击右键\nlayer.on('unpick', (ev) => {}); // 图层外的操作的所有事件\n",paraId:232,tocIndex:86},{value:"参数 option",paraId:233,tocIndex:88},{value:"target 当前 layer",paraId:234,tocIndex:88},{value:"type 事件类型",paraId:234,tocIndex:88},{value:"图层初始化完成后触发",paraId:235,tocIndex:88},{value:"layer.on('inited', (option) => {});\n",paraId:236,tocIndex:88},{value:"图层添加到 scene",paraId:237,tocIndex:89},{value:"参数 option",paraId:238,tocIndex:89},{value:"target 当前 layer",paraId:239,tocIndex:89},{value:"type 事件类型",paraId:239,tocIndex:89},{value:"layer.on('add', (type) => console.log(type));\n",paraId:240,tocIndex:89},{value:"图层移除时触发",paraId:241,tocIndex:90},{value:"参数 option",paraId:242,tocIndex:90},{value:"target 当前 layer",paraId:243,tocIndex:90},{value:"type 事件类型",paraId:243,tocIndex:90},{value:"layer.on('remove', (type) => console.log(type));\n",paraId:244,tocIndex:90},{value:"数据映射更新，图例发生变化,主要 color、size",paraId:245,tocIndex:91},{value:"legend:color",paraId:246},{value:"数据映射更新，图例 color 颜色改变",paraId:247,tocIndex:92},{value:"参数 option：",paraId:248,tocIndex:92},{value:"type 图例类型",paraId:249,tocIndex:92},{value:"field 映射字段",paraId:249,tocIndex:92},{value:"items 图例项",paraId:249,tocIndex:92},{value:"layer.on('legend:color', (ev) => console.log(ev));\n",paraId:250,tocIndex:92},{value:"legend:size",paraId:246},{value:"数据映射更新，图例 size 大小改变",paraId:251,tocIndex:93},{value:"参数 option：",paraId:252,tocIndex:93},{value:"type 图例类型",paraId:253,tocIndex:93},{value:"field 映射字段",paraId:253,tocIndex:93},{value:"items 图例项",paraId:253,tocIndex:93},{value:"layer.on('legend:size', (ev) => console.log(ev));\n",paraId:254,tocIndex:93},{value:"参数 option",paraId:255,tocIndex:95},{value:"box [x1: number, y1: number, x2: number, y2: number] 相较于",paraId:256,tocIndex:95},{value:"cb (...args: any[]) => void 传入的回调方法，返回框选内部的 feature",paraId:256,tocIndex:95},{value:"layer.boxSelect(box, cb);\n// (x1, y1), (x2, y2) 框选的方框左上角和右下角相对于地图左上角的像素坐标\n// cb 是传入的回调函数，回调函数返回的参数是选中的 feature 对象数组，对象的字段和用户传入的数据相关\n",paraId:257,tocIndex:95}]},6502:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(58382);const d=[{value:"color",paraId:0},{value:" 方法用于设置图形的颜色。",paraId:0},{value:"color",paraId:1,tocIndex:0},{value:" 类型的字符串。",paraId:1,tocIndex:0},{value:"color 类型可以为 rgb 的写法 ",paraId:2,tocIndex:0},{value:"rgb(200, 100, 100)",paraId:2,tocIndex:0},{value:"、",paraId:2,tocIndex:0},{value:"rgba(255, 0, 0, 1)",paraId:2,tocIndex:0},{value:"color 类型可以为十六进制的写法 ",paraId:2,tocIndex:0},{value:"#ffffff",paraId:2,tocIndex:0},{value:"、",paraId:2,tocIndex:0},{value:"#000",paraId:2,tocIndex:0},{value:"color 类型可以是颜色名称的写法 ",paraId:2,tocIndex:0},{value:"red",paraId:2,tocIndex:0},{value:"、",paraId:2,tocIndex:0},{value:"yellow",paraId:2,tocIndex:0},{value:"图层可以直接设置颜色值。",paraId:3,tocIndex:1},{value:"layer.color('#f00');\n",paraId:4,tocIndex:1},{value:"图层的颜色可以根据图层接受的数据值进行映射，接受传入数据的字段作为参数。",paraId:5,tocIndex:2},{value:"layer.source([\n  {\n    lng: 120,\n    lat: 30,\n    c: '#f00',\n  },\n]);\nlayer.color('c');\n",paraId:6,tocIndex:2},{value:"color",paraId:7,tocIndex:3},{value:" 方法支持简单的值映射，将根据 ",paraId:7,tocIndex:3},{value:"field",paraId:7,tocIndex:3},{value:" 从传入图层的数据中提取的值映射到 ",paraId:7,tocIndex:3},{value:"domain",paraId:7,tocIndex:3},{value:" 值域中。",paraId:7,tocIndex:3},{value:"layer.color('type', ['#f00', '#0f0', '#00f']);\n",paraId:8,tocIndex:3},{value:"color",paraId:9,tocIndex:4},{value:" 方法支持回调函数的写法，将根据 ",paraId:9,tocIndex:4},{value:"field",paraId:9,tocIndex:4},{value:" 作为 ",paraId:9,tocIndex:4},{value:"callback",paraId:9,tocIndex:4},{value:" 方法的参数，",paraId:9,tocIndex:4},{value:"callback",paraId:9,tocIndex:4},{value:" 方法的返回值作为图层实际的颜色。",paraId:9,tocIndex:4},{value:"layer.color('type', (value) => {\n  switch (value) {\n    case 'water':\n      return '#f00';\n    case 'wood':\n      return '#0f0';\n  }\n});\n",paraId:10,tocIndex:4}]},63067:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(98199);const d=[{value:"图层显示",paraId:0,tocIndex:1},{value:"layer.show();\n",paraId:1,tocIndex:1},{value:"图层隐藏",paraId:2,tocIndex:2},{value:"layer.hide();\n",paraId:3,tocIndex:2},{value:"图层是否可见",paraId:4,tocIndex:3},{value:"layer.isVisible();\n",paraId:5,tocIndex:3},{value:"设置图层绘制顺序",paraId:6,tocIndex:4},{value:"layer.setIndex(1);\n",paraId:7,tocIndex:4},{value:"缩放到图层范围",paraId:8,tocIndex:5},{value:"layer.fitBounds();\n",paraId:9,tocIndex:5},{value:"设置图层最小缩放等级",paraId:10,tocIndex:6},{value:"layer.setMinZoom(zoom);\n",paraId:11,tocIndex:6},{value:"设置图层最大缩放等级",paraId:12,tocIndex:7},{value:"layer.setMinZoom(zoom);\n",paraId:13,tocIndex:7},{value:"设置图层最大缩放等级",paraId:14,tocIndex:7},{value:"参数",paraId:15,tocIndex:7},{value:"zoom {number}",paraId:16,tocIndex:7},{value:"layer.setMinZoom(zoom);\n",paraId:17,tocIndex:7}]},79589:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(73636);const d=[{value:"设置图层数据以及解析配置 ",paraId:0,tocIndex:0},{value:"source(data, config)",paraId:0,tocIndex:0},{value:"。",paraId:0,tocIndex:0},{value:"data { geojson | json | csv }",paraId:1,tocIndex:0},{value:"config   可选   数据源配置项\n",paraId:1,tocIndex:0},{value:"parser 数据解析，默认是解析层 geojson",paraId:2,tocIndex:0},{value:"transforms [transform，transform ]  数据处理转换可设置多个",paraId:2,tocIndex:0},{value:"parser",paraId:3,tocIndex:0},{value:" 和  ",paraId:3,tocIndex:0},{value:"transforms",paraId:3,tocIndex:0},{value:" ",paraId:3,tocIndex:0},{value:"见 source 文档",paraId:4,tocIndex:0},{value:"。",paraId:3,tocIndex:0},{value:"layer.source(data, {\n  parser: {\n    type: 'csv',\n    x: 'lng',\n    y: 'lat',\n  },\n  transforms: [\n    {\n      type: 'map',\n      callback: function (item) {\n        const [x, y] = item.coordinates;\n        item.lat = item.lat * 1;\n        item.lng = item.lng * 1;\n        item.v = item.v * 1;\n        item.coordinates = [x * 1, y * 1];\n        return item;\n      },\n    },\n    {\n      type: 'hexagon',\n      size: 6000,\n      field: 'v',\n      method: 'sum',\n    },\n  ],\n});\n",paraId:5,tocIndex:0},{value:"我们在使用 ",paraId:6,tocIndex:1},{value:"cluster",paraId:6,tocIndex:1},{value:" 配置聚合图之后就可以使用一些聚合方法来获取对应参数。",paraId:6,tocIndex:1},{value:"获取指定缩放等级的聚合数据",paraId:7,tocIndex:2},{value:"zoom",paraId:8,tocIndex:2},{value:" 缩放等级",paraId:8,tocIndex:2},{value:"根据 ",paraId:9,tocIndex:3},{value:"id",paraId:9,tocIndex:3},{value:" 获取聚合节点的数据，每个聚合节点会有一个唯一 ",paraId:9,tocIndex:3},{value:"ID",paraId:9,tocIndex:3},{value:"。",paraId:9,tocIndex:3},{value:"id",paraId:10,tocIndex:3},{value:" 聚合节点的 ",paraId:10,tocIndex:3},{value:"id",paraId:10,tocIndex:3},{value:"const source = layer.getSource();\nsource.getClustersLeaves(id);\nlayer.on('click', (e) => {\n  console.log(source.getClustersLeaves(e.feature.cluster_id));\n});\n",paraId:11,tocIndex:3},{value:"Scale 度量是将地图数据值（数字、日期、类别等数据）转成视觉值（颜色、大小、形状）。尺度 Scale 是数据可视化的基本组成部分，因为它们决定了视觉编码的性质。 L7 目前支持连续、离散、枚举类型数据的Scale，并支持位置、形状、大小和颜色编码的映射。",paraId:12,tocIndex:4},{value:"在使用 L7 过程中，默认情况下不需要进行 Scale 的配置，因为 L7 会根据数据类型对 scale 推断，推断过程如下：",paraId:13,tocIndex:4},{value:"查看用户是否设置了 Scale，如果没有:",paraId:14,tocIndex:4},{value:"判断字段的第一条数据的字段类型，如果数据中不存在对应的字段：",paraId:15,tocIndex:4},{value:"认为是常量为固定值",paraId:16,tocIndex:4},{value:"如果是数字则为 'linear';",paraId:17,tocIndex:4},{value:"如果是字符串类型 'cat';",paraId:18,tocIndex:4},{value:"Scale 详细介绍",paraId:19,tocIndex:5},{value:"参数： (field: string, scaleOptions: IscaleOptions)",paraId:20,tocIndex:5},{value:"field",paraId:21,tocIndex:5},{value:" 指定 source 中传入的数据中用于映射的字段名",paraId:21,tocIndex:5},{value:"scaleOptions",paraId:21,tocIndex:5},{value:" 列定义配置，对象类型\n",paraId:21,tocIndex:5},{value:"type scale 类型",paraId:22,tocIndex:5},{value:"unknown 未匹配颜色 可选 默认透明",paraId:22,tocIndex:5},{value:"domain 值域 可选",paraId:22,tocIndex:5},{value:"interface IscaleOptions {\n  type: ScaleTypeName;\n  domain?: any[];\n  ...\n}\n\nlayer.color('id', ['#f00', '#ff0'])\n.size('mag', [1, 80])\n.scale('mag', {\n  type: 'linear',\n  domain: [ 1, 50]\n})；\n",paraId:23,tocIndex:5},{value:"Range 和 domain 是 Scale 中非常重要的两个参数",paraId:24,tocIndex:6},{value:"domain: 地图数据值的定义区间\nrange：视觉值的区间\n不同Scale 的差异在于 domain->range 的转换方法的不同",paraId:25,tocIndex:6},{value:"domain: 地图数据值的定义区间",paraId:26,tocIndex:6},{value:"range：视觉值的区间定义",paraId:26,tocIndex:6},{value:"数据类",paraId:27,tocIndex:6},{value:"度量类型",paraId:27,tocIndex:6},{value:"连续",paraId:27,tocIndex:6},{value:"linear、log、pow",paraId:27,tocIndex:6},{value:"连续分类",paraId:27,tocIndex:6},{value:"quantize quantile,threshold,diverging",paraId:27,tocIndex:6},{value:"分类 枚举",paraId:27,tocIndex:6},{value:"cat",paraId:27,tocIndex:6},{value:"Cat 指枚举类型，用于展示分类数据，比如农作物种植区分布图，水稻、玉米、大豆等不同类别需要映射为不同的颜色。",paraId:28,tocIndex:7},{value:"// 三种作物会分别转成对应的颜色\n// domain = ['corn','rice', 'soybean'];\n// range = ['red','white','blue'];\nconst data = [\n  { lng: 120, lat: 30, t: 'corn' },\n  { lng: 121, lat: 30, t: 'rice' },\n  { lng: 122, lat: 30, t: 'soybean' },\n];\nlayer.source(data, {\n  parser: {\n    type: 'type',\n    x: 'lng',\n    y: 'lat',\n  },\n});\nlayer.scale('t', { type: 'cat' });\nlayer.color('t', ['red', 'white', 'blue']);\n",paraId:29,tocIndex:7},{value:"数据值和映射值相同\n比如数据中value 字段记录了每个要素的颜色，数值既为要映射的结果值s",paraId:30,tocIndex:8},{value:"// 设置为 identify\nlayer.scale('value', { type: 'identify' });\n\n// 或者\n\nlayer.scale('value'); // L7  能够自动推断为  identify\n\n",paraId:31,tocIndex:8},{value:"线性是连续数据的映射方法，数据和视觉值是通过线性方法换算的。如数据值 1-100 线性映射到红到蓝的线下渐变色每个数字对应一个颜色",paraId:32,tocIndex:9},{value:"相等间隔会将属性值的范围划分为若干个大小相等的子范围。相等间隔最适用于常见的数据范围，如百分比和温度。这种方法强调的是某个属性值相对于其他值的量",paraId:33,tocIndex:10},{value:"每个类都含有相等数量的要素。分位数分类非常适用于呈线性分布的数据。分位数为每个类分配数量相等的数据值。不存在空类，也不存在值过多或过少的类。\n由于使用“分位数”分类将要素以同等数量分组到每个类中，因此得到的地图往往具有误导性。可能会将相似的要素置于相邻的类中，或将值差异较大的要素置于相同类中。可通过增加类的数量将这种失真降至最低。",paraId:34,tocIndex:11},{value:"他允许将域的任意子集（非统一段）映射到范围内的离散值。输入域仍然是连续的，并根据提供给域属性的一组阈值划分为多个切片。 range 属性必须有 N+1 个元素，其中 N 是域中提供的阈值边界数",paraId:35,tocIndex:12},{value:"手动设置间隔 Manual interval 手动设置分级分类区间，某些数据会有相应的业界标准，或者需要进行某种特殊的显示。如空气质量数据有严格数据分段标准",paraId:36,tocIndex:12},{value:'-1   => "red"\n0    => "white"\n0.5  => "white"\n1.0  => "blue"\n1000 => "blue\n\n',paraId:37,tocIndex:12},{value:"离散分类通常与两种相反的色调一起使用，以显示从负值到中心到正值的变化。这些类型的地图显示了彼此相关的值的大小。",paraId:38,tocIndex:13},{value:"根据视觉通道名称获取 scale 实例,调用之前确保 layer 已经初始化完成",paraId:39,tocIndex:14},{value:"const scale = layer.getScale('color');\nconst color = scale(1); // 将数值转换成颜色\n",paraId:40,tocIndex:14},{value:"更多是方法\n",paraId:41,tocIndex:14},{value:"scale 示例使用",paraId:41,tocIndex:14},{value:"可视化编码是将数据转换为可视形式的过程，L7 目前支持形状，大小，颜色 3 种视觉通道，你可以指定数据字段，为不同要素设置不同的图形属性。",paraId:42,tocIndex:15},{value:"数据过滤方法,支持回调函数，将数据映射为true | false, 结果为true 时可见",paraId:43,tocIndex:16},{value:"pointLayer.filter('type', (type) => {\n  // 回调函数\n  if (type === 'a') {\n    return false;\n  }\n  return true;\n});\n",paraId:44,tocIndex:16},{value:"将数据值映射到图形的大小上的方法，size 方法具体的参数使用可以查看对应图层的详细文档",paraId:45,tocIndex:17},{value:"pointLayer.size(10); // 常量\npointLayer.size('type'); // 使用字段映射到大小\npointLayer.size('type', [0, 10]); // 使用字段映射到大小，并指定最大值和最小值\npointLayer.size('type', (type) => {\n  // 回调函数\n  if (type === 'a') {\n    return 10;\n  }\n  return 5;\n});\n",paraId:46,tocIndex:17},{value:"传入数字常量，如  ",paraId:47,tocIndex:18},{value:"pointLayer.size(20)",paraId:47,tocIndex:18},{value:"根据 field 字段的值映射大小，使用默认的",paraId:48,tocIndex:19},{value:"最大值 max:10",paraId:48,tocIndex:19},{value:"  和",paraId:48,tocIndex:19},{value:"最小值 min: 1",paraId:48,tocIndex:19},{value:"。",paraId:48,tocIndex:19},{value:"使用回调函数控制图形大小。",paraId:49,tocIndex:20},{value:"callback",paraId:50,tocIndex:20},{value:": function 回调函数。",paraId:50,tocIndex:20},{value:"pointLayer.size('age', (value) => {\n  if (value === 1) {\n    return 5;\n  }\n  return 10;\n});\n",paraId:51,tocIndex:20},{value:"将数据值映射到图形的颜色上的方法。",paraId:52,tocIndex:21},{value:"layer.color('red'); // 常量颜色\nlayer.color('type'); // 对 type 字段进行映射，使用内置的颜色\nlayer.color('type', ['red', 'blue']); // 指定颜色\nlayer.color('type', (type) => {\n  // 通过回调函数\n  if (type === 'a') {\n    return 'red';\n  }\n  return 'blue';\n});\nlayer.color('type*value', (type, value) => {\n  //多个参数，通过回调函数\n  if (type === 'a' && value > 100) {\n    return 'red';\n  }\n  return 'blue';\n});\n",paraId:53,tocIndex:21},{value:"参数：",paraId:54,tocIndex:22},{value:"value",paraId:54,tocIndex:22},{value:" ：string",paraId:54,tocIndex:22},{value:"只支持接收一个参数，value 可以是：",paraId:55,tocIndex:22},{value:"映射至颜色属性的数据源字段名，如果数据源中不存在这个字段名的话，则按照常量进行解析，这个时候会使用 L7 默认提供的颜色。",paraId:56,tocIndex:22},{value:"也可以直接指定某一个具体的颜色值 color，如 '#fff', 'white','rgba(255,0,0,0.5)' ,rgb(255,0,1) 等。",paraId:57,tocIndex:22},{value:"如果数据为映射到颜色，默认为透明色不显示，如果需要设置该颜色，需要在scale 中设置",paraId:58,tocIndex:22},{value:"示例",paraId:59,tocIndex:22},{value:"layer.color('name'); // 映射数据字段\nlayer.color('white'); // 指定颜色\n",paraId:60,tocIndex:22},{value:"参数：",paraId:61,tocIndex:23},{value:"field",paraId:62,tocIndex:23},{value:": stringfield 为映射至颜色属性的数据源字段名，也支持指定多个参数。",paraId:62,tocIndex:23},{value:"colors",paraId:63,tocIndex:23},{value:": string | array | function",paraId:63,tocIndex:23},{value:"colors 的参数有以下情况：  如果为空，即未指定颜色的数组，那么使用内置的全局的颜色；如果需要指定颜色，则需要以数组格式传入，那么分类的颜色按照数组中的颜色确定。",paraId:64,tocIndex:23},{value:"layer.scale('name',{\n  type:'quantile'\n  unknown:'#ccc' // 设置无效颜色\n})\nlayer.color('name'); // 使用identity\nlayer.color('name', ['red', 'blue']); // 使用传入的指定颜色\n",paraId:65,tocIndex:23},{value:"colors 如果是回调函数，则该回调函数的参数为对应字段的数值，具体使用如下，当 color 映射为多个字段时，参数按照字段声明的顺序传入：",paraId:66,tocIndex:23},{value:"layer.color('gender', (value) => {\n  if (value === 1) {\n    return 'red';\n  }\n  return 'blue';\n});\nlayer.color('gender*age', (gender, age) => {\n  if (age === 20 && gender == ' 男') {\n    return 'red';\n  }\n  return 'blue';\n});\n",paraId:67,tocIndex:23},{value:"通常一种图层可以有多种表现形式，shape 方法用于指定图层具体的表现形式，以 PointLayer 的 shape 为例：",paraId:68,tocIndex:24},{value:"shape('circle'); // 圆形\nshape('triangle'); // 三角形\nshape('cylinder'); // 圆柱\n",paraId:69,tocIndex:24},{value:"shape(shape)",paraId:70,tocIndex:24},{value:"参数 ",paraId:71,tocIndex:24},{value:"shape",paraId:71,tocIndex:24},{value:" string",paraId:71,tocIndex:24},{value:"只支持接收一个参数，指定几何图像对象绘制的形状。下表列出了不同的 图层 几何图形对象支持的 shape 形状",paraId:72,tocIndex:24},{value:"layer 类型",paraId:73,tocIndex:24},{value:"shape 类型",paraId:73,tocIndex:24},{value:"备注",paraId:73,tocIndex:24},{value:"point",paraId:73,tocIndex:24},{value:"2d:point,circle, square, triangle,hexagon,image,text 3d:circle,triangle,hexagon,square",paraId:73,tocIndex:24},{value:"line",paraId:73,tocIndex:24},{value:"line,arc, arc3d, greatcircle",paraId:73,tocIndex:24},{value:"polygon",paraId:73,tocIndex:24},{value:"fill,line, extrude",paraId:73,tocIndex:24},{value:"shape(field, shapes)",paraId:74,tocIndex:24},{value:"shape 根据字段指定行形状，比如根据字段指定 PointLayer/imageLayer 的 icon 类型",paraId:75,tocIndex:24},{value:"scene.addImage(\n  '00',\n  'https://gw.alipayobjects.com/zos/basement_prod/604b5e7f-309e-40db-b95b-4fac746c5153.svg',\n);\nscene.addImage(\n  '01',\n  'https://gw.alipayobjects.com/zos/basement_prod/30580bc9-506f-4438-8c1a-744e082054ec.svg',\n);\nscene.addImage(\n  '02',\n  'https://gw.alipayobjects.com/zos/basement_prod/7aa1f460-9f9f-499f-afdf-13424aa26bbf.svg',\n);\nconst imageLayer = new PointLayer()\n  .source(data, {\n    parser: {\n      type: 'json',\n      x: 'longitude',\n      y: 'latitude',\n    },\n  })\n  .shape('name', ['00', '01', '02'])\n  .size(20);\nscene.addLayer(imageLayer);\n",paraId:76,tocIndex:24},{value:"在线案例",paraId:77},{value:"shape(field, callback)",paraId:78},{value:"shape 也支持回调函数的写法",paraId:79},{value:".shape('key', value => {\n  if(value > 10) {\n    return 'circle';\n  } else {\n    return 'triangle';\n  }\n}\n",paraId:80}]},74931:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(59818);const d=[{value:"参数 option",paraId:0,tocIndex:1},{value:"target 当前 layer",paraId:1,tocIndex:1},{value:"type 事件类型",paraId:1,tocIndex:1},{value:"图层初始化完成后触发",paraId:2,tocIndex:1},{value:"layer.on('inited', (option) => {});\n",paraId:3,tocIndex:1},{value:"图层添加到 scene",paraId:4,tocIndex:2},{value:"参数 option",paraId:5,tocIndex:2},{value:"target 当前 layer",paraId:6,tocIndex:2},{value:"type 事件类型",paraId:6,tocIndex:2},{value:"layer.on('add', (type) => console.log(type));\n",paraId:7,tocIndex:2},{value:"图层移除时触发",paraId:8,tocIndex:3},{value:"参数 option",paraId:9,tocIndex:3},{value:"target 当前 layer",paraId:10,tocIndex:3},{value:"type 事件类型",paraId:10,tocIndex:3},{value:"layer.on('remove', (type) => console.log(type));\n",paraId:11,tocIndex:3},{value:"数据映射更新，图例发生变化,主要 color、size",paraId:12,tocIndex:4},{value:"legend:color",paraId:13},{value:"数据映射更新，图例 color 颜色改变",paraId:14,tocIndex:5},{value:"参数 option：",paraId:15,tocIndex:5},{value:"type 图例类型",paraId:16,tocIndex:5},{value:"field 映射字段",paraId:16,tocIndex:5},{value:"items 图例项",paraId:16,tocIndex:5},{value:"layer.on('legend:color', (ev) => console.log(ev));\n",paraId:17,tocIndex:5},{value:"legend:size",paraId:13},{value:"数据映射更新，图例 size 大小改变",paraId:18,tocIndex:6},{value:"参数 option：",paraId:19,tocIndex:6},{value:"type 图例类型",paraId:20,tocIndex:6},{value:"field 映射字段",paraId:20,tocIndex:6},{value:"items 图例项",paraId:20,tocIndex:6},{value:"layer.on('legend:size', (ev) => console.log(ev));\n",paraId:21,tocIndex:6},{value:"参数 option",paraId:22,tocIndex:8},{value:"box [x1: number, y1: number, x2: number, y2: number] 相较于",paraId:23,tocIndex:8},{value:"cb (...args: any[]) => void 传入的回调方法，返回框选内部的 feature",paraId:23,tocIndex:8},{value:"layer.boxSelect(box, cb);\n// (x1, y1), (x2, y2) 框选的方框左上角和右下角相对于地图左上角的像素坐标\n// cb 是传入的回调函数，回调函数返回的参数是选中的 feature 对象数组，对象的字段和用户传入的数据相关\n",paraId:24,tocIndex:8}]},85309:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(70588);const d=[{value:"开启或者关闭 mousehover 元素高亮效果",paraId:0,tocIndex:1},{value:"activeOption",paraId:0,tocIndex:1},{value:"color",paraId:1,tocIndex:1},{value:": 高亮颜色",paraId:1,tocIndex:1},{value:"mix",paraId:1,tocIndex:1},{value:": 可选参数，默认为 0，表示高亮颜色是指定纯色，最大有效值是1，表示高亮色全部是底色",paraId:1,tocIndex:1},{value:"activeOption: {\n  color: '#f00';\n  mix: 0.6;\n}\n",paraId:2,tocIndex:1},{value:"// 开启 Active  使用默认高亮颜色\nlayer.active(true);\n\n//  开启 Active  自定义高亮颜色\n\nlayer.active({\n  color: 'red',\n  mix: 0.6,\n});\n\n// 关闭高亮效果\nlayer.active(false);\n",paraId:3,tocIndex:1},{value:"根据元素 ID 设置指定元素 hover 高亮",paraId:4,tocIndex:2},{value:"🌟 指定元素高亮不等于图层高亮，一个图层包含多个元素，一般传入 source 的数据数组中有多少单条数据，一个图层就有多少元素",paraId:5,tocIndex:2},{value:"layer.setActive(featureId);\n",paraId:6,tocIndex:2},{value:"开启或者关闭 mouseclick 元素选中高亮效果",paraId:7,tocIndex:3},{value:"selectOption\n",paraId:7,tocIndex:3},{value:"color",paraId:8,tocIndex:3},{value:": 选中高亮颜色",paraId:8,tocIndex:3},{value:"mix",paraId:8,tocIndex:3},{value:": 可选参数，默认为 0，表示选中高亮颜色是指定纯色，最大有效值是1，表示选中高亮色全部是底色",paraId:8,tocIndex:3},{value:"selectOption: {\n  color: '#f00';\n  mix: 0.6;\n}\n",paraId:9,tocIndex:3},{value:"// 开启 Active  使用默认高亮颜色\nlayer.select(true);\n\n//  开启 Active  自定义高亮颜色\n\nlayer.select({\n  color: 'red',\n  mix: 0.6,\n});\n\n// 关闭高亮效果\nlayer.select(false);\n",paraId:10,tocIndex:3},{value:"根据元素 ID 设置指定元素 click 选中 高亮",paraId:11,tocIndex:4},{value:"🌟 指定元素高亮不等于图层高亮，一个图层包含多个元素，一般传入 source 的数据数组中有多少单条数据，一个图层就有多少元素",paraId:12,tocIndex:4},{value:"layer.setSelect(featureId);\n",paraId:13,tocIndex:4},{value:"让用户可以主动设置图层的 autoFit 参数",paraId:14,tocIndex:5},{value:"\n🌟 设置完该方法后会在图层发生更新的时候生效，如在 setData 之后触发",paraId:14,tocIndex:5},{value:"// 使用方法\nlayer.setAutoFit(true);\n// 内部实现\npublic setAutoFit(autoFit: boolean): ILayer {\n    this.updateLayerConfig({\n      autoFit,\n    });\n    return this;\n  }\n",paraId:15,tocIndex:5},{value:"支持单独获取某个图形经过 scale 计算后的值， 满足用户获取图层某些 feature 值的需求。",paraId:16,tocIndex:6},{value:"attr scale 的属性值",paraId:17,tocIndex:6},{value:"const data = [\n  { lng: 120, lat: 30, name: 'n1' },\n  { lng: 120, lat: 30, name: 'n2' },\n];\nconst layer = new PointLayer()\n  .source(data, {\n    parser: {\n      x: 'lng',\n      y: 'lat',\n      type: 'json',\n    },\n  })\n  .shape('circle')\n  .color('name', ['#f00', '#ff0'])\n  .size('name', [20, 40]);\n\nscene.addLayer(layer);\n\n// 此时在 scene 上绘制两个点\n// 一个颜色为黄色，大小为 40 的点，对应 name 为 n1\n// 一个颜色为红色，大小为 20 的点，对应 name 为 n2\n\nconst colorScale = layer.getScale('color'); // 获取 color 方法产生的 scale\nconst color1 = colorScale('n1'); // '#ff0'\nconst color1 = colorScale('n2'); // '#f00'\n\nconst sizeScale = layer.getScale('size'); // 获取 size 方法产生的 scale\nconst size1 = sizeScale('n1'); // 40\nconst size2 = sizeScale('n2'); // 20\n",paraId:18,tocIndex:6},{value:"不推荐使用，将废弃，",paraId:19,tocIndex:7},{value:"获取图例配置",paraId:20,tocIndex:7},{value:"type 图例类型",paraId:21,tocIndex:7},{value:"index 可选 默认",paraId:21,tocIndex:7},{value:"layer.getLegendItems('color');\n\nlayer.getLegendItems('size');\n",paraId:22,tocIndex:7},{value:"getLegendItems方法的替代方法",paraId:23,tocIndex:8},{value:"该方法需要",paraId:24,tocIndex:8},{value:"返回值",paraId:25,tocIndex:8},{value:"type 图例类型",paraId:26,tocIndex:8},{value:"field 映射字段",paraId:26,tocIndex:8},{value:"items 图例项",paraId:26,tocIndex:8},{value:"layer.getLegend('color');\n\nlayer.getLegend('size');\n",paraId:27,tocIndex:8},{value:"注：rasterayer 只支持 color 类型",paraId:28,tocIndex:8}]},31862:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(28327);const d=[{value:"style 方法通常用于描述图层具体的样式，大多数图层会支持一些比较通用的属性， 如 opacity 属性，同时每个图层也会有仅限本图层支持的属性，如只有\nCityBuildingLayer 支持的 windowColor 属性，每个图层具体要如何配置属性请查看每个图层的详细文档。",paraId:0,tocIndex:0},{value:"opacity 设置透明度 大部分图层都支持",paraId:1,tocIndex:0},{value:"stroke 线填充颜色 仅点图层支持",paraId:2,tocIndex:0},{value:"strokeWidth 线的宽度 仅点图层支持",paraId:3,tocIndex:0},{value:"layer.style({\n  opacity: 0.8,\n  stroke: 'white',\n});\n",paraId:4,tocIndex:0},{value:"样式数据映射🌟",paraId:5,tocIndex:0},{value:"\n在正常情况下，style 的参数会作用到一个图层上的所有图形，如一个 PointLayer 中有十个点，我们设置 opacity = 0.5， 这样十个点的透明度都是 0.5。",paraId:5,tocIndex:0},{value:"\n而在特殊情况下，我们可能需要为每个点分别设置一个透明度，这时候按照原来的方式直接设置 style 方法的 opacity 的值就无法满足需求了，为此我们需要提供特殊的赋值方式。",paraId:5,tocIndex:0},{value:"\n通常我们会根据传入图层的数据为图层的每个图形设置单独的值，因此我们称之为“样式数据映射”。",paraId:5,tocIndex:0},{value:"\n我们支持几种设置 style 中的参数从 source 数据中动态取值的写法。",paraId:5,tocIndex:0},{value:"// 根据数据中的 v 字段的值设置点图层各个点的透明度\nconst data = [\n  {\n    lng: 120,\n    lat: 30,\n    v: 0.5\n  },\n  ...\n]\nconst layer = new PointLayer()\n  .source(data, {\n    parser: {\n      x: 'lng',\n      y: 'lat'\n    }\n  })\n  .shape('circle')\n  .color('#f00')\n  .size({\n    // 第一种写法 根据字段从 data 中直接取值\n    opacity: 'v'// opacity = 0.5\n  });\nscene.addLayer(layer);\n",paraId:6,tocIndex:0},{value:"在线案例",paraId:7},{value:"从 ",paraId:8},{value:"L7 2.5",paraId:8},{value:" 开始，各图层样式将逐步支持样式数据映射，目前支持样式数据映射的 ",paraId:8},{value:"style",paraId:8},{value:" 参数如下：",paraId:8},{value:"layer 类型/shape",paraId:9},{value:"支持的样式字段",paraId:9},{value:"备注",paraId:9},{value:"pointLayer/fill",paraId:9},{value:"opacity、strokeOpacity、strokeWidth、stroke、offsets",paraId:9},{value:"shape circle、triangle...",paraId:9},{value:"pointLayer/image",paraId:9},{value:"opacity、offsets",paraId:9},{value:"offsets 经纬度偏移",paraId:9},{value:"pointLayer/normal",paraId:9},{value:"opacity、offsets",paraId:9},{value:"pointLayer/text",paraId:9},{value:"opacity、strokeWidth、stroke、textOffset",paraId:9},{value:"textOffset 相对文字画布位置的偏移",paraId:9},{value:"pointLayer/extrude",paraId:9},{value:"opacity",paraId:9},{value:"polygonLayer/fill",paraId:9},{value:"opacity",paraId:9},{value:"polygonLayer/extrude",paraId:9},{value:"opacity",paraId:9},{value:"lineLayer/line",paraId:9},{value:"opacity",paraId:9},{value:"lineLayer/arc",paraId:9},{value:"opacity、thetaOffset",paraId:9},{value:"thetaOffset 弧线的弯曲弧度",paraId:9},{value:"lineLayer/arc3d",paraId:9},{value:"opacity",paraId:9},{value:"lineLayer/great_circle",paraId:9},{value:"opacity",paraId:9},{value:"在线案例",paraId:10}]},93941:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(31826);const d=[{value:"目前只在线图层上支持了纹理方法",paraId:0,tocIndex:0},{value:"texture 方法支持传入由 scene.addImage 方法添加的全局 icon 贴图资源",paraId:1,tocIndex:0},{value:"// 首先在全局加载图片资源\nscene.addImage(\n  'plane',\n  'https://gw.alipayobjects.com/zos/bmw-prod/0ca1668e-38c2-4010-8568-b57cb33839b9.svg',\n);\n\nconst layer = new LineLayer({\n  blend: 'normal',\n})\n  .source(data, {\n    parser: {\n      type: 'json',\n      x: 'lng1',\n      y: 'lat1',\n      x1: 'lng2',\n      y1: 'lat2',\n    },\n  })\n  .size(25)\n  .shape('arc')\n  .texture('plane') // 为图层绑定纹理\n  .color('#8C1EB2')\n  .style({\n    lineTexture: true, // 开启线的贴图功能\n    iconStep: 30, // 设置贴图纹理的间距\n    textureBlend: 'replace', // 设置纹理混合方式，默认值为 normal，可选值有 normal/replace 两种\n  });\n",paraId:2,tocIndex:0},{value:"在线案例",paraId:3}]},59730:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(67468);const d=[{value:"如果已经添加了图层，需要修改图层显示样式可以再次调用图形映射方法，然后调用 ",paraId:0,tocIndex:0},{value:"scene.render()",paraId:0,tocIndex:0},{value:"更新渲染即可",paraId:0,tocIndex:0},{value:"重新调用scale 方法",paraId:1,tocIndex:1},{value:"layer.scale('value', {\n  type: 'quantile',\n});\nscene.render();\n",paraId:2,tocIndex:1},{value:"重新调用 color/size/filter/shape等方法",paraId:3,tocIndex:2},{value:"layer.color('blue');\nlayer.size(10);\n\nscene.render();\n",paraId:4,tocIndex:2},{value:"layer.style({\n  opacity: 1,\n});\n\nscene.render();\n",paraId:5,tocIndex:3},{value:"更新 Source 数据",paraId:6,tocIndex:4},{value:"参数:",paraId:7,tocIndex:4},{value:"data 数据",paraId:8,tocIndex:4},{value:"option 默认和初始配置项一致，如果数据格式相同可不设置",paraId:8,tocIndex:4},{value:"调用 setData 方法会自动更新图层渲染",paraId:9,tocIndex:4},{value:"layer.setData(data);\n",paraId:10,tocIndex:4},{value:"设置图层叠加方法\n参数：",paraId:11,tocIndex:5},{value:"type blend 类型 normal ｜ additive ｜ subtractive ｜ max",paraId:12,tocIndex:5}]},76532:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(55547);const d=[{value:"添加 Mask 图层\n",paraId:0,tocIndex:1},{value:"const polygonLayer = new Polygon();\nlayer.addMask(polygonLayer);\nscene.render();\n",paraId:1,tocIndex:1},{value:"const polygonLayer = new Polygon();\nlayer.removeMask(polygonLayer);\nscene.render();\n",paraId:2,tocIndex:2},{value:"layer.disableMask();\nscene.render();\n",paraId:3,tocIndex:3},{value:"layer.disableMask();\nscene.render();\n",paraId:4,tocIndex:4}]},21290:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(47116);const d=[{value:"⚠️ mask、maskfence 不推荐使用，一下配置 2.14.x 之后版本生效",paraId:0},{value:"模板图层：用做模板的图层，PointLayer、LineLayer、PolygonLayer 都可以作为模板\n掩模图层：被模板切割的图层",paraId:1},{value:"掩模图层生效",paraId:2,tocIndex:0},{value:" ",paraId:3,tocIndex:0},{value:"array Layer",paraId:3,tocIndex:0},{value:" ",paraId:3,tocIndex:0},{value:"optional",paraId:3,tocIndex:0},{value:" ",paraId:3,tocIndex:0},{value:"default:",paraId:3,tocIndex:0},{value:" []",paraId:3,tocIndex:0},{value:"掩模图层生效",paraId:4,tocIndex:1},{value:"是否开启掩模，默认开启 maskLayers 不为空时生效",paraId:5,tocIndex:1},{value:" ",paraId:6,tocIndex:1},{value:"bool",paraId:6,tocIndex:1},{value:" ",paraId:6,tocIndex:1},{value:"optional",paraId:6,tocIndex:1},{value:" ",paraId:6,tocIndex:1},{value:"default:",paraId:6,tocIndex:1},{value:" true",paraId:6,tocIndex:1},{value:"掩模图层生效\n",paraId:7,tocIndex:2},{value:" ",paraId:8,tocIndex:2},{value:"boolean",paraId:8,tocIndex:2},{value:" ",paraId:8,tocIndex:2},{value:"optional",paraId:8,tocIndex:2},{value:" ",paraId:8,tocIndex:2},{value:"default:",paraId:8,tocIndex:2},{value:" true",paraId:8,tocIndex:2},{value:"用来描述当前图层的内容与掩模边界显示。",paraId:9,tocIndex:2},{value:"true",paraId:10,tocIndex:2},{value:" 在掩模内部显示",paraId:10,tocIndex:2},{value:"false",paraId:10,tocIndex:2},{value:" 在掩模外部显示",paraId:10,tocIndex:2},{value:"模板图层生效\n",paraId:11,tocIndex:3},{value:" ",paraId:11,tocIndex:3},{value:"枚举",paraId:11,tocIndex:3},{value:" ",paraId:11,tocIndex:3},{value:"optional",paraId:11,tocIndex:3},{value:" ",paraId:11,tocIndex:3},{value:"default:",paraId:11,tocIndex:3},{value:" and",paraId:11,tocIndex:3},{value:"\nmaskLayers 为多个时失效，需要在模板图层设置",paraId:11,tocIndex:3},{value:"or 交集",paraId:12,tocIndex:3},{value:"and 并集",paraId:12,tocIndex:3},{value:"使用示例",paraId:13,tocIndex:3},{value:"const polygonLayer = new Polygon();\nconst rasterLayer = new Raster({\n  // 栅格图层使用polygon 掩模\n  maskLayers: [polygonLayer],\n  enableMask: true,\n  maskInside: true,\n});\n",paraId:14,tocIndex:3}]},31130:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(94111);const d=[{value:"鼠标事件回调参数 target",paraId:0,tocIndex:0},{value:"layer.on(eventName, (target) => console.log(target));\n",paraId:1,tocIndex:0},{value:"x: number 鼠标 \b 在地图位置 x 坐标",paraId:2,tocIndex:0},{value:"y: number 鼠标 \b 在地图位置 y 坐标",paraId:2,tocIndex:0},{value:"type: string 鼠标事件类型",paraId:2,tocIndex:0},{value:"lngLat: 经度度对象 {lng:number, lat: number }; 鼠标所在位置经纬度",paraId:2,tocIndex:0},{value:"feature: any; 数据选中的地理要素信息",paraId:2,tocIndex:0},{value:"featureId: number | null; 数据选中的地理要素的 ID",paraId:2,tocIndex:0},{value:"点击事件",paraId:3,tocIndex:1},{value:"layer.on('click', (e) => console.log(e));\n",paraId:4,tocIndex:1},{value:"双击",paraId:5,tocIndex:2},{value:"layer.on('dblclick', (e) => console.log(e));\n",paraId:6,tocIndex:2},{value:"鼠标移动事件",paraId:7,tocIndex:3},{value:"layer.on('mousemove', (e) => console.log(e));\n",paraId:8,tocIndex:3},{value:"鼠标移除",paraId:9,tocIndex:4},{value:"layer.on('mouseout', (e) => console.log(e));\n",paraId:10,tocIndex:4},{value:"鼠标抬起",paraId:11,tocIndex:5},{value:"layer.on('mouseup', (e) => console.log(e));\n",paraId:12,tocIndex:5},{value:"鼠标按下",paraId:13,tocIndex:6},{value:"layer.on('mousedown', (e) => console.log(e));\n",paraId:14,tocIndex:6},{value:"鼠标右键",paraId:15,tocIndex:7},{value:"layer.on('contextmenu', (e) => console.log(e));\n",paraId:16,tocIndex:7},{value:"双击拾取元素",paraId:17,tocIndex:8},{value:"layer.on('dblclick', (e) => console.log(e));\n",paraId:18,tocIndex:8},{value:"点击未拾取到元素",paraId:19,tocIndex:9},{value:"layer.on('unclick', (e) => console.log(e));\n",paraId:20,tocIndex:9},{value:"鼠标移动未拾取到元素",paraId:21,tocIndex:10},{value:"layer.on('unmousemove', (e) => console.log(e));\n",paraId:22,tocIndex:10},{value:"鼠标抬起未拾取到元素",paraId:23,tocIndex:11},{value:"layer.on('unmouseup', (e) => console.log(e));\n",paraId:24,tocIndex:11},{value:"鼠标按下未拾取到元素",paraId:25,tocIndex:12},{value:"layer.on('unmousedown', (e) => console.log(e));\n",paraId:26,tocIndex:12},{value:"鼠标右键位拾取到元素",paraId:27,tocIndex:13},{value:"layer.on('uncontextmenu', (e) => console.log(e));\n",paraId:28,tocIndex:13},{value:"所有鼠标事件未拾取到",paraId:29,tocIndex:14},{value:"layer.on('unpick', (e) => console.log(e));\n",paraId:30,tocIndex:14},{value:"移动端事件 touchstart",paraId:31,tocIndex:15},{value:"layer.on('touchstart', (e) => console.log(e));\n",paraId:32,tocIndex:15},{value:"移动端事件 touchend",paraId:33,tocIndex:16},{value:"layer.on('touchend', (e) => console.log(e));\n",paraId:34,tocIndex:16},{value:"使用示例",paraId:35,tocIndex:16},{value:"layer.on('click', (ev) => {}); // 鼠标左键点击图层事件\nlayer.on('mouseenter', (ev) => {}); // 鼠标进入图层要素\nlayer.on('mousemove', (ev) => {}); // 鼠标在图层上移动时触发\nlayer.on('mouseout', (ev) => {}); // 鼠标移出图层要素时触发\nlayer.on('mouseup', (ev) => {}); // 鼠标在图层上单击抬起时触发\nlayer.on('mousedown', (ev) => {}); // 鼠标在图层上单击按下时触发\nlayer.on('contextmenu', (ev) => {}); // 图层要素点击右键菜单\n\n// 鼠标在图层外的事件\nlayer.on('unclick', (ev) => {}); // 图层外点击\nlayer.on('unmousemove', (ev) => {}); // 图层外移动\nlayer.on('unmouseup', (ev) => {}); // 图层外鼠标抬起\nlayer.on('unmousedown', (ev) => {}); // 图层外单击按下时触发\nlayer.on('uncontextmenu', (ev) => {}); // 图层外点击右键\nlayer.on('unpick', (ev) => {}); // 图层外的操作的所有事件\n",paraId:36,tocIndex:16}]},41202:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(71647);const d=[{value:" ",paraId:0,tocIndex:0},{value:"string",paraId:0,tocIndex:0},{value:" ",paraId:0,tocIndex:0},{value:"optional",paraId:0,tocIndex:0},{value:" ",paraId:0,tocIndex:0},{value:"default:",paraId:0,tocIndex:0},{value:" 自动数字编号",paraId:0,tocIndex:0},{value:"设置图层名称,可根据 name 获取 layer",paraId:1,tocIndex:0},{value:"scene.getLayerByName(name);\n",paraId:2,tocIndex:0},{value:" ",paraId:3,tocIndex:1},{value:"bool",paraId:3,tocIndex:1},{value:" ",paraId:3,tocIndex:1},{value:"optional",paraId:3,tocIndex:1},{value:" ",paraId:3,tocIndex:1},{value:"default:",paraId:3,tocIndex:1},{value:" true",paraId:3,tocIndex:1},{value:"图层是否可见",paraId:4,tocIndex:1},{value:" ",paraId:5,tocIndex:2},{value:"int",paraId:5,tocIndex:2},{value:" ",paraId:5,tocIndex:2},{value:"optional",paraId:5,tocIndex:2},{value:" ",paraId:5,tocIndex:2},{value:"default:",paraId:5,tocIndex:2},{value:" 0",paraId:5,tocIndex:2},{value:"图层绘制顺序，数值大绘制在上层，可以控制图层绘制的上下层级",paraId:6,tocIndex:2},{value:"L7 采用队列渲染的机制，所有的图层在内部保存在一个数组中，每一帧的渲染会将图层数组按照 zIndex 的值进行排序，然后遍历数组，将符合条件的图层渲染到场景中",paraId:7,tocIndex:2},{value:" ",paraId:8,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:" ",paraId:8,tocIndex:3},{value:"optional",paraId:8,tocIndex:3},{value:" ",paraId:8,tocIndex:3},{value:"default:",paraId:8,tocIndex:3},{value:" Mapbox （0-24） 高德 （2-19)",paraId:8,tocIndex:3},{value:"图层显示最小缩放等级",paraId:9,tocIndex:3},{value:" ",paraId:10,tocIndex:4},{value:"number",paraId:10,tocIndex:4},{value:" ",paraId:10,tocIndex:4},{value:"optional",paraId:10,tocIndex:4},{value:" ",paraId:10,tocIndex:4},{value:"default:",paraId:10,tocIndex:4},{value:" Mapbox （0-24） 高德 （2-19)",paraId:10,tocIndex:4},{value:"图层显示最大缩放等级",paraId:11,tocIndex:4},{value:" ",paraId:12,tocIndex:5},{value:"bool",paraId:12,tocIndex:5},{value:" ",paraId:12,tocIndex:5},{value:"optional",paraId:12,tocIndex:5},{value:" ",paraId:12,tocIndex:5},{value:"default:",paraId:12,tocIndex:5},{value:" false",paraId:12,tocIndex:5},{value:"layer 初始化完成之后，地图是否自动缩放到图层范围",paraId:13,tocIndex:5},{value:" ",paraId:14,tocIndex:6},{value:"bool",paraId:14,tocIndex:6},{value:" ",paraId:14,tocIndex:6},{value:"optional",paraId:14,tocIndex:6},{value:" ",paraId:14,tocIndex:6},{value:"default:",paraId:14,tocIndex:6},{value:" 0",paraId:14,tocIndex:6},{value:"图层拾取缓存机制，如 1px 宽度的线鼠标很难拾取(点击)到, 通过设置该参数可扩大拾取的范围（放大图层对象的尺寸）",paraId:15,tocIndex:6},{value:" ",paraId:16,tocIndex:7},{value:"string",paraId:16,tocIndex:7},{value:" ",paraId:16,tocIndex:7},{value:"optional",paraId:16,tocIndex:7},{value:" ",paraId:16,tocIndex:7},{value:"default:",paraId:16,tocIndex:7},{value:" 'normal'",paraId:16,tocIndex:7},{value:"图层元素混合效果",paraId:17,tocIndex:7},{value:"normal 正常效果 默认 发生遮挡的时候，只会显示前面的图层的颜色",paraId:18,tocIndex:7},{value:"additive 叠加模式 发生遮挡的时候，显示前后图层颜色的叠加",paraId:18,tocIndex:7},{value:"subtractive 相减模式 发生遮挡的时候，显示前后图层颜色的相减",paraId:18,tocIndex:7},{value:"max 最大值 发生遮挡的时候，显示图层颜色 rgb 的最大值",paraId:18,tocIndex:7},{value:" ",paraId:19,tocIndex:8},{value:"boolean",paraId:19,tocIndex:8},{value:" ",paraId:19,tocIndex:8},{value:"optional",paraId:19,tocIndex:8},{value:" ",paraId:19,tocIndex:8},{value:"default:",paraId:19,tocIndex:8},{value:" 'false'",paraId:19,tocIndex:8},{value:"\n图层事件，默认只响应最上层图层，设置为true 将允许事件透传",paraId:19,tocIndex:8},{value:"⚠️ mask、maskfence 不推荐使用，一下配置 2.14.x 之后版本生效",paraId:20,tocIndex:8},{value:"模板图层：用做模板的图层，PointLayer、LineLayer、PolygonLayer 都可以作为模板\n掩模图层：被模板切割的图层",paraId:21,tocIndex:8},{value:"掩模图层生效",paraId:22,tocIndex:9},{value:" ",paraId:23,tocIndex:9},{value:"array Layer",paraId:23,tocIndex:9},{value:" ",paraId:23,tocIndex:9},{value:"optional",paraId:23,tocIndex:9},{value:" ",paraId:23,tocIndex:9},{value:"default:",paraId:23,tocIndex:9},{value:" []",paraId:23,tocIndex:9},{value:"掩模图层生效",paraId:24,tocIndex:10},{value:"是否开启掩模，默认开启 maskLayers 不为空时生效",paraId:25,tocIndex:10},{value:" ",paraId:26,tocIndex:10},{value:"bool",paraId:26,tocIndex:10},{value:" ",paraId:26,tocIndex:10},{value:"optional",paraId:26,tocIndex:10},{value:" ",paraId:26,tocIndex:10},{value:"default:",paraId:26,tocIndex:10},{value:" true",paraId:26,tocIndex:10},{value:"掩模图层生效\n",paraId:27,tocIndex:11},{value:" ",paraId:28,tocIndex:11},{value:"boolean",paraId:28,tocIndex:11},{value:" ",paraId:28,tocIndex:11},{value:"optional",paraId:28,tocIndex:11},{value:" ",paraId:28,tocIndex:11},{value:"default:",paraId:28,tocIndex:11},{value:" true",paraId:28,tocIndex:11},{value:"用来描述当前图层的内容与掩模边界显示。",paraId:29,tocIndex:11},{value:"true",paraId:30,tocIndex:11},{value:" 在掩模内部显示",paraId:30,tocIndex:11},{value:"false",paraId:30,tocIndex:11},{value:" 在掩模外部显示",paraId:30,tocIndex:11},{value:"模板图层生效\n",paraId:31,tocIndex:12},{value:" ",paraId:31,tocIndex:12},{value:"枚举",paraId:31,tocIndex:12},{value:" ",paraId:31,tocIndex:12},{value:"optional",paraId:31,tocIndex:12},{value:" ",paraId:31,tocIndex:12},{value:"default:",paraId:31,tocIndex:12},{value:" and",paraId:31,tocIndex:12},{value:"\nmaskLayers 为多个时失效，需要在模板图层设置",paraId:31,tocIndex:12},{value:"or 交集",paraId:32,tocIndex:12},{value:"and 并集",paraId:32,tocIndex:12},{value:"使用示例",paraId:33,tocIndex:12},{value:"const polygonLayer = new Polygon();\nconst rasterLayer = new Raster({\n  // 栅格图层使用polygon 掩模\n  maskLayers: [polygonLayer],\n  enableMask: true,\n  maskInside: true,\n});\n",paraId:34,tocIndex:12}]},36096:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(17081);const d=[{value:"type 类型 支持 `linear','quantize','custom','cat'",paraId:0,tocIndex:0},{value:"colors  颜色数组",paraId:0,tocIndex:0},{value:"positions 数据分段区间，可选，quantize 不需要设置 position，position 为原始数据值",paraId:0,tocIndex:0},{value:"⚠️ 2.13 新增特性",paraId:1,tocIndex:0},{value:"枚举类型色带只支持 0 -255 的整数类型，positions 用来设置枚举",paraId:2,tocIndex:1},{value:"{\n  type:'cat',\n  colors:['#e41a1c','#377eb8','#4daf4a','#984ea3','#ff7f00'],\n  positions:[1,20,101,102,200],\n}\n",paraId:3,tocIndex:1},{value:"等间距只根据数据的区间 domain 进行均匀分段，如 domain [0,10000]，如果分 5 段，每段间距 2000。\n等间距不需要设置 positions，只需要设置colors，根据colors 的长度设置分段数",paraId:4,tocIndex:2},{value:"rampColors: {\n  type:'quantize',\n  colors: ['#f0f9e8','#bae4bc','#7bccc4','#43a2ca','#0868ac']\n}\n",paraId:5,tocIndex:2},{value:"linear 为现有连续类型的加强版，positions 支持设置源数据，不需要转换成 0-1",paraId:6,tocIndex:3},{value:"rampColors: {\n  type:'linear',\n  colors: ['#f0f9e8','#bae4bc','#7bccc4','#43a2ca','#0868ac'],\n  positions [0,200,1000,4000,8000]\n}\n\n⚠️ 兼容 2.13.0 之前版本，未设置type 时，position 值域为 0-1。\n\n\n\n",paraId:7,tocIndex:3},{value:"自定义分段色带区别等间距色带，用户自定义分段间隔。\n自定义 positions 的长度需要比 colors 的长度多1个，同时poisitions",paraId:8,tocIndex:4},{value:"rampColors: {\n  type:'custom',\n  colors: ['#f0f9e8','#bae4bc','#7bccc4','#43a2ca','#0868ac'],\n  positions: [0,200,1000,4000,8000,10000]\n}\n",paraId:9,tocIndex:4}]},93826:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(74427);const d=[{value:"style",paraId:0},{value:" 方法用于配制图层的样式，",paraId:0},{value:"单通道 绘制结果由是单一的数值控制，如灰度图，数值对应的颜色可以通过表示配置 ",paraId:1},{value:"rampColors",paraId:1},{value:" 色带控制。",paraId:1},{value:"layer.style({\n  opacity: 0.5,\n});\n",paraId:2},{value:"style",paraId:3,tocIndex:0},{value:"类型",paraId:3,tocIndex:0},{value:"描述",paraId:3,tocIndex:0},{value:"默认值",paraId:3,tocIndex:0},{value:"opacity",paraId:3,tocIndex:0},{value:"number",paraId:3,tocIndex:0},{value:"图形的透明度",paraId:3,tocIndex:0},{value:"1",paraId:3,tocIndex:0},{value:"clampLow",paraId:3,tocIndex:0},{value:"boolean",paraId:3,tocIndex:0},{value:"设置为 ",paraId:3,tocIndex:0},{value:"true",paraId:3,tocIndex:0},{value:"，低于 ",paraId:3,tocIndex:0},{value:"domain",paraId:3,tocIndex:0},{value:" 的数据将不显示",paraId:3,tocIndex:0},{value:"false",paraId:3,tocIndex:0},{value:"clampHigh",paraId:3,tocIndex:0},{value:"boolean",paraId:3,tocIndex:0},{value:"设置为 ",paraId:3,tocIndex:0},{value:"true",paraId:3,tocIndex:0},{value:"，高于 ",paraId:3,tocIndex:0},{value:"domain",paraId:3,tocIndex:0},{value:" 的数据将不显示",paraId:3,tocIndex:0},{value:"false",paraId:3,tocIndex:0},{value:"domain",paraId:3,tocIndex:0},{value:"[number, number]",paraId:3,tocIndex:0},{value:"数据映射区间",paraId:3,tocIndex:0},{value:"[ 0, 8000 ]",paraId:3,tocIndex:0},{value:"noDataValue",paraId:3,tocIndex:0},{value:"number",paraId:3,tocIndex:0},{value:"不会显示的值",paraId:3,tocIndex:0},{value:"-9999999",paraId:3,tocIndex:0},{value:"rampColors",paraId:3,tocIndex:0},{value:"IRampColors",paraId:3,tocIndex:0},{value:"值域映射颜色的色带",paraId:3,tocIndex:0},{value:"/",paraId:3,tocIndex:0},{value:"type 类型 支持 `linear','quantize','custom','cat'",paraId:4,tocIndex:1},{value:"colors  颜色数组",paraId:4,tocIndex:1},{value:"positions 数据分段区间，可选，quantize 不需要设置 position，position 为原始数据值",paraId:4,tocIndex:1},{value:"⚠️ 2.13 新增特性",paraId:5,tocIndex:1},{value:"枚举类型色带只支持 0 -255 的整数类型，positions 用来设置枚举",paraId:6,tocIndex:2},{value:"{\n  type:'cat',\n  colors:['#e41a1c','#377eb8','#4daf4a','#984ea3','#ff7f00'],\n  positions:[1,20,101,102,200],\n}\n",paraId:7,tocIndex:2},{value:"等间距只根据数据的区间 domain 进行均匀分段，如 domain [0,10000]，如果分 5 段，每段间距 2000。\n等间距不需要设置 positions，只需要设置colors，根据colors 的长度设置分段数",paraId:8,tocIndex:3},{value:"rampColors: {\n  type:'quantize',\n  colors: ['#f0f9e8','#bae4bc','#7bccc4','#43a2ca','#0868ac']\n}\n",paraId:9,tocIndex:3},{value:"linear 为现有连续类型的加强版，positions 支持设置源数据，不需要转换成 0-1",paraId:10,tocIndex:4},{value:"rampColors: {\n  type:'linear',\n  colors: ['#f0f9e8','#bae4bc','#7bccc4','#43a2ca','#0868ac'],\n  positions [0,200,1000,4000,8000]\n}\n\n⚠️ 兼容 2.13.0 之前版本，未设置type 时，position 值域为 0-1。\n\n\n\n",paraId:11,tocIndex:4},{value:"自定义分段色带区别等间距色带，用户自定义分段间隔。\n自定义 positions 的长度需要比 colors 的长度多1个，同时poisitions",paraId:12,tocIndex:5},{value:"rampColors: {\n  type:'custom',\n  colors: ['#f0f9e8','#bae4bc','#7bccc4','#43a2ca','#0868ac'],\n  positions: [0,200,1000,4000,8000,10000]\n}\n",paraId:13,tocIndex:5}]},62336:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(78840);const d=[{value:"单通道 绘制结果由是单一的数值控制，如灰度图，数值对应的颜色可以通过表示配置 ",paraId:0},{value:"rampColors",paraId:0},{value:" 色带控制。",paraId:0},{value:"layer.style({\n  opacity: 0.5,\n});\n",paraId:1},{value:"style",paraId:2,tocIndex:0},{value:"类型",paraId:2,tocIndex:0},{value:"描述",paraId:2,tocIndex:0},{value:"默认值",paraId:2,tocIndex:0},{value:"opacity",paraId:2,tocIndex:0},{value:"number",paraId:2,tocIndex:0},{value:"图形的透明度",paraId:2,tocIndex:0},{value:"1",paraId:2,tocIndex:0},{value:"clampLow",paraId:2,tocIndex:0},{value:"boolean",paraId:2,tocIndex:0},{value:"设置为 ",paraId:2,tocIndex:0},{value:"true",paraId:2,tocIndex:0},{value:"，低于 ",paraId:2,tocIndex:0},{value:"domain",paraId:2,tocIndex:0},{value:" 的数据将不显示",paraId:2,tocIndex:0},{value:"false",paraId:2,tocIndex:0},{value:"clampHigh",paraId:2,tocIndex:0},{value:"boolean",paraId:2,tocIndex:0},{value:"设置为 ",paraId:2,tocIndex:0},{value:"true",paraId:2,tocIndex:0},{value:"，高于 ",paraId:2,tocIndex:0},{value:"domain",paraId:2,tocIndex:0},{value:" 的数据将不显示",paraId:2,tocIndex:0},{value:"false",paraId:2,tocIndex:0},{value:"domain",paraId:2,tocIndex:0},{value:"[number, number]",paraId:2,tocIndex:0},{value:"数据映射区间",paraId:2,tocIndex:0},{value:"[ 0, 8000 ]",paraId:2,tocIndex:0},{value:"noDataValue",paraId:2,tocIndex:0},{value:"number",paraId:2,tocIndex:0},{value:"不会显示的值",paraId:2,tocIndex:0},{value:"-9999999",paraId:2,tocIndex:0},{value:"rampColors",paraId:2,tocIndex:0},{value:"IRampColors",paraId:2,tocIndex:0},{value:"值域映射颜色的色带",paraId:2,tocIndex:0},{value:"/",paraId:2,tocIndex:0},{value:"type 类型 支持 `linear','quantize','custom','cat'",paraId:3,tocIndex:1},{value:"colors  颜色数组",paraId:3,tocIndex:1},{value:"positions 数据分段区间，可选，quantize 不需要设置 position，position 为原始数据值",paraId:3,tocIndex:1},{value:"⚠️ 2.13 新增特性",paraId:4,tocIndex:1},{value:"枚举类型色带只支持 0 -255 的整数类型，positions 用来设置枚举",paraId:5,tocIndex:2},{value:"{\n  type:'cat',\n  colors:['#e41a1c','#377eb8','#4daf4a','#984ea3','#ff7f00'],\n  positions:[1,20,101,102,200],\n}\n",paraId:6,tocIndex:2},{value:"等间距只根据数据的区间 domain 进行均匀分段，如 domain [0,10000]，如果分 5 段，每段间距 2000。\n等间距不需要设置 positions，只需要设置colors，根据colors 的长度设置分段数",paraId:7,tocIndex:3},{value:"rampColors: {\n  type:'quantize',\n  colors: ['#f0f9e8','#bae4bc','#7bccc4','#43a2ca','#0868ac']\n}\n",paraId:8,tocIndex:3},{value:"linear 为现有连续类型的加强版，positions 支持设置源数据，不需要转换成 0-1",paraId:9,tocIndex:4},{value:"rampColors: {\n  type:'linear',\n  colors: ['#f0f9e8','#bae4bc','#7bccc4','#43a2ca','#0868ac'],\n  positions [0,200,1000,4000,8000]\n}\n\n⚠️ 兼容 2.13.0 之前版本，未设置type 时，position 值域为 0-1。\n\n\n\n",paraId:10,tocIndex:4},{value:"自定义分段色带区别等间距色带，用户自定义分段间隔。\n自定义 positions 的长度需要比 colors 的长度多1个，同时poisitions",paraId:11,tocIndex:5},{value:"rampColors: {\n  type:'custom',\n  colors: ['#f0f9e8','#bae4bc','#7bccc4','#43a2ca','#0868ac'],\n  positions: [0,200,1000,4000,8000,10000]\n}\n",paraId:12,tocIndex:5}]},66128:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(66802);const d=[{value:"scale",paraId:0},{value:" 方法设置数据字段映射方法，用于设将地图数据值（数字、日期、类别等数据）转成视觉值（颜色、大小、形状）。尺度 Scale 是数据可视化的基本组成部分，因为它们决定了视觉编码的性质。",paraId:0},{value:"field",paraId:1,tocIndex:0},{value:" 指定 source 中传入的数据中用于映射的字段名",paraId:1,tocIndex:0},{value:"scaleConfig",paraId:1,tocIndex:0},{value:" 列定义配置，对象类型",paraId:1,tocIndex:0},{value:"interface IScaleConfig {\n  type: ScaleTypeName;\n  domain?: any[];\n  ...\n}\n\nlayer.color('id', ['#f00', '#ff0'])\n.size('mag', [1, 80])\n.scale('mag', {\n  type: 'linear',\n  domain: [ 1, 50]\n})；\n",paraId:2,tocIndex:0},{value:"scale",paraId:3,tocIndex:1},{value:" 的类型可以分为 ",paraId:3,tocIndex:1},{value:"3",paraId:3,tocIndex:1},{value:" 类 ",paraId:3,tocIndex:1},{value:"11",paraId:3,tocIndex:1},{value:" 种，不同 ",paraId:3,tocIndex:1},{value:"Scale",paraId:3,tocIndex:1},{value:" 的差异在于 ",paraId:3,tocIndex:1},{value:"domain->range",paraId:3,tocIndex:1},{value:" 的转换方法的不同。",paraId:3,tocIndex:1},{value:"range",paraId:3,tocIndex:1},{value:" 和 ",paraId:3,tocIndex:1},{value:"domain",paraId:3,tocIndex:1},{value:" 是 ",paraId:3,tocIndex:1},{value:"Scale",paraId:3,tocIndex:1},{value:" 中非常重要的两个参数。",paraId:3,tocIndex:1},{value:"domain: 地图数据值的定义区间",paraId:4,tocIndex:1},{value:"range：视觉值的区间定义",paraId:4,tocIndex:1},{value:"数据类型",paraId:5,tocIndex:1},{value:"度量类型",paraId:5,tocIndex:1},{value:"连续",paraId:5,tocIndex:1},{value:"linear、log、pow、time、sequential、quantize、quantile、threshold",paraId:5,tocIndex:1},{value:"分类",paraId:5,tocIndex:1},{value:"cat、time",paraId:5,tocIndex:1},{value:"常量",paraId:5,tocIndex:1},{value:"identity",paraId:5,tocIndex:1},{value:"Cat 指枚举类型，用于展示分类数据，比如农作物种植区分布图，水稻、玉米、大豆等不同类别需要映射为不同的颜色。",paraId:6,tocIndex:2},{value:"// 三种作物会分别转成对应的颜色\n// domain = ['corn','rice', 'soybean'];\n// range = ['red','white','blue'];\nconst data = [\n  { lng: 120, lat: 30, t: 'corn' },\n  { lng: 121, lat: 30, t: 'rice' },\n  { lng: 122, lat: 30, t: 'soybean' },\n];\nlayer.source(data, {\n  parser: {\n    type: 'type',\n    x: 'lng',\n    y: 'lat',\n  },\n});\nlayer.scale('t', { type: 'cat' });\nlayer.color('t', ['red', 'white', 'blue']);\n",paraId:7,tocIndex:2},{value:"常量度量 某个字段是不变的常量。",paraId:8,tocIndex:3},{value:"线性是连续数据的映射方法，数据和视觉值是通过线性方法换算的。如数据值 1-100 线性映射到红到蓝的线下渐变色每个数字对应一个颜色",paraId:9,tocIndex:4},{value:"相等间隔会将属性值的范围划分为若干个大小相等的子范围。相等间隔最适用于常见的数据范围，如百分比和温度。这种方法强调的是某个属性值相对于其他值的量",paraId:10,tocIndex:5},{value:"每个类都含有相等数量的要素。分位数分类非常适用于呈线性分布的数据。分位数为每个类分配数量相等的数据值。不存在空类，也不存在值过多或过少的类。\n由于使用“分位数”分类将要素以同等数量分组到每个类中，因此得到的地图往往具有误导性。可能会将相似的要素置于相邻的类中，或将值差异较大的要素置于相同类中。可通过增加类的数量将这种失真降至最低。",paraId:11,tocIndex:6},{value:"他允许将域的任意子集（非统一段）映射到范围内的离散值。输入域仍然是连续的，并根据提供给域属性的一组阈值划分为多个切片。 range 属性必须有 N+1 个元素，其中 N 是域中提供的阈值边界数",paraId:12,tocIndex:7},{value:"手动设置间隔 Manual interval 手动设置分级分类区间，某些数据会有相应的业界标准，或者需要进行某种特殊的显示。如空气质量数据有严格数据分段标准",paraId:13,tocIndex:7},{value:'-1   => "red"\n0    => "white"\n0.5  => "white"\n1.0  => "blue"\n1000 => "blue\n\n',paraId:14,tocIndex:7},{value:"用于返回给定的颜色数组的统一非有理 B-spline 插值器函数，该数组将转换为RGB颜色。",paraId:15,tocIndex:8},{value:"const scaleColors = d3interpolate.interpolateRgbBasis(colors);\n",paraId:16,tocIndex:8},{value:"interface IScaleConfig {\n  type: ScaleTypeName;\n  domain?: any[];\n  range?: any[];\n  neutral?: number;\n  field?: string;\n  unknown?: string;\n  ticks?: any[];\n  nice?: boolean;\n  clamp?: boolean;\n  format?: () => any;\n}\n",paraId:17,tocIndex:9}]},58422:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(32446);const d=[{value:"图层数据使用经纬度格式，数据源支持 JSON、GeoJSON、CSV 三种数据格式。",paraId:0},{value:"GeoJSON",paraId:1},{value:"CSV",paraId:2},{value:"JSON",paraId:3},{value:"🌟 通常每种数据都需要相应的 parser 解析数据",paraId:4}]},98589:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(23819);const d=[{value:"默认样式配置为常量值，某些配置也支持数据映射，映射定义同 color、size参数一致。",paraId:0,tocIndex:0},{value:"field: 映射字段",paraId:1,tocIndex:0},{value:"value： 映射区间或者自定义回调函数",paraId:1,tocIndex:0},{value:"如：",paraId:2,tocIndex:0},{value:"layer.style({\n    opacity:{\n        field:'name'\n        value:[0.1,0.5,1],\n\n    }\n})\n",paraId:3,tocIndex:0}]},55843:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(35678);const d=[{value:" ",paraId:0,tocIndex:1},{value:"number",paraId:0,tocIndex:1},{value:" ",paraId:0,tocIndex:1},{value:"地图初始显示级别 {number} Mapbox （0-24） 高德 （2-19）",paraId:1,tocIndex:1},{value:"地图初始中心经纬度 {Lnglat}",paraId:2,tocIndex:2},{value:"地图初始俯仰角度 {number}  default 0",paraId:3,tocIndex:3},{value:"地图最小缩放等级 {number}  default 0 Mapbox 0-24） 高德 （2-19）",paraId:4,tocIndex:4},{value:"地图最大缩放等级 {number}  default 22 Mapbox（0-24） 高德 （2-19）",paraId:5,tocIndex:5},{value:"地图是否可旋转 {Boolean} default true",paraId:6,tocIndex:6},{value:"Scene 统一代理，见 ",paraId:7,tocIndex:7},{value:"Scene 文档",paraId:8,tocIndex:7},{value:"或者",paraId:9,tocIndex:7},{value:"scene.map 直接调用 map 实例方法",paraId:10,tocIndex:7}]},27803:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(97873);const d=[{value:"format",paraId:0,tocIndex:2},{value:" 方法用于从传入的栅格文件二进制数据中提取波段数据。",paraId:0,tocIndex:2},{value:"第一个参数是栅格文件二进制数据",paraId:1,tocIndex:2},{value:"第二个参数是第一个参数指定的栅格文件中应该提取的波段",paraId:2,tocIndex:2},{value:"format",paraId:3,tocIndex:2},{value:" 是一个 ",paraId:3,tocIndex:2},{value:"async",paraId:3,tocIndex:2},{value:" 方法。",paraId:3,tocIndex:2},{value:"归一化指数",paraId:4,tocIndex:3},{value:"{\n  type: 'nd';\n}\n",paraId:5,tocIndex:3},{value:"示例一",paraId:6,tocIndex:4},{value:"// band1 * 0.5\n{\n  operation: ['*', ['band', 1], 0.5],\n};\n",paraId:7,tocIndex:4},{value:"示例二 嵌套使用",paraId:8,tocIndex:4},{value:"// band0 * 0.2 + band1\n{\n  operation:['+', ['*', ['band', 0], 0.2], ['band', 1]]]\n};\n",paraId:9,tocIndex:4},{value:"示例三 归一化指数",paraId:10,tocIndex:4},{value:"// 植被指数计算\n{\n  operation: [\n    '/',\n    ['-', ['band', 1], ['band', 0]], // R > NIR\n    ['+', ['band', 1], ['band', 0]],\n  ];\n}\n",paraId:11,tocIndex:4},{value:"operation 表达式类型",paraId:12,tocIndex:4},{value:"_",paraId:13,tocIndex:4},{value:"['_', value1, value2]",paraId:13,tocIndex:4},{value:"返回 ",paraId:13,tocIndex:4},{value:"value1 \\* value2",paraId:13,tocIndex:4},{value:"/ ",paraId:13,tocIndex:4},{value:"['/', value1, value2]",paraId:13,tocIndex:4},{value:" 返回 ",paraId:13,tocIndex:4},{value:"value1 / value2",paraId:13,tocIndex:4},{value:"+",paraId:13,tocIndex:4},{value:"['+', value1, value2]",paraId:13,tocIndex:4},{value:" 返回 ",paraId:13,tocIndex:4},{value:"value1 + value2",paraId:13,tocIndex:4},{value:"-",paraId:13,tocIndex:4},{value:"['-', value1, value2]",paraId:13,tocIndex:4},{value:" 返回 ",paraId:13,tocIndex:4},{value:"value2 - value1",paraId:13,tocIndex:4},{value:"% ",paraId:13,tocIndex:4},{value:"['%', value1, value2]",paraId:13,tocIndex:4},{value:" 返回 ",paraId:13,tocIndex:4},{value:"value1 % value2",paraId:13,tocIndex:4},{value:"^ ",paraId:13,tocIndex:4},{value:"['^', value1, value2]",paraId:13,tocIndex:4},{value:" 返回 ",paraId:13,tocIndex:4},{value:"value1 ^ value2",paraId:13,tocIndex:4},{value:"abs",paraId:13,tocIndex:4},{value:"['abs', value1]",paraId:13,tocIndex:4},{value:" 返回 ",paraId:13,tocIndex:4},{value:"Math.abs(value1)",paraId:13,tocIndex:4},{value:"floor ",paraId:13,tocIndex:4},{value:"['floor', value1]",paraId:13,tocIndex:4},{value:" 返回 ",paraId:13,tocIndex:4},{value:"Math.floor(value1)",paraId:13,tocIndex:4},{value:"round ",paraId:13,tocIndex:4},{value:"['round', value1]",paraId:13,tocIndex:4},{value:" 返回 ",paraId:13,tocIndex:4},{value:"Math.round(value1)",paraId:13,tocIndex:4},{value:"ceil ",paraId:13,tocIndex:4},{value:"['ceil', value1]",paraId:13,tocIndex:4},{value:" 返回 ",paraId:13,tocIndex:4},{value:"Math.ceil(value1)",paraId:13,tocIndex:4},{value:"sin ",paraId:13,tocIndex:4},{value:"['sin', value1]",paraId:13,tocIndex:4},{value:" 返回 ",paraId:13,tocIndex:4},{value:"Math.sin(value1)",paraId:13,tocIndex:4},{value:"cos ",paraId:13,tocIndex:4},{value:"['cos', value1]",paraId:13,tocIndex:4},{value:" 返回 ",paraId:13,tocIndex:4},{value:"Math.cos(value1)",paraId:13,tocIndex:4},{value:"atan ",paraId:13,tocIndex:4},{value:"['atan', value1, value2]",paraId:13,tocIndex:4},{value:" 返回 `n1===-1?Math.atan(n1):",paraId:13,tocIndex:4}]},38326:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(23387);const d=[{value:"Raster data 数据栅格的可视化，栅格数据主要来源是卫星遥感数据，如数字高程图、植被分布图和夜光图。",paraId:0},{value:"data 数据",paraId:1},{value:"option 配置项\n",paraId:1},{value:"parser 数据解析参数",paraId:2},{value:"data 解析后的数据，为数组",paraId:3,tocIndex:0},{value:"type RasterDataType =\n  | Uint8Array\n  | Int8Array\n  | Uint16Array\n  | Int16Array\n  | Uint32Array\n  | Int32Array\n  | Float32Array\n  | Float64Array;\n",paraId:4,tocIndex:0},{value:"以 geotiff 为例需要先将数据解析出来，作为 data 输入给 source",paraId:5,tocIndex:0},{value:"import * as GeoTIFF from 'geotiff';\n\nasync function getTiffData() {\n  async function getTiffData() {\n    const response = await fetch(\n      'https://gw.alipayobjects.com/zos/antvdemo/assets/light_clip/lightF182013.tiff',\n    );\n    const arrayBuffer = await response.arrayBuffer();\n    const tiff = await GeoTIFF.fromArrayBuffer(arrayBuffer);\n    const image = await tiff.getImage();\n    const width = image.getWidth();\n    const height = image.getHeight();\n    const values = await image.readRasters();\n    return {\n      data: values[0],\n      width,\n      height,\n    };\n  }\n}\nconst tiffdata = await getTiffData();\nlayer.source(tiffdata.data, {\n  parser: {\n    type: 'raster',\n    width: tiffdata.width,\n    height: tiffdata.height,\n    extent: [73.4821902409999979, 3.8150178409999995, 135.1066187319999869, 57.6300459959999998],\n  },\n});\n",paraId:6,tocIndex:0},{value:"type: raster",paraId:7,tocIndex:1},{value:"extent: 栅格的经纬度范围 [minlng, minlat,maxLng, maxLat]",paraId:7,tocIndex:1},{value:"width 数据宽度",paraId:7,tocIndex:1},{value:"height 数据高度",paraId:7,tocIndex:1},{value:"根据栅格数据的经纬度范围，将其添加到地图上。",paraId:8,tocIndex:1},{value:"layer.source(rasterData, {\n  parser: {\n    type: 'raster',\n    extent: [121.168, 30.2828, 121.384, 30.4219],\n  },\n});\n",paraId:9,tocIndex:1},{value:"Raster ndi",paraId:10}]},5556:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(91817);const d=[{value:"多波段支持两种数据方式，栅格数据坐标系只支持 3857 投影的栅格",paraId:0,tocIndex:0},{value:"单文件多波段",paraId:1,tocIndex:0},{value:"多个单波段文件组成多波段",paraId:1,tocIndex:0},{value:"data 为未解析过 tiff arraybuffer 数据，在 parser 中 通过 format 进行数据标准化",paraId:2,tocIndex:1},{value:"  const url1 = 'https://gw.alipayobjects.com/zos/raptor/1667832825992/LC08_3857_clip_2.tif';\n  async function getTiffData(url: string) {\n  const response = await fetch(url);\n  const arrayBuffer = await response.arrayBuffer();\n  return arrayBuffer;\n  }\n}\nlayer.source(\n    [\n    {\n        data: tiffdata,\n        bands: [6, 5, 2].map((v) => v - 1),\n    },\n    ],\n    {\n    parser: {\n        type: 'rasterRgb',\n        format: async (data, bands) => {\n        const tiff = await GeoTIFF.fromArrayBuffer(data);\n        const image1 = await tiff.getImage();\n        const value = await image1.readRasters();\n        return bands.map((band) => {\n            return {\n            rasterData: value[band],\n            width: value.width,\n            height: value.height,\n            };\n        });\n        },\n        operation: {\n        type: 'rgb',\n        },\n        extent: [\n        130.39565357746957, 46.905730725742366, 130.73364094187343,\n        47.10217234153133,\n        ],\n    },\n    },\n)\n\n",paraId:3,tocIndex:1},{value:"type: raster",paraId:4,tocIndex:2},{value:"extent: 栅格的经纬度范围 [minlng, minlat,maxLng, maxLat]",paraId:4,tocIndex:2},{value:"根据栅格数据的经纬度范围，将其添加到地图上。",paraId:5,tocIndex:2},{value:"layer.source(rasterData, {\n  parser: {\n    type: 'raster',\n    extent: [121.168, 30.2828, 121.384, 30.4219],\n  },\n});\n",paraId:6,tocIndex:2},{value:"用户可以直接传入栅格文件的二进制数据。",paraId:7,tocIndex:2},{value:"支持传入多文件的数据。",paraId:8,tocIndex:2},{value:"支持指定某个栅格文件要提取的波段。",paraId:8,tocIndex:2},{value:"interface IBandsData {\n  data: ArrayBuffer; // 请求加载的栅格文件的二进制数据\n  bands?: number[]; // 指定加载该栅格文件的波段\n}\n// 默认加载 0 波段的数据\nconst source = new Source({ data: tiffData });\n// 指定加载 tiffData 0 波段的数据\n// 指定加载 tiffData2 0、1 波段的数据\nconst source2 = new Source([\n  { data: tiffData, bands: [0] },\n  { data: tiffData2, bands: [0, 1] },\n]);\n",paraId:9,tocIndex:2},{value:" ",paraId:10,tocIndex:3},{value:"IParser",paraId:10,tocIndex:3},{value:" ",paraId:10,tocIndex:3},{value:"必选",paraId:10,tocIndex:3},{value:" ",paraId:10,tocIndex:3},{value:"为使用栅格数据的使用提供必要的参数和方法。",paraId:11,tocIndex:3},{value:"interface IParser {\n  type: string;\n  format: IRasterFormat;\n  operation: IOperation;\n  extent: number[];\n}\n",paraId:12,tocIndex:3},{value:" ",paraId:13,tocIndex:4},{value:"string",paraId:13,tocIndex:4},{value:" ",paraId:13,tocIndex:4},{value:"必选",paraId:13,tocIndex:4},{value:" ",paraId:13,tocIndex:4},{value:"输出结果为单通道数据的时候值为 raster",paraId:14,tocIndex:4},{value:"输出结果为多通道彩色的时候值为 rasterRgb",paraId:14,tocIndex:4},{value:" ",paraId:15,tocIndex:5},{value:"IFormat",paraId:15,tocIndex:5},{value:" ",paraId:15,tocIndex:5},{value:"必选",paraId:15,tocIndex:5},{value:" ",paraId:15,tocIndex:5},{value:"format",paraId:16,tocIndex:5},{value:" 方法用于从传入的栅格文件二进制数据中提取波段数据。",paraId:16,tocIndex:5},{value:"第一个参数是栅格文件二进制数据。",paraId:17,tocIndex:5},{value:"第二个参数是第一个参数指定的栅格文件中应该提取的波段，方法参数是我们通过 ",paraId:17,tocIndex:5},{value:"source",paraId:17,tocIndex:5},{value:" 参数传递的 ",paraId:17,tocIndex:5},{value:"data",paraId:17,tocIndex:5},{value:" 数值。",paraId:17,tocIndex:5},{value:"format",paraId:17,tocIndex:5},{value:" 是一个 ",paraId:17,tocIndex:5},{value:"async",paraId:17,tocIndex:5},{value:" 方法。",paraId:17,tocIndex:5},{value:"interface IRasterData {\n  rasterData: HTMLImageElement | Uint8Array | ImageBitmap | null | undefined;\n  width: number;\n  height: number;\n}\ntype IRasterFormat = (\n  data: ArrayBuffer,\n  bands: number[],\n) => Promise<IRasterData | IRasterData[]>;\n\nconst source = new Source(data, {\n  parser: {\n    format: async (data, bands) => {\n      ...\n      return {\n        rasterData: bandData,\n        width: 256;\n        height: 256;\n      }\n    }\n  }\n})\n",paraId:18,tocIndex:5},{value:"format",paraId:19,tocIndex:5},{value:" 方法的返回值为栅格数据（",paraId:19,tocIndex:5},{value:"rasterData",paraId:19,tocIndex:5},{value:"）以及表示大小的 ",paraId:19,tocIndex:5},{value:"width",paraId:19,tocIndex:5},{value:"、",paraId:19,tocIndex:5},{value:"height",paraId:19,tocIndex:5},{value:" 参数。",paraId:19,tocIndex:5},{value:"format",paraId:19,tocIndex:5},{value:" 方法可以返回多份数据，表示从当前栅格文件中提取多份波段的数据。",paraId:19,tocIndex:5},{value:" ",paraId:20,tocIndex:6},{value:"IOperation",paraId:20,tocIndex:6},{value:" ",paraId:20,tocIndex:6},{value:"可选",paraId:20,tocIndex:6},{value:" ",paraId:20,tocIndex:6},{value:"在加载多波段数据的时候我们可以通过 ",paraId:21,tocIndex:6},{value:"operation",paraId:21,tocIndex:6},{value:" 配置波段数据的运算。",paraId:21,tocIndex:6},{value:"🌟 我们可以不配置 ",paraId:22,tocIndex:6},{value:"operation",paraId:22,tocIndex:6},{value:"，此时默认使用第一个栅格文件提取的第一个波段数据",paraId:22,tocIndex:6},{value:"operation",paraId:23,tocIndex:6},{value:" 可以是一个函数，",paraId:23,tocIndex:6},{value:"allbands",paraId:23,tocIndex:6},{value:" 是我们从所有栅格文件中提取的所有波段数据的集合。",paraId:23,tocIndex:6},{value:"const parser = {\n  operation: (allBands) => {\n    // operation 可以是一个函数，allbands 是我们从所有栅格文件中提取的所有波段数据的集合，\n    // 在设立 allbands 就是 [band0]\n    // 函数的返回值是单纯的波段数据，在这里我们直接返回第一个波段的数据\n    return allBands[0].rasterData;\n  },\n};\n",paraId:24,tocIndex:6},{value:"operation",paraId:25,tocIndex:6},{value:" 可以是以数组形式存在的计算表达式.",paraId:25,tocIndex:6},{value:"// 下面表达式可以转述为 band1 * 0.5，表示将波段1 的值都乘上 0.5 并返回\nconst parser = {\n  operation: ['*', ['band', 1], 0.5],\n};\n",paraId:26,tocIndex:6},{value:"operation",paraId:27,tocIndex:6},{value:" 可以嵌套使用：",paraId:27,tocIndex:6},{value:"['+', ['*', ['band', 0], 0.2], ['band', 1]]]",paraId:27,tocIndex:6},{value:"，返回结果为：",paraId:27,tocIndex:6},{value:"band0 * 0.2 + band1",paraId:27,tocIndex:6},{value:"。",paraId:27,tocIndex:6},{value:"operation",paraId:28,tocIndex:6},{value:" 可以直接指定结果：",paraId:28,tocIndex:6},{value:"['band', 0]",paraId:28,tocIndex:6},{value:"。",paraId:28,tocIndex:6},{value:"operation",paraId:29,tocIndex:6},{value:" 支持以下的数学运算。",paraId:29,tocIndex:6},{value:"/** 数学运算 根据计算表达式进行数学运算\n * * * Math operators:\n * `['*', value1, value2]` 返回  `value1 * value2`\n * `['/', value1, value2]` 返回 `value1 / value2`\n * `['+', value1, value2]` 返回 `value1 + value2`\n * `['-', value1, value2]` 返回 `value2 - value1`\n * `['%', value1, value2]` 返回 `value1 % value2`\n * `['^', value1, value2]` 返回  `value1 ^ value2`\n * `['abs', value1]`       返回  `Math.abs(value1)`\n * `['floor', value1]`     返回  `Math.floor(value1)`\n * `['round', value1]`     返回  `Math.round(value1)`\n * `['ceil', value1]`      返回  `Math.ceil(value1)`\n * `['sin', value1]`       返回  `Math.sin(value1)`\n * `['cos', value1]`       返回  `Math.cos(value1)`\n * `['atan', value1, value2]` 返回  `n1===-1?Math.atan(n1): Math.atan2(n1, n2)`\n */\n",paraId:30,tocIndex:6},{value:" ",paraId:31,tocIndex:7},{value:"number[]",paraId:31,tocIndex:7},{value:" ",paraId:31,tocIndex:7},{value:"必选",paraId:31,tocIndex:7},{value:" ",paraId:31,tocIndex:7},{value:"extent",paraId:32,tocIndex:7},{value:" 描述的是栅格数据覆盖的地理区间，数值指定的是区域的经纬度区间（左下角和右上角）。",paraId:32,tocIndex:7},{value:"我们在使用多波段数据的时候支持根据多波段数据绘制彩色遥感影像，如下图的假彩色影像。",paraId:33,tocIndex:8},{value:"\n  ",paraId:34},{value:"\n    ",paraId:34},{value:"\n  ",paraId:34},{value:"绘制多通道影像的时候，需要加载多波段数据",paraId:35,tocIndex:9},{value:"使用栅格数据的使用提供必要的参数和方法， 具体使用和多波段栅格的 ",paraId:36,tocIndex:10},{value:"parser",paraId:36,tocIndex:10},{value:" 保持一致。",paraId:36,tocIndex:10},{value:" ",paraId:37,tocIndex:11},{value:"string",paraId:37,tocIndex:11},{value:" ",paraId:37,tocIndex:11},{value:"必选",paraId:37,tocIndex:11},{value:" ",paraId:37,tocIndex:11},{value:"输出结果为多通道彩色的时候值为 ",paraId:38,tocIndex:11},{value:"rasterRgb",paraId:38,tocIndex:11},{value:"。",paraId:38,tocIndex:11},{value:" ",paraId:39,tocIndex:12},{value:"IFormat",paraId:39,tocIndex:12},{value:" ",paraId:39,tocIndex:12},{value:"必选",paraId:39,tocIndex:12},{value:" ",paraId:39,tocIndex:12},{value:"绘制多通道影像的时候，使用通用的 ",paraId:40,tocIndex:12},{value:"format",paraId:40,tocIndex:12},{value:"函数。",paraId:40,tocIndex:12},{value:" ",paraId:41,tocIndex:13},{value:"IOperation",paraId:41,tocIndex:13},{value:" ",paraId:41,tocIndex:13},{value:"必选",paraId:41,tocIndex:13},{value:" ",paraId:41,tocIndex:13},{value:"为了绘制多通道影像，我们必须要提供 ",paraId:42,tocIndex:13},{value:"operation",paraId:42,tocIndex:13},{value:" 配置指定多通道数据。",paraId:42,tocIndex:13},{value:"在渲染彩色多通道栅格的时候需要额外使用 parser，同时彩色栅格图层不再支持 domain、rampColor 等参数，渲染的结果直接由波段计算出的 r、g、b 通道的数值结果控制。",paraId:43,tocIndex:13},{value:"彩色栅格不再兼容旧的数据传值方式（直接传入解析完的栅格数据。",paraId:44,tocIndex:13},{value:"const source = new Source(data, { // 彩色栅格和单通道栅格使用相同的规则\n  parser: {\n    type: 'rasterRgb', // 使用独立的 type 类型\n    format: async (data, bands) {...}, // 彩色栅格和单通道栅格 format 使用相同\n    // operation 为对象，分别为 rgb 三通道指定计算表达式\n    // operation 必须要配置\n    operation: {\n      r: ['*', ['band', 1], 0.5],\n      g: ['band', 1],\n      b: undefined // 缺省配置表达式的通道会默认取 0 号波段的值\n    }\n  }\n",paraId:45,tocIndex:13}]},67665:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(28274);const d=[{value:"raster-ndi(Normalized Difference Indices) source 是将多波段数据进行归一化指数计算，比如计算NDVI/NDWI 等指数，",paraId:0},{value:"data 数据",paraId:1},{value:"option 配置项\n",paraId:1},{value:"parser 数据解析参数\n",paraId:2},{value:"type 解析类型 ",paraId:3},{value:"ndi",paraId:3},{value:"layer.source(bandsValues, {\n  parser: {\n    type: 'ndi',\n    width: bandsValues.width,\n    height: bandsValues.height,\n    bands: [4, 3], // 从零开始\n    extent: [130.39565357746957, 46.905730725742366, 130.73364094187343, 47.10217234153133],\n  },\n});\n",paraId:4},{value:"type RasterDataType =\n  | Uint8Array\n  | Int8Array\n  | Uint16Array\n  | Int16Array\n  | Uint32Array\n  | Int32Array\n  | Float32Array\n  | Float64Array;\n",paraId:5,tocIndex:0},{value:"data 为数组类型 ",paraId:6,tocIndex:0},{value:"RasterDataType[]",paraId:6,tocIndex:0},{value:"如果是多波段 Tiff 可以直接使用geotiff,js 读取所有波段，",paraId:7,tocIndex:0},{value:"如果是单文件单波段数据，需要单独读取并合并成一个数据。",paraId:7,tocIndex:0},{value:"单文件多波段读取示例",paraId:8,tocIndex:0},{value:"async function getTiffData(url: string) {\n  const response = await fetch(url);\n  const arrayBuffer = await response.arrayBuffer();\n  const tiff = await GeoTIFF.fromArrayBuffer(arrayBuffer);\n  const image1 = await tiff.getImage();\n  const bandsValues = await image1.readRasters();\n  return bandsValues;\n}\n",paraId:9,tocIndex:0},{value:"type 解析类型 'rgb' ",paraId:10,tocIndex:1},{value:"必选",paraId:10,tocIndex:1},{value:"bands ",paraId:11,tocIndex:1},{value:"[number,number] 指定需要归一化的波段,data 数组长度需要大于等于 2  ",paraId:11,tocIndex:1},{value:"必选`",paraId:11,tocIndex:1},{value:"注：bands 序号从零开始（landsat 8 里的 5，4, 波段这样要设置为 4,3）",paraId:12,tocIndex:1},{value:"width 长度 ",paraId:13,tocIndex:1},{value:"必选",paraId:13,tocIndex:1},{value:"height 宽度 ",paraId:14,tocIndex:1},{value:"必选",paraId:14,tocIndex:1},{value:"Raster ndi",paraId:15}]},26916:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(48889);const d=[{value:"raster-rgb source 是将多波段数据合成 RGB数据进行展示，如对 LandSat8 数据我们可以按照 5,4,3 或者 4,3,2 波段进行RGB组合显示",paraId:0},{value:"data 数据",paraId:1},{value:"option 配置项\n",paraId:1},{value:"parser 数据解析参数\n",paraId:2},{value:"type 解析类型 ",paraId:3},{value:"rgb",paraId:3},{value:"layer.source(bandsValues, {\n  parser: {\n    type: 'rgb',\n    width: bandsValues.width,\n    height: bandsValues.height,\n    bands: [4, 3, 2], // 从零开始\n    extent: [130.39565357746957, 46.905730725742366, 130.73364094187343, 47.10217234153133],\n  },\n});\n",paraId:4},{value:"type RasterDataType =\n  | Uint8Array\n  | Int8Array\n  | Uint16Array\n  | Int16Array\n  | Uint32Array\n  | Int32Array\n  | Float32Array\n  | Float64Array;\n",paraId:5,tocIndex:0},{value:"data 为数组类型 ",paraId:6,tocIndex:0},{value:"RasterDataType[]",paraId:6,tocIndex:0},{value:"如果是多波段 Tiff 可以直接使用geotiff,js 读取所有波段，",paraId:7,tocIndex:0},{value:"如果是单文件单波段数据，需要单独读取并合并成一个数据。",paraId:7,tocIndex:0},{value:"单文件多波段读取示例",paraId:8,tocIndex:0},{value:"async function getTiffData(url: string) {\n  const response = await fetch(url);\n  const arrayBuffer = await response.arrayBuffer();\n  const tiff = await GeoTIFF.fromArrayBuffer(arrayBuffer);\n  const image1 = await tiff.getImage();\n  const bandsValues = await image1.readRasters();\n  return bandsValues;\n}\n",paraId:9,tocIndex:0},{value:"type 解析类型 'rgb' ",paraId:10,tocIndex:1},{value:"必选",paraId:10,tocIndex:1},{value:"bands ",paraId:11,tocIndex:1},{value:"[number,number,number] 指定 R/G/B 通道对应的数据索引,data 数组长度需要大于等于 3  ",paraId:11,tocIndex:1},{value:"必选`",paraId:11,tocIndex:1},{value:"注：bands 序号从零开始（landsat 8 里的 5，4,3 波段这样要设置为 4,3, 2）",paraId:12,tocIndex:1},{value:"width 长度 ",paraId:13,tocIndex:1},{value:"必选",paraId:13,tocIndex:1},{value:"height 宽度 ",paraId:14,tocIndex:1},{value:"必选",paraId:14,tocIndex:1},{value:"countCut 颜色拉伸参数 ",paraId:15,tocIndex:1},{value:"[number,number]",paraId:15,tocIndex:1},{value:" 数值为百分比，默认值 ",paraId:15,tocIndex:1},{value:"[2,98]",paraId:15,tocIndex:1},{value:" ",paraId:15,tocIndex:1},{value:"可选",paraId:15,tocIndex:1},{value:"Raster RGB",paraId:16}]},4501:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(91378);const d=[{value:"瓦片数据集，可以获取当前视野内的瓦片信息, 瓦片状态",paraId:0,tocIndex:1},{value:"const source = layer1.getSource();\nconst tileSet = source.tileset;\n",paraId:1,tocIndex:1},{value:"瓦片是否加载完成",paraId:2,tocIndex:3},{value:"当前瓦片对象",paraId:3,tocIndex:4},{value:"当前瓦片层级；这里的曾经和map 的缩放层级不相等",paraId:4,tocIndex:5},{value:"地图拖动，需要加载新的瓦片时触发",paraId:5,tocIndex:7},{value:"tileSet.on('tiles-load-start', () => {\n  console.log('tile start');\n});\n",paraId:6,tocIndex:7},{value:"所有需要加载的瓦片资源加载完成后触发",paraId:7,tocIndex:8},{value:"tileSet.on('tiles-load-finished', () => {\n  console.log('tile finished');\n});\n",paraId:8,tocIndex:8},{value:"重新加载瓦片，会重新请求数据，适用与动态瓦片场景，如瓦片数据发生了更新，或者瓦片Join 的数据发生了更新",paraId:9,tocIndex:10},{value:"source.reloadAllTile();\n",paraId:10,tocIndex:10},{value:"重新加载特定瓦片的",paraId:11,tocIndex:11},{value:"参数",paraId:12,tocIndex:11},{value:"z 缩放等级",paraId:13,tocIndex:11},{value:"x 瓦片 x 坐标",paraId:13,tocIndex:11},{value:"y 瓦片 y 坐标",paraId:13,tocIndex:11},{value:"source.reloadTileById(z, x, y);\n",paraId:14,tocIndex:11},{value:"根据经纬度范围更新瓦片",paraId:15,tocIndex:12},{value:"参数",paraId:16,tocIndex:12},{value:"extent: 经纬范围 [minLng, minLat, maxLng, maxLat]",paraId:17,tocIndex:12},{value:"zoom: 缩放等级",paraId:17,tocIndex:12},{value:"根据经纬度更新瓦片，经纬度坐标转换成瓦片坐标更新",paraId:18,tocIndex:13},{value:"lng 经度",paraId:19,tocIndex:13},{value:"lat 纬度",paraId:19,tocIndex:13},{value:"zoom 缩放等级",paraId:19,tocIndex:13},{value:"source.reloadTileByLnglat(112, 30, 10);\n",paraId:20,tocIndex:13}]},79488:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(40435);const d=[{value:"L7 中的 Component 主要包含以下三种类型：",paraId:0},{value:"Control 控件类型",paraId:1},{value:"：指的是悬停在地图四周，可以对地图以及图层等元素进行信息呈现或交互的组件。",paraId:2},{value:"Popup 气泡类型",paraId:3},{value:"：用于在地图上指定经纬度位置展示气泡，气泡内容完全交由开发者自定义。",paraId:2},{value:"Marker 类型",paraId:4},{value:"：与 Popup 相似，不同的是 Marker 展示的内容不会在气泡内展示，而是完全交由开发者自定义。",paraId:2}]},58562:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(61185);const d=[{value:"地图控件指的是悬停在地图四周，可以对地图以及图层等元素进行",paraId:0},{value:"信息呈现",paraId:0},{value:"或",paraId:0},{value:"交互",paraId:0},{value:"的组件。",paraId:0},{value:"import { Scene, Zoom } from '@antv/l7';\n\nconst scene = new Scene({\n  // ...\n});\n\nscene.on('loaded', () => {\n  // 实例化 Zoom 控件，可以在构造器中传入控件的配置\n  const zoom = new Zoom({\n    position: 'leftbottom',\n    className: 'my-test-class',\n  });\n\n  // 将实例化的控件添加至 L7 中\n  scene.addControl(zoom);\n});\n",paraId:1,tocIndex:0},{value:"在控件实例化之后，如果需要更新配置，可以调用控件实例的 ",paraId:2,tocIndex:1},{value:"setOptions",paraId:2,tocIndex:1},{value:" 方法，同时传入需要更新的配置对象即可。",paraId:2,tocIndex:1},{value:"const zoom = new Zoom({\n  position: 'leftbottom',\n});\n\nconst onPositionChange = () => {\n  // 通过 setOptions 传入需要更新的配置对象\n  zoom.setOptions({\n    position: 'topright',\n  });\n};\n",paraId:3,tocIndex:1},{value:"当前 L7 中的控件支持插入到地图的",paraId:4,tocIndex:2},{value:"左上、左下、右上、右下、上、左、下、右",paraId:4,tocIndex:2},{value:"八个位置插槽或者用户自定义的 ",paraId:4,tocIndex:2},{value:"DOM",paraId:4,tocIndex:2},{value:" 中，并且在同一地图插槽中，多个控件之间支持",paraId:4,tocIndex:2},{value:"横向",paraId:4,tocIndex:2},{value:"和",paraId:4,tocIndex:2},{value:"纵向",paraId:4,tocIndex:2},{value:"排列。",paraId:4,tocIndex:2},{value:"在初始化所有的控件类时，可以传入 ",paraId:5,tocIndex:2},{value:"position",paraId:5,tocIndex:2},{value:" 参数来设置控件对应的插槽以及排列方式。",paraId:5,tocIndex:2},{value:"名称",paraId:6,tocIndex:3},{value:"说明",paraId:6,tocIndex:3},{value:"类型",paraId:6,tocIndex:3},{value:"position",paraId:6,tocIndex:3},{value:"控件被添加到地图中的位置以及排列方式，详情可见 ",paraId:6,tocIndex:3},{value:"控件插槽",paraId:7,tocIndex:3},{value:"Position",paraId:8,tocIndex:3},{value:"className",paraId:6,tocIndex:3},{value:"自定义样式名",paraId:6,tocIndex:3},{value:"string",paraId:6,tocIndex:3},{value:"style",paraId:6,tocIndex:3},{value:"自定义样式",paraId:6,tocIndex:3},{value:"string",paraId:6,tocIndex:3},{value:"export type Position =\n  | 'topleft' // ↖ 左上角，纵向排列\n  | 'lefttop' // ↖ 左上角，横向排列\n  | 'topright' // ↗ 右上角，纵向排列\n  | 'righttop' // ↗ 右上角，横向排列\n  | 'bottomleft' // ↙ 左下角，纵向排列\n  | 'leftbottom' // ↙ 左下角，横向排列\n  | 'bottomright' // ↘ 右下角，纵向排列\n  | 'rightbottom' // ↘ 右下角，横向排列\n  | 'topcenter' // ↑ 上方中央，横向排列\n  | 'bottomcenter' // ↓ 下方中间，横向排列\n  | 'leftcenter' // ← 左边中间，纵向排列\n  | 'rightcenter' // → 右边中间，纵向排列\n  | Element; // 传入 DOM 作为当前控件的容器\n",paraId:9,tocIndex:4},{value:"名称",paraId:10,tocIndex:5},{value:"说明",paraId:10,tocIndex:5},{value:"类型",paraId:10,tocIndex:5},{value:"setOptions",paraId:10,tocIndex:5},{value:"更新配置，参数需要参考对应组件的",paraId:10,tocIndex:5},{value:"配置",paraId:11,tocIndex:5},{value:"(newOption: Partial<Option>) => void",paraId:10,tocIndex:5},{value:"getOptions",paraId:10,tocIndex:5},{value:"获取当前",paraId:10,tocIndex:5},{value:"配置",paraId:12,tocIndex:5},{value:"() => Option",paraId:10,tocIndex:5},{value:"show",paraId:10,tocIndex:5},{value:"显示组件",paraId:10,tocIndex:5},{value:"() => void",paraId:10,tocIndex:5},{value:"hide",paraId:10,tocIndex:5},{value:"隐藏组件",paraId:10,tocIndex:5},{value:"() => void",paraId:10,tocIndex:5},{value:"getContainer",paraId:10,tocIndex:5},{value:"获取当前控件对应的 ",paraId:10,tocIndex:5},{value:"DOM",paraId:10,tocIndex:5},{value:" 容器",paraId:10,tocIndex:5},{value:"() => HTMLElement",paraId:10,tocIndex:5},{value:"名称",paraId:13,tocIndex:6},{value:"说明",paraId:13,tocIndex:6},{value:"类型",paraId:13,tocIndex:6},{value:"add",paraId:13,tocIndex:6},{value:"组件被添加时的事件",paraId:13,tocIndex:6},{value:"(this) => void",paraId:13,tocIndex:6},{value:"remove",paraId:13,tocIndex:6},{value:"组件被移除时的事件",paraId:13,tocIndex:6},{value:"(this) => void",paraId:13,tocIndex:6},{value:"show",paraId:13,tocIndex:6},{value:"组件显示时的事件",paraId:13,tocIndex:6},{value:"(this) => void",paraId:13,tocIndex:6},{value:"hide",paraId:13,tocIndex:6},{value:"组件隐藏时的事件",paraId:13,tocIndex:6},{value:"(this) => void",paraId:13,tocIndex:6}]},19036:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(72259);const d=[{value:"对当前地图部分进行截图并生成图片的 ",paraId:0},{value:"Base64",paraId:0},{value:" 字符串。",paraId:0},{value:"示例",paraId:1},{value:"截图时被截取的目标仅包含：",paraId:2},{value:"地图底图",paraId:3},{value:"图层（不包含 MarkerLayer）",paraId:3},{value:"注意：由于当前地图底图对应 ",paraId:4},{value:"Canvas",paraId:4},{value:" 默认开启了缓冲区，导致默认情况下无法截取到地图底图部分。",paraId:4},{value:"因此若开发者需要完整的截图能力，则应当在初始化地图实例时传递以下参数以关闭 ",paraId:5},{value:"Canvas",paraId:5},{value:" 缓冲区。",paraId:5},{value:"new GaodeMapV2({\n  WebGLParams: {\n    preserveDrawingBuffer: true,\n  },\n});\n\nnew Mapbox({\n  preserveDrawingBuffer: true,\n});\n",paraId:6},{value:"import { Scene, ExportImage } from '@antv/l7';\n\nconst scene = new Scene({\n  id: 'map',\n  map: new GaodeMapV2({\n    // 关闭地图缓冲区，否则截图时无法截取到地图部分\n    WebGLParams: {\n      preserveDrawingBuffer: true,\n    },\n  }),\n});\n\nscene.on('loaded', () => {\n  const zoom = new ExportImage({\n    onExport: (base64: string) => {\n      // download(base64)\n    },\n  });\n  scene.addControl(zoom);\n});\n",paraId:7,tocIndex:1},{value:"名称",paraId:8,tocIndex:2},{value:"说明",paraId:8,tocIndex:2},{value:"类型",paraId:8,tocIndex:2},{value:"imageType",paraId:8,tocIndex:2},{value:"截图图片的格式",paraId:8,tocIndex:2},{value:"'png'",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"'jpeg'",paraId:8,tocIndex:2},{value:"onExport",paraId:8,tocIndex:2},{value:"截图成功后，用于接收图片 ",paraId:8,tocIndex:2},{value:"Base64",paraId:8,tocIndex:2},{value:" 字符串的回调函数",paraId:8,tocIndex:2},{value:"(base64: string) => void",paraId:8,tocIndex:2},{value:"名称",paraId:9,tocIndex:2},{value:"说明",paraId:9,tocIndex:2},{value:"类型",paraId:9,tocIndex:2},{value:"btnIcon",paraId:9,tocIndex:2},{value:"按钮图标",paraId:9,tocIndex:2},{value:"HTMLElement",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"SVGElement",paraId:9,tocIndex:2},{value:"btnText",paraId:9,tocIndex:2},{value:"按钮内容文本",paraId:9,tocIndex:2},{value:"string",paraId:9,tocIndex:2},{value:"title",paraId:9,tocIndex:2},{value:"按钮的 ",paraId:9,tocIndex:2},{value:"title",paraId:9,tocIndex:2},{value:" 属性",paraId:9,tocIndex:2},{value:"string",paraId:9,tocIndex:2},{value:"vertical",paraId:9,tocIndex:2},{value:"在 btnIcon 有值的情况下，按钮内的图标和文案是否纵向排列",paraId:9,tocIndex:2},{value:"boolean",paraId:9,tocIndex:2},{value:"名称",paraId:10,tocIndex:2},{value:"说明",paraId:10,tocIndex:2},{value:"类型",paraId:10,tocIndex:2},{value:"position",paraId:10,tocIndex:2},{value:"控件被添加到地图中的位置以及排列方式，详情可见 ",paraId:10,tocIndex:2},{value:"控件插槽",paraId:11,tocIndex:2},{value:"Position",paraId:12,tocIndex:2},{value:"className",paraId:10,tocIndex:2},{value:"自定义样式名",paraId:10,tocIndex:2},{value:"string",paraId:10,tocIndex:2},{value:"style",paraId:10,tocIndex:2},{value:"自定义样式",paraId:10,tocIndex:2},{value:"string",paraId:10,tocIndex:2},{value:"export type Position =\n  | 'topleft' // ↖ 左上角，纵向排列\n  | 'lefttop' // ↖ 左上角，横向排列\n  | 'topright' // ↗ 右上角，纵向排列\n  | 'righttop' // ↗ 右上角，横向排列\n  | 'bottomleft' // ↙ 左下角，纵向排列\n  | 'leftbottom' // ↙ 左下角，横向排列\n  | 'bottomright' // ↘ 右下角，纵向排列\n  | 'rightbottom' // ↘ 右下角，横向排列\n  | 'topcenter' // ↑ 上方中央，横向排列\n  | 'bottomcenter' // ↓ 下方中间，横向排列\n  | 'leftcenter' // ← 左边中间，纵向排列\n  | 'rightcenter' // → 右边中间，纵向排列\n  | Element; // 传入 DOM 作为当前控件的容器\n",paraId:13,tocIndex:3},{value:"名称",paraId:14,tocIndex:4},{value:"说明",paraId:14,tocIndex:4},{value:"类型",paraId:14,tocIndex:4},{value:"getImage",paraId:14,tocIndex:4},{value:"获取截图的 Base64 字符串",paraId:14,tocIndex:4},{value:"() => Promise<string>",paraId:14,tocIndex:4},{value:"名称",paraId:15,tocIndex:4},{value:"说明",paraId:15,tocIndex:4},{value:"类型",paraId:15,tocIndex:4},{value:"setOptions",paraId:15,tocIndex:4},{value:"更新配置，参数需要参考对应组件的",paraId:15,tocIndex:4},{value:"配置",paraId:16,tocIndex:4},{value:"(newOption: Partial<Option>) => void",paraId:15,tocIndex:4},{value:"getOptions",paraId:15,tocIndex:4},{value:"获取当前",paraId:15,tocIndex:4},{value:"配置",paraId:17,tocIndex:4},{value:"() => Option",paraId:15,tocIndex:4},{value:"show",paraId:15,tocIndex:4},{value:"显示组件",paraId:15,tocIndex:4},{value:"() => void",paraId:15,tocIndex:4},{value:"hide",paraId:15,tocIndex:4},{value:"隐藏组件",paraId:15,tocIndex:4},{value:"() => void",paraId:15,tocIndex:4},{value:"getContainer",paraId:15,tocIndex:4},{value:"获取当前控件对应的 ",paraId:15,tocIndex:4},{value:"DOM",paraId:15,tocIndex:4},{value:" 容器",paraId:15,tocIndex:4},{value:"() => HTMLElement",paraId:15,tocIndex:4},{value:"名称",paraId:18,tocIndex:5},{value:"说明",paraId:18,tocIndex:5},{value:"类型",paraId:18,tocIndex:5},{value:"add",paraId:18,tocIndex:5},{value:"组件被添加时的事件",paraId:18,tocIndex:5},{value:"(this) => void",paraId:18,tocIndex:5},{value:"remove",paraId:18,tocIndex:5},{value:"组件被移除时的事件",paraId:18,tocIndex:5},{value:"(this) => void",paraId:18,tocIndex:5},{value:"show",paraId:18,tocIndex:5},{value:"组件显示时的事件",paraId:18,tocIndex:5},{value:"(this) => void",paraId:18,tocIndex:5},{value:"hide",paraId:18,tocIndex:5},{value:"组件隐藏时的事件",paraId:18,tocIndex:5},{value:"(this) => void",paraId:18,tocIndex:5}]},55304:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(60455);const d=[{value:"用于控制地图区域的",paraId:0},{value:"全屏",paraId:0},{value:"和",paraId:0},{value:"退出全屏",paraId:0},{value:"的控制按钮控件。",paraId:0},{value:"示例",paraId:1},{value:"import { Scene, Fullscreen } from '@antv/l7';\n\nconst scene = new Scene({\n  // ...\n});\n\nscene.on('loaded', () => {\n  const fullscreen = new Fullscreen({\n    btnText: '全屏',\n    exitBtnText: '退出全屏',\n  });\n  scene.addControl(fullscreen);\n});\n",paraId:2},{value:"名称",paraId:3,tocIndex:1},{value:"说明",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"btnIcon",paraId:3,tocIndex:1},{value:"按钮图标",paraId:3,tocIndex:1},{value:"HTMLElement",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"SVGElement",paraId:3,tocIndex:1},{value:"btnText",paraId:3,tocIndex:1},{value:"按钮内容文本",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:"title",paraId:3,tocIndex:1},{value:"按钮的 ",paraId:3,tocIndex:1},{value:"title",paraId:3,tocIndex:1},{value:" 属性",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:"vertical",paraId:3,tocIndex:1},{value:"在 btnIcon 有值的情况下，按钮内的图标和文案是否纵向排列",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"名称",paraId:4,tocIndex:1},{value:"说明",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"exitBtnIcon",paraId:4,tocIndex:1},{value:"退出全屏按钮的图标",paraId:4,tocIndex:1},{value:"HTMLElement",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"SVGElement",paraId:4,tocIndex:1},{value:"exitBtnText",paraId:4,tocIndex:1},{value:"退出全屏按钮的文本",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:"exitTitle",paraId:4,tocIndex:1},{value:"退出全屏按钮的文本的 ",paraId:4,tocIndex:1},{value:"title",paraId:4,tocIndex:1},{value:" 属性",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:"名称",paraId:5,tocIndex:1},{value:"说明",paraId:5,tocIndex:1},{value:"类型",paraId:5,tocIndex:1},{value:"position",paraId:5,tocIndex:1},{value:"控件被添加到地图中的位置以及排列方式，详情可见 ",paraId:5,tocIndex:1},{value:"控件插槽",paraId:6,tocIndex:1},{value:"Position",paraId:7,tocIndex:1},{value:"className",paraId:5,tocIndex:1},{value:"自定义样式名",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:"style",paraId:5,tocIndex:1},{value:"自定义样式",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:"export type Position =\n  | 'topleft' // ↖ 左上角，纵向排列\n  | 'lefttop' // ↖ 左上角，横向排列\n  | 'topright' // ↗ 右上角，纵向排列\n  | 'righttop' // ↗ 右上角，横向排列\n  | 'bottomleft' // ↙ 左下角，纵向排列\n  | 'leftbottom' // ↙ 左下角，横向排列\n  | 'bottomright' // ↘ 右下角，纵向排列\n  | 'rightbottom' // ↘ 右下角，横向排列\n  | 'topcenter' // ↑ 上方中央，横向排列\n  | 'bottomcenter' // ↓ 下方中间，横向排列\n  | 'leftcenter' // ← 左边中间，纵向排列\n  | 'rightcenter' // → 右边中间，纵向排列\n  | Element; // 传入 DOM 作为当前控件的容器\n",paraId:8,tocIndex:2},{value:"名称",paraId:9,tocIndex:3},{value:"说明",paraId:9,tocIndex:3},{value:"类型",paraId:9,tocIndex:3},{value:"toggleFullscreen",paraId:9,tocIndex:3},{value:"进入/退出全屏地图部分的全屏状态",paraId:9,tocIndex:3},{value:"() => void",paraId:9,tocIndex:3},{value:"名称",paraId:10,tocIndex:3},{value:"说明",paraId:10,tocIndex:3},{value:"类型",paraId:10,tocIndex:3},{value:"setOptions",paraId:10,tocIndex:3},{value:"更新配置，参数需要参考对应组件的",paraId:10,tocIndex:3},{value:"配置",paraId:11,tocIndex:3},{value:"(newOption: Partial<Option>) => void",paraId:10,tocIndex:3},{value:"getOptions",paraId:10,tocIndex:3},{value:"获取当前",paraId:10,tocIndex:3},{value:"配置",paraId:12,tocIndex:3},{value:"() => Option",paraId:10,tocIndex:3},{value:"show",paraId:10,tocIndex:3},{value:"显示组件",paraId:10,tocIndex:3},{value:"() => void",paraId:10,tocIndex:3},{value:"hide",paraId:10,tocIndex:3},{value:"隐藏组件",paraId:10,tocIndex:3},{value:"() => void",paraId:10,tocIndex:3},{value:"getContainer",paraId:10,tocIndex:3},{value:"获取当前控件对应的 ",paraId:10,tocIndex:3},{value:"DOM",paraId:10,tocIndex:3},{value:" 容器",paraId:10,tocIndex:3},{value:"() => HTMLElement",paraId:10,tocIndex:3},{value:"名称",paraId:13,tocIndex:4},{value:"说明",paraId:13,tocIndex:4},{value:"类型",paraId:13,tocIndex:4},{value:"fullscreenChange",paraId:13,tocIndex:4},{value:"当全屏状态发生变化时触发",paraId:13,tocIndex:4},{value:"(isFullscreen: boolean) => void",paraId:13,tocIndex:4},{value:"名称",paraId:14,tocIndex:4},{value:"说明",paraId:14,tocIndex:4},{value:"类型",paraId:14,tocIndex:4},{value:"add",paraId:14,tocIndex:4},{value:"组件被添加时的事件",paraId:14,tocIndex:4},{value:"(this) => void",paraId:14,tocIndex:4},{value:"remove",paraId:14,tocIndex:4},{value:"组件被移除时的事件",paraId:14,tocIndex:4},{value:"(this) => void",paraId:14,tocIndex:4},{value:"show",paraId:14,tocIndex:4},{value:"组件显示时的事件",paraId:14,tocIndex:4},{value:"(this) => void",paraId:14,tocIndex:4},{value:"hide",paraId:14,tocIndex:4},{value:"组件隐藏时的事件",paraId:14,tocIndex:4},{value:"(this) => void",paraId:14,tocIndex:4}]},65358:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(73894);const d=[{value:"使用浏览器环境的 ",paraId:0},{value:"nagigator",paraId:0},{value:" 的 ",paraId:0},{value:"getlocation",paraId:0},{value:" 方法，使用浏览器打开位置感应能力获取当前用户所在经纬度。",paraId:0},{value:"示例",paraId:1},{value:"注意：",paraId:2},{value:"在使用该能力时，会需要用户对浏览器打开位置感知能力进行鉴权。",paraId:3},{value:"当前浏览器获取到的坐标是 ",paraId:3},{value:"WGS84",paraId:3},{value:" 地理坐标系，在高德地图上使用会有偏差，可以使用 ",paraId:3},{value:"transform",paraId:3},{value:" 配置进行坐标系的转换。",paraId:3},{value:"import { Scene, GeoLocate } from '@antv/l7';\nimport gcoord from 'gcoord';\n\nconst scene = new Scene({\n  // ...\n});\n\nscene.on('loaded', () => {\n  const geoLocate = new GeoLocate({\n    transform: (position) => {\n      // 将获取到基于 WGS84 地理坐标系 的坐标转成 GCJ02 坐标系\n      return gcoord.transform(position, gcoord.WGS84, gcoord.GCJ02);\n    },\n  });\n  scene.addControl(geoLocate);\n});\n",paraId:4,tocIndex:1},{value:"名称",paraId:5,tocIndex:2},{value:"说明",paraId:5,tocIndex:2},{value:"类型",paraId:5,tocIndex:2},{value:"transform",paraId:5,tocIndex:2},{value:"格式化通过 ",paraId:5,tocIndex:2},{value:"getlocation",paraId:5,tocIndex:2},{value:" 获取到的经纬度的函数，可以用于地理坐标系的转换",paraId:5,tocIndex:2},{value:"(position: [number, number]) => [number, number]",paraId:5,tocIndex:2},{value:"名称",paraId:6,tocIndex:2},{value:"说明",paraId:6,tocIndex:2},{value:"类型",paraId:6,tocIndex:2},{value:"btnIcon",paraId:6,tocIndex:2},{value:"按钮图标",paraId:6,tocIndex:2},{value:"HTMLElement",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"SVGElement",paraId:6,tocIndex:2},{value:"btnText",paraId:6,tocIndex:2},{value:"按钮内容文本",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:"title",paraId:6,tocIndex:2},{value:"按钮的 ",paraId:6,tocIndex:2},{value:"title",paraId:6,tocIndex:2},{value:" 属性",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:"vertical",paraId:6,tocIndex:2},{value:"在 btnIcon 有值的情况下，按钮内的图标和文案是否纵向排列",paraId:6,tocIndex:2},{value:"boolean",paraId:6,tocIndex:2},{value:"名称",paraId:7,tocIndex:2},{value:"说明",paraId:7,tocIndex:2},{value:"类型",paraId:7,tocIndex:2},{value:"position",paraId:7,tocIndex:2},{value:"控件被添加到地图中的位置以及排列方式，详情可见 ",paraId:7,tocIndex:2},{value:"控件插槽",paraId:8,tocIndex:2},{value:"Position",paraId:9,tocIndex:2},{value:"className",paraId:7,tocIndex:2},{value:"自定义样式名",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:"style",paraId:7,tocIndex:2},{value:"自定义样式",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:"export type Position =\n  | 'topleft' // ↖ 左上角，纵向排列\n  | 'lefttop' // ↖ 左上角，横向排列\n  | 'topright' // ↗ 右上角，纵向排列\n  | 'righttop' // ↗ 右上角，横向排列\n  | 'bottomleft' // ↙ 左下角，纵向排列\n  | 'leftbottom' // ↙ 左下角，横向排列\n  | 'bottomright' // ↘ 右下角，纵向排列\n  | 'rightbottom' // ↘ 右下角，横向排列\n  | 'topcenter' // ↑ 上方中央，横向排列\n  | 'bottomcenter' // ↓ 下方中间，横向排列\n  | 'leftcenter' // ← 左边中间，纵向排列\n  | 'rightcenter' // → 右边中间，纵向排列\n  | Element; // 传入 DOM 作为当前控件的容器\n",paraId:10,tocIndex:3},{value:"名称",paraId:11,tocIndex:4},{value:"说明",paraId:11,tocIndex:4},{value:"类型",paraId:11,tocIndex:4},{value:"getGeoLocation",paraId:11,tocIndex:4},{value:"获取当前用户所在经纬度",paraId:11,tocIndex:4},{value:"() => Promise<[number, number]>",paraId:11,tocIndex:4},{value:"名称",paraId:12,tocIndex:4},{value:"说明",paraId:12,tocIndex:4},{value:"类型",paraId:12,tocIndex:4},{value:"setOptions",paraId:12,tocIndex:4},{value:"更新配置，参数需要参考对应组件的",paraId:12,tocIndex:4},{value:"配置",paraId:13,tocIndex:4},{value:"(newOption: Partial<Option>) => void",paraId:12,tocIndex:4},{value:"getOptions",paraId:12,tocIndex:4},{value:"获取当前",paraId:12,tocIndex:4},{value:"配置",paraId:14,tocIndex:4},{value:"() => Option",paraId:12,tocIndex:4},{value:"show",paraId:12,tocIndex:4},{value:"显示组件",paraId:12,tocIndex:4},{value:"() => void",paraId:12,tocIndex:4},{value:"hide",paraId:12,tocIndex:4},{value:"隐藏组件",paraId:12,tocIndex:4},{value:"() => void",paraId:12,tocIndex:4},{value:"getContainer",paraId:12,tocIndex:4},{value:"获取当前控件对应的 ",paraId:12,tocIndex:4},{value:"DOM",paraId:12,tocIndex:4},{value:" 容器",paraId:12,tocIndex:4},{value:"() => HTMLElement",paraId:12,tocIndex:4},{value:"名称",paraId:15,tocIndex:5},{value:"说明",paraId:15,tocIndex:5},{value:"类型",paraId:15,tocIndex:5},{value:"add",paraId:15,tocIndex:5},{value:"组件被添加时的事件",paraId:15,tocIndex:5},{value:"(this) => void",paraId:15,tocIndex:5},{value:"remove",paraId:15,tocIndex:5},{value:"组件被移除时的事件",paraId:15,tocIndex:5},{value:"(this) => void",paraId:15,tocIndex:5},{value:"show",paraId:15,tocIndex:5},{value:"组件显示时的事件",paraId:15,tocIndex:5},{value:"(this) => void",paraId:15,tocIndex:5},{value:"hide",paraId:15,tocIndex:5},{value:"组件隐藏时的事件",paraId:15,tocIndex:5},{value:"(this) => void",paraId:15,tocIndex:5}]},4166:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(10507);const d=[{value:"LayerPopup 基于 Popup 封装的，专门用于展示图层元素信息的气泡。",paraId:0},{value:"LayerPopup 是为了让开发者通过配置快速生成用于展示图层信息的气泡，开发者可以传入需要展示信息气泡的图层，以及需要展示的字段。",paraId:1,tocIndex:0},{value:"LayerPopup 会自行对目标图层的鼠标事件进行监听，当用户点击/悬停在目标图层的某一元素上时，会自动打开 Popup 并展示该元素的字段值。",paraId:2,tocIndex:0},{value:"示例",paraId:3,tocIndex:1},{value:"自定义内容示例",paraId:4,tocIndex:1},{value:"import { Scene, LayerPopup, PointLayer } from '@antv/l7';\n\nconst scene = new Scene({\n  id: 'map',\n  map: new GaodeMapV2({\n    // ...\n  }),\n});\n\nscene.on('loaded', () => {\n  const pointLayer = new PointLayer();\n  pointLayer.source(\n    [\n      {\n        lng: 120,\n        lat: 30,\n        name: 'Test 1',\n      },\n    ],\n    {\n      parser: {\n        type: 'json',\n        x: 'lng',\n        y: 'lat',\n      },\n    },\n  );\n  scene.addLayer(pointLayer);\n  const layerPopup = new LayerPopup({\n    items: [\n      {\n        layer: pointLayer,\n        fields: [\n          {\n            field: 'name',\n            formatValue: (name?: string) => name.trim() ?? '-',\n          },\n        ],\n      },\n    ],\n    trigger: 'hover',\n  });\n  scene.addPopup(popup);\n});\n",paraId:5,tocIndex:1},{value:"名称",paraId:6,tocIndex:2},{value:"说明",paraId:6,tocIndex:2},{value:"类型",paraId:6,tocIndex:2},{value:"默认值",paraId:6,tocIndex:2},{value:"items",paraId:6,tocIndex:2},{value:"需要展示 Popup 的图层配置数组，每个选项类型可见 ",paraId:6,tocIndex:2},{value:"LayerPopupConfigItem",paraId:7,tocIndex:2},{value:"Array<LayerPopupConfigItem>",paraId:6,tocIndex:2},{value:"[]",paraId:6,tocIndex:2},{value:"trigger",paraId:6,tocIndex:2},{value:"鼠标触发 Popup 展示的方式",paraId:6,tocIndex:2},{value:"'hover' | 'click'",paraId:6,tocIndex:2},{value:"'hover'",paraId:6,tocIndex:2},{value:"名称",paraId:8,tocIndex:3},{value:"说明",paraId:8,tocIndex:3},{value:"类型",paraId:8,tocIndex:3},{value:"layer",paraId:8,tocIndex:3},{value:"需要展示 Popup 的目标图层实例，或其的 ",paraId:8,tocIndex:3},{value:"id",paraId:8,tocIndex:3},{value:" 或 ",paraId:8,tocIndex:3},{value:"name",paraId:8,tocIndex:3},{value:"BaseLayer",paraId:8,tocIndex:3},{value:" | ",paraId:8,tocIndex:3},{value:"string",paraId:8,tocIndex:3},{value:"fields",paraId:8,tocIndex:3},{value:"需要展示的字段数组，支持传入字段 key 值字符串，或者针对该字段的详细配置 ",paraId:8,tocIndex:3},{value:"LayerField",paraId:9,tocIndex:3},{value:"string",paraId:8,tocIndex:3},{value:" | ",paraId:8,tocIndex:3},{value:"LayerField",paraId:8,tocIndex:3},{value:"customContent",paraId:8,tocIndex:3},{value:"自定义气泡内容，支持直接传入自定义内容或者通过回调函数返回自定义内容两种方式，与 ",paraId:8,tocIndex:3},{value:"fields",paraId:8,tocIndex:3},{value:" 共存下优先读取该配置并渲染",paraId:8,tocIndex:3},{value:"ElementType | ((feature: any) => ElementType)",paraId:8,tocIndex:3},{value:"title",paraId:8,tocIndex:3},{value:"自定义气泡标题，支持直接传入自定义内容或者通过回调函数返回自定义内容两种方式",paraId:8,tocIndex:3},{value:"ElementType | ((feature: any) => ElementType)",paraId:8,tocIndex:3},{value:"名称",paraId:10,tocIndex:4},{value:"说明",paraId:10,tocIndex:4},{value:"类型",paraId:10,tocIndex:4},{value:"field",paraId:10,tocIndex:4},{value:"字段的 key 值字符串",paraId:10,tocIndex:4},{value:"string",paraId:10,tocIndex:4},{value:"formatField",paraId:10,tocIndex:4},{value:"对展示的 key 字段进行格式化",paraId:10,tocIndex:4},{value:"ElementType | ((field: string, feature: any) => ElementType)",paraId:10,tocIndex:4},{value:"formatValue",paraId:10,tocIndex:4},{value:"对展示的 value 值进行格式化",paraId:10,tocIndex:4},{value:"ElementType | ((value: any, feature: any) => ElementType)",paraId:10,tocIndex:4},{value:"getValue",paraId:10,tocIndex:4},{value:"自定义获取值的方式",paraId:10,tocIndex:4},{value:"(feature: any) => any",paraId:10,tocIndex:4},{value:"type ElementType = HTMLElement | HTMLElement[] | DocumentFragment | Text | string;\n",paraId:11,tocIndex:5},{value:"名称",paraId:12,tocIndex:6},{value:"说明",paraId:12,tocIndex:6},{value:"类型",paraId:12,tocIndex:6},{value:"getOptions",paraId:12,tocIndex:6},{value:"获取当前 Popup 配置",paraId:12,tocIndex:6},{value:"() => IPopupOption",paraId:12,tocIndex:6},{value:"setOptions",paraId:12,tocIndex:6},{value:"更新当前 Popup 配置",paraId:12,tocIndex:6},{value:"(newOption: Partial<IPopupOption>) => this",paraId:12,tocIndex:6},{value:"show",paraId:12,tocIndex:6},{value:"显示 Popup",paraId:12,tocIndex:6},{value:"() => this",paraId:12,tocIndex:6},{value:"hide",paraId:12,tocIndex:6},{value:"隐藏 Popup",paraId:12,tocIndex:6},{value:"() => this",paraId:12,tocIndex:6},{value:"setLngLat",paraId:12,tocIndex:6},{value:"设置 Popup 锚点所在经纬度",paraId:12,tocIndex:6},{value:"(lngLat: { lng: number; lat: number } | [number, number]) => this",paraId:12,tocIndex:6},{value:"panToPopup",paraId:12,tocIndex:6},{value:"将地图平移至当前 Popup 位置",paraId:12,tocIndex:6},{value:"() => this",paraId:12,tocIndex:6},{value:"名称",paraId:13,tocIndex:7},{value:"说明",paraId:13,tocIndex:7},{value:"类型",paraId:13,tocIndex:7},{value:"open",paraId:13,tocIndex:7},{value:"Popup 被添加时触发",paraId:13,tocIndex:7},{value:"() => void",paraId:13,tocIndex:7},{value:"close",paraId:13,tocIndex:7},{value:"Popup 被移除时触发",paraId:13,tocIndex:7},{value:"() => void",paraId:13,tocIndex:7},{value:"show",paraId:13,tocIndex:7},{value:"Popup 显示时触发",paraId:13,tocIndex:7},{value:"() => void",paraId:13,tocIndex:7},{value:"hide",paraId:13,tocIndex:7},{value:"Popup 隐藏时触发",paraId:13,tocIndex:7},{value:"() => void",paraId:13,tocIndex:7}]},47540:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(6992);const d=[{value:"用于控制目标图层组的",paraId:0},{value:"显示",paraId:0},{value:"和",paraId:0},{value:"隐藏",paraId:0},{value:"操作。",paraId:0},{value:"注意",paraId:1,tocIndex:0},{value:"： 在控件中展示的图层名称会默认读取图层的 ",paraId:1,tocIndex:0},{value:"name",paraId:1,tocIndex:0},{value:" 属性，因此需要用户在初始化图层时传入图层对应的名称。",paraId:1,tocIndex:0},{value:"示例",paraId:2},{value:"import { Scene, LayerSwitch } from '@antv/l7';\n\nconst scene = new Scene({\n  // ...\n});\n\nscene.on('loaded', () => {\n  const layer = new PointLayer({\n    name: '自定义图层名称',\n  });\n  scene.addLayer(layer);\n\n  const layerSwitch = new LayerSwitch({\n    layers: [layer],\n  });\n  scene.addControl(layerSwitch);\n});\n",paraId:3},{value:"名称",paraId:4,tocIndex:2},{value:"说明",paraId:4,tocIndex:2},{value:"类型",paraId:4,tocIndex:2},{value:"layers",paraId:4,tocIndex:2},{value:"需要被控制的 ",paraId:4,tocIndex:2},{value:"layer",paraId:4,tocIndex:2},{value:" 数组，支持传入图层示例或者图层 id，不传则默认读取当前 L7 中所有的图层",paraId:4,tocIndex:2},{value:"Array<ILayer | string | LayerSwitchItem>",paraId:4,tocIndex:2},{value:"multiple",paraId:4,tocIndex:2},{value:"控件内的图层选项是否为多选，单选模式下默认展示第一个选项对应的图层",paraId:4,tocIndex:2},{value:"boolean",paraId:4,tocIndex:2},{value:"名称",paraId:5,tocIndex:3},{value:"说明",paraId:5,tocIndex:3},{value:"类型",paraId:5,tocIndex:3},{value:"layer",paraId:5,tocIndex:3},{value:"需要被控制的 ",paraId:5,tocIndex:3},{value:"layer",paraId:5,tocIndex:3},{value:" 实例",paraId:5,tocIndex:3},{value:"ILayer",paraId:5,tocIndex:3},{value:"name",paraId:5,tocIndex:3},{value:"展示的图层名称",paraId:5,tocIndex:3},{value:"string | undefined",paraId:5,tocIndex:3},{value:"img",paraId:5,tocIndex:3},{value:"展示的图层图片 ",paraId:5,tocIndex:3},{value:"URL",paraId:5,tocIndex:3},{value:"string | undefined",paraId:5,tocIndex:3},{value:"名称",paraId:6,tocIndex:3},{value:"说明",paraId:6,tocIndex:3},{value:"类型",paraId:6,tocIndex:3},{value:"popperPlacement",paraId:6,tocIndex:3},{value:"气泡相对于按钮的位置",paraId:6,tocIndex:3},{value:"PopperPlacement",paraId:7,tocIndex:3},{value:"popperTrigger",paraId:6,tocIndex:3},{value:"气泡弹出的触发方式",paraId:6,tocIndex:3},{value:"'click'",paraId:6,tocIndex:3},{value:" | ",paraId:6,tocIndex:3},{value:"'hover'",paraId:6,tocIndex:3},{value:"popperClassName",paraId:6,tocIndex:3},{value:"气泡容器自定义样式名",paraId:6,tocIndex:3},{value:"string",paraId:6,tocIndex:3},{value:"export type PopperPlacement =\n  | 'top-start'\n  | 'top'\n  | 'top-end'\n  | 'left-start'\n  | 'left'\n  | 'left-end'\n  | 'bottom-start'\n  | 'bottom'\n  | 'bottom-end'\n  | 'right-start'\n  | 'right'\n  | 'right-end';\n",paraId:8,tocIndex:4},{value:"名称",paraId:9,tocIndex:4},{value:"说明",paraId:9,tocIndex:4},{value:"类型",paraId:9,tocIndex:4},{value:"btnIcon",paraId:9,tocIndex:4},{value:"按钮图标",paraId:9,tocIndex:4},{value:"HTMLElement",paraId:9,tocIndex:4},{value:" | ",paraId:9,tocIndex:4},{value:"SVGElement",paraId:9,tocIndex:4},{value:"btnText",paraId:9,tocIndex:4},{value:"按钮内容文本",paraId:9,tocIndex:4},{value:"string",paraId:9,tocIndex:4},{value:"title",paraId:9,tocIndex:4},{value:"按钮的 ",paraId:9,tocIndex:4},{value:"title",paraId:9,tocIndex:4},{value:" 属性",paraId:9,tocIndex:4},{value:"string",paraId:9,tocIndex:4},{value:"vertical",paraId:9,tocIndex:4},{value:"在 btnIcon 有值的情况下，按钮内的图标和文案是否纵向排列",paraId:9,tocIndex:4},{value:"boolean",paraId:9,tocIndex:4},{value:"名称",paraId:10,tocIndex:4},{value:"说明",paraId:10,tocIndex:4},{value:"类型",paraId:10,tocIndex:4},{value:"position",paraId:10,tocIndex:4},{value:"控件被添加到地图中的位置以及排列方式，详情可见 ",paraId:10,tocIndex:4},{value:"控件插槽",paraId:11,tocIndex:4},{value:"Position",paraId:12,tocIndex:4},{value:"className",paraId:10,tocIndex:4},{value:"自定义样式名",paraId:10,tocIndex:4},{value:"string",paraId:10,tocIndex:4},{value:"style",paraId:10,tocIndex:4},{value:"自定义样式",paraId:10,tocIndex:4},{value:"string",paraId:10,tocIndex:4},{value:"export type Position =\n  | 'topleft' // ↖ 左上角，纵向排列\n  | 'lefttop' // ↖ 左上角，横向排列\n  | 'topright' // ↗ 右上角，纵向排列\n  | 'righttop' // ↗ 右上角，横向排列\n  | 'bottomleft' // ↙ 左下角，纵向排列\n  | 'leftbottom' // ↙ 左下角，横向排列\n  | 'bottomright' // ↘ 右下角，纵向排列\n  | 'rightbottom' // ↘ 右下角，横向排列\n  | 'topcenter' // ↑ 上方中央，横向排列\n  | 'bottomcenter' // ↓ 下方中间，横向排列\n  | 'leftcenter' // ← 左边中间，纵向排列\n  | 'rightcenter' // → 右边中间，纵向排列\n  | Element; // 传入 DOM 作为当前控件的容器\n",paraId:13,tocIndex:5},{value:"名称",paraId:14,tocIndex:6},{value:"说明",paraId:14,tocIndex:6},{value:"类型",paraId:14,tocIndex:6},{value:"setOptions",paraId:14,tocIndex:6},{value:"更新配置，参数需要参考对应组件的",paraId:14,tocIndex:6},{value:"配置",paraId:15,tocIndex:6},{value:"(newOption: Partial<Option>) => void",paraId:14,tocIndex:6},{value:"getOptions",paraId:14,tocIndex:6},{value:"获取当前",paraId:14,tocIndex:6},{value:"配置",paraId:16,tocIndex:6},{value:"() => Option",paraId:14,tocIndex:6},{value:"show",paraId:14,tocIndex:6},{value:"显示组件",paraId:14,tocIndex:6},{value:"() => void",paraId:14,tocIndex:6},{value:"hide",paraId:14,tocIndex:6},{value:"隐藏组件",paraId:14,tocIndex:6},{value:"() => void",paraId:14,tocIndex:6},{value:"getContainer",paraId:14,tocIndex:6},{value:"获取当前控件对应的 ",paraId:14,tocIndex:6},{value:"DOM",paraId:14,tocIndex:6},{value:" 容器",paraId:14,tocIndex:6},{value:"() => HTMLElement",paraId:14,tocIndex:6},{value:"名称",paraId:17,tocIndex:7},{value:"说明",paraId:17,tocIndex:7},{value:"类型",paraId:17,tocIndex:7},{value:"add",paraId:17,tocIndex:7},{value:"组件被添加时的事件",paraId:17,tocIndex:7},{value:"(this) => void",paraId:17,tocIndex:7},{value:"remove",paraId:17,tocIndex:7},{value:"组件被移除时的事件",paraId:17,tocIndex:7},{value:"(this) => void",paraId:17,tocIndex:7},{value:"show",paraId:17,tocIndex:7},{value:"组件显示时的事件",paraId:17,tocIndex:7},{value:"(this) => void",paraId:17,tocIndex:7},{value:"hide",paraId:17,tocIndex:7},{value:"组件隐藏时的事件",paraId:17,tocIndex:7},{value:"(this) => void",paraId:17,tocIndex:7},{value:"名称",paraId:18,tocIndex:7},{value:"说明",paraId:18,tocIndex:7},{value:"类型",paraId:18,tocIndex:7},{value:"popperShow",paraId:18,tocIndex:7},{value:"气泡显示时的回调",paraId:18,tocIndex:7},{value:"(this) => void",paraId:18,tocIndex:7},{value:"popperHide",paraId:18,tocIndex:7},{value:"气泡隐藏时的回调",paraId:18,tocIndex:7},{value:"(this) => void",paraId:18,tocIndex:7},{value:"| 名称         | 说明                   | 类型     |\n| ------------ | ---------------------- | -------- | ------------------ |\n| selectChange | 当所选值发生改变时触发 | ",paraId:19,tocIndex:7},{value:"(string | string[]) => void",paraId:19,tocIndex:7},{value:" |",paraId:19,tocIndex:7}]},77733:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(78221);const d=[{value:"用于在地图上展示 Logo 图片的控件，并且支持超链接点击跳转。",paraId:0},{value:"当前 L7 会默认在地图左下角展示该控件，如需隐藏可以在 Scene 实例化时配置：",paraId:1,tocIndex:0},{value:"import { Scene } from '@antv/l7';\n\nconst scene = new Scene({\n  // ...\n\n  // 关闭默认 L7 Logo\n  logoVisible: false,\n});\n",paraId:2,tocIndex:0},{value:"示例",paraId:3},{value:"import { Scene, Logo } from '@antv/l7';\n\nconst scene = new Scene({\n  //...\n  logoVisible: false,\n});\n\nscene.on('loaded', () => {\n  const logo = new Logo({\n    // 图片 url\n    img: 'https://gw.alipayobjects.com/mdn/rms_816329/afts/img/A*GRb1TKp4HcMAAAAAAAAAAAAAARQnAQ',\n    // 跳转地址\n    href: 'https://l7.antv.antgroup.com',\n  });\n  scene.addControl(logo);\n});\n",paraId:4},{value:"名称",paraId:5,tocIndex:2},{value:"说明",paraId:5,tocIndex:2},{value:"类型",paraId:5,tocIndex:2},{value:"img",paraId:5,tocIndex:2},{value:"Logo 展示的图片 url",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:"href",paraId:5,tocIndex:2},{value:"点击 Logo 跳转的超链接，不传则纯展示图片，点击不跳转",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:"名称",paraId:6,tocIndex:2},{value:"说明",paraId:6,tocIndex:2},{value:"类型",paraId:6,tocIndex:2},{value:"position",paraId:6,tocIndex:2},{value:"控件被添加到地图中的位置以及排列方式，详情可见 ",paraId:6,tocIndex:2},{value:"控件插槽",paraId:7,tocIndex:2},{value:"Position",paraId:8,tocIndex:2},{value:"className",paraId:6,tocIndex:2},{value:"自定义样式名",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:"style",paraId:6,tocIndex:2},{value:"自定义样式",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:"export type Position =\n  | 'topleft' // ↖ 左上角，纵向排列\n  | 'lefttop' // ↖ 左上角，横向排列\n  | 'topright' // ↗ 右上角，纵向排列\n  | 'righttop' // ↗ 右上角，横向排列\n  | 'bottomleft' // ↙ 左下角，纵向排列\n  | 'leftbottom' // ↙ 左下角，横向排列\n  | 'bottomright' // ↘ 右下角，纵向排列\n  | 'rightbottom' // ↘ 右下角，横向排列\n  | 'topcenter' // ↑ 上方中央，横向排列\n  | 'bottomcenter' // ↓ 下方中间，横向排列\n  | 'leftcenter' // ← 左边中间，纵向排列\n  | 'rightcenter' // → 右边中间，纵向排列\n  | Element; // 传入 DOM 作为当前控件的容器\n",paraId:9,tocIndex:3},{value:"名称",paraId:10,tocIndex:4},{value:"说明",paraId:10,tocIndex:4},{value:"类型",paraId:10,tocIndex:4},{value:"setOptions",paraId:10,tocIndex:4},{value:"更新配置，参数需要参考对应组件的",paraId:10,tocIndex:4},{value:"配置",paraId:11,tocIndex:4},{value:"(newOption: Partial<Option>) => void",paraId:10,tocIndex:4},{value:"getOptions",paraId:10,tocIndex:4},{value:"获取当前",paraId:10,tocIndex:4},{value:"配置",paraId:12,tocIndex:4},{value:"() => Option",paraId:10,tocIndex:4},{value:"show",paraId:10,tocIndex:4},{value:"显示组件",paraId:10,tocIndex:4},{value:"() => void",paraId:10,tocIndex:4},{value:"hide",paraId:10,tocIndex:4},{value:"隐藏组件",paraId:10,tocIndex:4},{value:"() => void",paraId:10,tocIndex:4},{value:"getContainer",paraId:10,tocIndex:4},{value:"获取当前控件对应的 ",paraId:10,tocIndex:4},{value:"DOM",paraId:10,tocIndex:4},{value:" 容器",paraId:10,tocIndex:4},{value:"() => HTMLElement",paraId:10,tocIndex:4},{value:"名称",paraId:13,tocIndex:5},{value:"说明",paraId:13,tocIndex:5},{value:"类型",paraId:13,tocIndex:5},{value:"add",paraId:13,tocIndex:5},{value:"组件被添加时的事件",paraId:13,tocIndex:5},{value:"(this) => void",paraId:13,tocIndex:5},{value:"remove",paraId:13,tocIndex:5},{value:"组件被移除时的事件",paraId:13,tocIndex:5},{value:"(this) => void",paraId:13,tocIndex:5},{value:"show",paraId:13,tocIndex:5},{value:"组件显示时的事件",paraId:13,tocIndex:5},{value:"(this) => void",paraId:13,tocIndex:5},{value:"hide",paraId:13,tocIndex:5},{value:"组件隐藏时的事件",paraId:13,tocIndex:5},{value:"(this) => void",paraId:13,tocIndex:5}]},29150:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(9375);const d=[{value:"该控件用于切换地图底图的主题样式。",paraId:0},{value:"MapTheme 会根据当前地图底图类型（如 Mapbox、GaodeMapV2），默认展示相对应的默认主题选项，用于也可以传入自定义的主题选项",paraId:1,tocIndex:0},{value:"示例",paraId:2},{value:"import { Scene, MapTheme } from '@antv/l7';\n\nconst scene = new Scene({\n  // ...\n});\n\nscene.on('loaded', () => {\n  const mapTheme = new MapTheme({});\n  scene.addControl(mapTheme);\n});\n",paraId:3},{value:"名称",paraId:4,tocIndex:2},{value:"说明",paraId:4,tocIndex:2},{value:"类型",paraId:4,tocIndex:2},{value:"options",paraId:4,tocIndex:2},{value:"用户自定义的地图主题选项，每个选项的类型可见 ",paraId:4,tocIndex:2},{value:"IControlOptionItem",paraId:5,tocIndex:2},{value:"Array<IControlOptionItem>",paraId:4,tocIndex:2},{value:"export type IControlOptionItem = {\n  // 主题选项对应的文本\n  text: string;\n  // 主题选项对应地图主题 style 的 key 值\n  value: string;\n  // 主题选项对应展示的图片\n  img?: string;\n};\n",paraId:6,tocIndex:3},{value:"名称",paraId:7,tocIndex:3},{value:"说明",paraId:7,tocIndex:3},{value:"类型",paraId:7,tocIndex:3},{value:"popperPlacement",paraId:7,tocIndex:3},{value:"气泡相对于按钮的位置",paraId:7,tocIndex:3},{value:"PopperPlacement",paraId:8,tocIndex:3},{value:"popperTrigger",paraId:7,tocIndex:3},{value:"气泡弹出的触发方式",paraId:7,tocIndex:3},{value:"'click'",paraId:7,tocIndex:3},{value:" | ",paraId:7,tocIndex:3},{value:"'hover'",paraId:7,tocIndex:3},{value:"popperClassName",paraId:7,tocIndex:3},{value:"气泡容器自定义样式名",paraId:7,tocIndex:3},{value:"string",paraId:7,tocIndex:3},{value:"export type PopperPlacement =\n  | 'top-start'\n  | 'top'\n  | 'top-end'\n  | 'left-start'\n  | 'left'\n  | 'left-end'\n  | 'bottom-start'\n  | 'bottom'\n  | 'bottom-end'\n  | 'right-start'\n  | 'right'\n  | 'right-end';\n",paraId:9,tocIndex:4},{value:"名称",paraId:10,tocIndex:4},{value:"说明",paraId:10,tocIndex:4},{value:"类型",paraId:10,tocIndex:4},{value:"btnIcon",paraId:10,tocIndex:4},{value:"按钮图标",paraId:10,tocIndex:4},{value:"HTMLElement",paraId:10,tocIndex:4},{value:" | ",paraId:10,tocIndex:4},{value:"SVGElement",paraId:10,tocIndex:4},{value:"btnText",paraId:10,tocIndex:4},{value:"按钮内容文本",paraId:10,tocIndex:4},{value:"string",paraId:10,tocIndex:4},{value:"title",paraId:10,tocIndex:4},{value:"按钮的 ",paraId:10,tocIndex:4},{value:"title",paraId:10,tocIndex:4},{value:" 属性",paraId:10,tocIndex:4},{value:"string",paraId:10,tocIndex:4},{value:"vertical",paraId:10,tocIndex:4},{value:"在 btnIcon 有值的情况下，按钮内的图标和文案是否纵向排列",paraId:10,tocIndex:4},{value:"boolean",paraId:10,tocIndex:4},{value:"名称",paraId:11,tocIndex:4},{value:"说明",paraId:11,tocIndex:4},{value:"类型",paraId:11,tocIndex:4},{value:"position",paraId:11,tocIndex:4},{value:"控件被添加到地图中的位置以及排列方式，详情可见 ",paraId:11,tocIndex:4},{value:"控件插槽",paraId:12,tocIndex:4},{value:"Position",paraId:13,tocIndex:4},{value:"className",paraId:11,tocIndex:4},{value:"自定义样式名",paraId:11,tocIndex:4},{value:"string",paraId:11,tocIndex:4},{value:"style",paraId:11,tocIndex:4},{value:"自定义样式",paraId:11,tocIndex:4},{value:"string",paraId:11,tocIndex:4},{value:"export type Position =\n  | 'topleft' // ↖ 左上角，纵向排列\n  | 'lefttop' // ↖ 左上角，横向排列\n  | 'topright' // ↗ 右上角，纵向排列\n  | 'righttop' // ↗ 右上角，横向排列\n  | 'bottomleft' // ↙ 左下角，纵向排列\n  | 'leftbottom' // ↙ 左下角，横向排列\n  | 'bottomright' // ↘ 右下角，纵向排列\n  | 'rightbottom' // ↘ 右下角，横向排列\n  | 'topcenter' // ↑ 上方中央，横向排列\n  | 'bottomcenter' // ↓ 下方中间，横向排列\n  | 'leftcenter' // ← 左边中间，纵向排列\n  | 'rightcenter' // → 右边中间，纵向排列\n  | Element; // 传入 DOM 作为当前控件的容器\n",paraId:14,tocIndex:5},{value:"名称",paraId:15,tocIndex:6},{value:"说明",paraId:15,tocIndex:6},{value:"类型",paraId:15,tocIndex:6},{value:"setOptions",paraId:15,tocIndex:6},{value:"更新配置，参数需要参考对应组件的",paraId:15,tocIndex:6},{value:"配置",paraId:16,tocIndex:6},{value:"(newOption: Partial<Option>) => void",paraId:15,tocIndex:6},{value:"getOptions",paraId:15,tocIndex:6},{value:"获取当前",paraId:15,tocIndex:6},{value:"配置",paraId:17,tocIndex:6},{value:"() => Option",paraId:15,tocIndex:6},{value:"show",paraId:15,tocIndex:6},{value:"显示组件",paraId:15,tocIndex:6},{value:"() => void",paraId:15,tocIndex:6},{value:"hide",paraId:15,tocIndex:6},{value:"隐藏组件",paraId:15,tocIndex:6},{value:"() => void",paraId:15,tocIndex:6},{value:"getContainer",paraId:15,tocIndex:6},{value:"获取当前控件对应的 ",paraId:15,tocIndex:6},{value:"DOM",paraId:15,tocIndex:6},{value:" 容器",paraId:15,tocIndex:6},{value:"() => HTMLElement",paraId:15,tocIndex:6},{value:"名称",paraId:18,tocIndex:7},{value:"说明",paraId:18,tocIndex:7},{value:"类型",paraId:18,tocIndex:7},{value:"add",paraId:18,tocIndex:7},{value:"组件被添加时的事件",paraId:18,tocIndex:7},{value:"(this) => void",paraId:18,tocIndex:7},{value:"remove",paraId:18,tocIndex:7},{value:"组件被移除时的事件",paraId:18,tocIndex:7},{value:"(this) => void",paraId:18,tocIndex:7},{value:"show",paraId:18,tocIndex:7},{value:"组件显示时的事件",paraId:18,tocIndex:7},{value:"(this) => void",paraId:18,tocIndex:7},{value:"hide",paraId:18,tocIndex:7},{value:"组件隐藏时的事件",paraId:18,tocIndex:7},{value:"(this) => void",paraId:18,tocIndex:7},{value:"名称",paraId:19,tocIndex:7},{value:"说明",paraId:19,tocIndex:7},{value:"类型",paraId:19,tocIndex:7},{value:"popperShow",paraId:19,tocIndex:7},{value:"气泡显示时的回调",paraId:19,tocIndex:7},{value:"(this) => void",paraId:19,tocIndex:7},{value:"popperHide",paraId:19,tocIndex:7},{value:"气泡隐藏时的回调",paraId:19,tocIndex:7},{value:"(this) => void",paraId:19,tocIndex:7},{value:"| 名称         | 说明                   | 类型     |\n| ------------ | ---------------------- | -------- | ------------------ |\n| selectChange | 当所选值发生改变时触发 | ",paraId:20,tocIndex:7},{value:"(string | string[]) => void",paraId:20,tocIndex:7},{value:" |",paraId:20,tocIndex:7}]},72419:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(89268);const d=[{value:"Marker 地图标注 目前只支持 2D DOM 标注",paraId:0},{value:"Marker",paraId:1,tocIndex:0},{value:"const Marker = new L7.Marker(option)",paraId:2,tocIndex:0},{value:"color        ",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:" \n",paraId:3,tocIndex:1},{value:"  设置默认 marker 的颜色",paraId:3,tocIndex:1},{value:"element    ",paraId:3,tocIndex:1},{value:"DOM|string",paraId:3,tocIndex:1},{value:"    自定义 marker DOM 节点，可以是 dom 实例，也可以是 dom id",paraId:3,tocIndex:1},{value:"anchor     ",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:"  锚点位置   支持 center, top, top-left, top-right, bottom, bottom-left,bottom-right,left, right",paraId:3,tocIndex:1},{value:"offsets    ",paraId:3,tocIndex:1},{value:"Array",paraId:3,tocIndex:1},{value:"  偏移量  [ 0, 0 ] 分别表示 X, Y 的偏移量",paraId:3,tocIndex:1},{value:"overflowHide   ",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"  超出屏幕时是否隐藏 Marker，默认为 true",paraId:3,tocIndex:1},{value:"draggable ",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:" 是否支持拖拽调整 Marker 位置",paraId:3,tocIndex:1},{value:"extData 用户自定义属性，支持任意数据类型，存储 marker 属性信息",paraId:3,tocIndex:1},{value:"scene.addMarker(marker);\n",paraId:4,tocIndex:2},{value:"设置 marker 经纬度位置",paraId:5,tocIndex:4},{value:"移除 marker",paraId:6,tocIndex:5},{value:"获取 marker dom Element",paraId:7,tocIndex:6},{value:"element ",paraId:8,tocIndex:7},{value:"dom",paraId:8,tocIndex:7},{value:"设置 element 通过此方法更新 Marker 样式",paraId:9,tocIndex:7},{value:"获取 marker 经纬度坐标",paraId:10,tocIndex:8},{value:"设置是否支持拖拽调整位置",paraId:11,tocIndex:9},{value:"获取当前是否支持拖拽调整位置",paraId:12,tocIndex:10},{value:"开启或者关闭 marker 弹出框",paraId:13,tocIndex:11},{value:"打开 Popup",paraId:14,tocIndex:12},{value:"关闭 popup",paraId:15,tocIndex:13},{value:"为 marker 设置 popup",paraId:16,tocIndex:14},{value:"获取 marker 弹出框",paraId:17,tocIndex:15},{value:"获取用户自定义数据",paraId:18,tocIndex:16},{value:"设置用户自定义数据",paraId:19,tocIndex:17},{value:"const marker = new L7.Marker({color:'blue'})",paraId:20,tocIndex:19},{value:"var el = document.createElement('label');\nel.className = 'labelclass';\nel.textContent = data[i].v;\nel.style.background = getColor(data[i].v);\n\nconst marker = new L7.Marker({\n  element: el,\n}).setLnglat([data[i].x * 1, data[i].y]);\n\nscene.addMarker(marker);\n",paraId:21,tocIndex:20},{value:"var popup = new L7.Popup({\n  anchor: 'left',\n}).setText(item.name);\n\nnew L7.Marker({\n  element: el,\n})\n  .setLnglat(item.coordinates)\n  .setPopup(popup);\n",paraId:22,tocIndex:21},{value:"mousemove",paraId:23,tocIndex:23},{value:"click",paraId:23,tocIndex:23},{value:"mousedown",paraId:23,tocIndex:23},{value:"mouseup",paraId:23,tocIndex:23},{value:"dblclick",paraId:23,tocIndex:23},{value:"contextmenu",paraId:23,tocIndex:23},{value:"mouseover",paraId:23,tocIndex:23},{value:"mouseout",paraId:23,tocIndex:23},{value:"dragstart",paraId:23,tocIndex:23},{value:"dragging",paraId:23,tocIndex:23},{value:"dragend",paraId:23,tocIndex:23},{value:"事件返回数据",paraId:24,tocIndex:23},{value:"target 事件触发源",paraId:25,tocIndex:23},{value:"data extData 用户自定义数据",paraId:25,tocIndex:23},{value:"lnglat marker 经纬度",paraId:25,tocIndex:23},{value:"marker.on('click', (e) => {});\n",paraId:26,tocIndex:23},{value:"demo1",paraId:27}]},70718:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(36999);const d=[{value:"MarkerLayer 是 Marker 的升级版，Marker 是独立的地图标注，MarkerLayer 则是统一管理大量的 Marker 数据。",paraId:0},{value:"技术差异",paraId:1},{value:"Marker DOM 绘制一个地图元素",paraId:2},{value:"MarkerLayer 统一管理多个 DomMarker",paraId:2},{value:"PointLayer 通过 WebGL 绘制元素。",paraId:2},{value:"功能差异",paraId:3},{value:"MarkerLayer 元素的自定义性比较强，任何 HTML+ CSS 的组合都可以绘制在地图上。",paraId:4},{value:"PointLayer 自定义性比较弱，实现成本比较高，优势可以绘制大量的数据，性能比较好。",paraId:4},{value:"import { Marker, MarkerLayer } from '@antv/l7';\n",paraId:5,tocIndex:0},{value:"const markerLayer = new MarkerLayer(option);\n\n// 调用 addMarker方法 将多个Marker添加到Layer\n\nscene.addMarkerLayer(markerLayer);\n",paraId:6,tocIndex:1},{value:"cluster 聚合 ",paraId:7,tocIndex:2},{value:"boolean",paraId:7,tocIndex:2},{value:" 默认 ",paraId:7,tocIndex:2},{value:"false",paraId:7,tocIndex:2},{value:"clusterOption 聚合配置",paraId:8,tocIndex:2},{value:"field ",paraId:9,tocIndex:2},{value:"string",paraId:9,tocIndex:2},{value:" 聚合统计字段",paraId:9,tocIndex:2},{value:"method ",paraId:9,tocIndex:2},{value:"sum| max| min| mean",paraId:9,tocIndex:2},{value:"radius 聚合半径 number default 40",paraId:9,tocIndex:2},{value:"minZoom: 最小聚合缩放等级 number default 0",paraId:9,tocIndex:2},{value:"maxZoom: 最大聚合缩放等级 number default 16",paraId:9,tocIndex:2},{value:"element ",paraId:9,tocIndex:2},{value:"function",paraId:9,tocIndex:2},{value:" 通过回调函数设置聚合 Marker 的样式，返回 dom 元素\n回调函数包含以下参数\n",paraId:9,tocIndex:2},{value:"point_count 默认 聚合元素个数",paraId:10,tocIndex:2},{value:"clusterData ",paraId:10,tocIndex:2},{value:"Array",paraId:10,tocIndex:2},{value:" 聚合节点的原始数据",paraId:10,tocIndex:2},{value:"point_sum 聚合求和 根据 field 和 method 计算",paraId:10,tocIndex:2},{value:"point_max 聚合最大值 根据 field 和 method 计算",paraId:10,tocIndex:2},{value:"point_min 聚合最小值 根据 field 和 method 计算",paraId:10,tocIndex:2},{value:"point_mean 聚合平均值 根据 field 和 method 计算",paraId:10,tocIndex:2},{value:"参数",paraId:11,tocIndex:4},{value:"marker ",paraId:12,tocIndex:4},{value:"IMarker",paraId:12,tocIndex:4},{value:" 需要添加的 Marker",paraId:12,tocIndex:4},{value:"添加 Marker",paraId:13,tocIndex:4},{value:"通过 Marker 对象实例化一个 Marker",paraId:14,tocIndex:4},{value:"const marker = new Marker().setLnglat(); // 添加进Marker必须设置经纬度才能添加\nmarkerLayer.addMarker(marker);\n",paraId:15,tocIndex:4},{value:"为 Marker 添加属性信息,",paraId:16,tocIndex:4},{value:"如果聚合参数设置统计配置项 ",paraId:17,tocIndex:4},{value:"field| method",paraId:17,tocIndex:4},{value:"需要为 Marker 添加属性信息",paraId:17,tocIndex:4},{value:"通过 Marker 的 extData",paraId:18,tocIndex:4},{value:"配置项",paraId:19,tocIndex:4},{value:"设置 Marker 属性信息",paraId:18,tocIndex:4},{value:"const marker = new Marker({\n  extData: nodes.features[i].properties,\n}).setLnglat({\n  lng: coordinates[0],\n  lat: coordinates[1],\n});\n",paraId:20,tocIndex:4},{value:"从 MarkerLayer 移除 Marker",paraId:21,tocIndex:5},{value:"获取 MarkerLayer 中的所有 Marker",paraId:22,tocIndex:6},{value:"清除掉所有的 Marker",paraId:23,tocIndex:7},{value:"添加 MarkerLayer",paraId:24,tocIndex:10},{value:"scene.addMarkerLayer(layer);\n",paraId:25,tocIndex:10},{value:"移除 MarkerLayer",paraId:26,tocIndex:11},{value:"scene.removeMarkerLayer(layer);\n",paraId:27,tocIndex:11},{value:"markerLayer ",paraId:28},{value:"markerLayer 聚合",paraId:29}]},93203:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(10310);const d=[{value:"用于实时展示当前光标在地图上所对应的经纬度。",paraId:0},{value:"示例",paraId:1},{value:"import { Scene, MouseLocation } from '@antv/l7';\n\nconst scene = new Scene({\n  // ...\n});\n\nscene.on('loaded', () => {\n  const mouseLocation = new MouseLocation({\n    transform: (position) => {\n      return position;\n    },\n  });\n  scene.addControl(mouseLocation);\n});\n",paraId:2},{value:"名称",paraId:3,tocIndex:1},{value:"说明",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"transform",paraId:3,tocIndex:1},{value:"转换光标所在经纬度的回调函数",paraId:3,tocIndex:1},{value:"(position: [number, number]) => [number, number]",paraId:3,tocIndex:1},{value:"名称",paraId:4,tocIndex:1},{value:"说明",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"position",paraId:4,tocIndex:1},{value:"控件被添加到地图中的位置以及排列方式，详情可见 ",paraId:4,tocIndex:1},{value:"控件插槽",paraId:5,tocIndex:1},{value:"Position",paraId:6,tocIndex:1},{value:"className",paraId:4,tocIndex:1},{value:"自定义样式名",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:"style",paraId:4,tocIndex:1},{value:"自定义样式",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:"export type Position =\n  | 'topleft' // ↖ 左上角，纵向排列\n  | 'lefttop' // ↖ 左上角，横向排列\n  | 'topright' // ↗ 右上角，纵向排列\n  | 'righttop' // ↗ 右上角，横向排列\n  | 'bottomleft' // ↙ 左下角，纵向排列\n  | 'leftbottom' // ↙ 左下角，横向排列\n  | 'bottomright' // ↘ 右下角，纵向排列\n  | 'rightbottom' // ↘ 右下角，横向排列\n  | 'topcenter' // ↑ 上方中央，横向排列\n  | 'bottomcenter' // ↓ 下方中间，横向排列\n  | 'leftcenter' // ← 左边中间，纵向排列\n  | 'rightcenter' // → 右边中间，纵向排列\n  | Element; // 传入 DOM 作为当前控件的容器\n",paraId:7,tocIndex:2},{value:"名称",paraId:8,tocIndex:3},{value:"说明",paraId:8,tocIndex:3},{value:"类型",paraId:8,tocIndex:3},{value:"setOptions",paraId:8,tocIndex:3},{value:"更新配置，参数需要参考对应组件的",paraId:8,tocIndex:3},{value:"配置",paraId:9,tocIndex:3},{value:"(newOption: Partial<Option>) => void",paraId:8,tocIndex:3},{value:"getOptions",paraId:8,tocIndex:3},{value:"获取当前",paraId:8,tocIndex:3},{value:"配置",paraId:10,tocIndex:3},{value:"() => Option",paraId:8,tocIndex:3},{value:"show",paraId:8,tocIndex:3},{value:"显示组件",paraId:8,tocIndex:3},{value:"() => void",paraId:8,tocIndex:3},{value:"hide",paraId:8,tocIndex:3},{value:"隐藏组件",paraId:8,tocIndex:3},{value:"() => void",paraId:8,tocIndex:3},{value:"getContainer",paraId:8,tocIndex:3},{value:"获取当前控件对应的 ",paraId:8,tocIndex:3},{value:"DOM",paraId:8,tocIndex:3},{value:" 容器",paraId:8,tocIndex:3},{value:"() => HTMLElement",paraId:8,tocIndex:3},{value:"名称",paraId:11,tocIndex:4},{value:"说明",paraId:11,tocIndex:4},{value:"类型",paraId:11,tocIndex:4},{value:"locationChange",paraId:11,tocIndex:4},{value:"光标所在经纬度发生变化时触发",paraId:11,tocIndex:4},{value:"(position: [number, number]) => void",paraId:11,tocIndex:4},{value:"名称",paraId:12,tocIndex:4},{value:"说明",paraId:12,tocIndex:4},{value:"类型",paraId:12,tocIndex:4},{value:"add",paraId:12,tocIndex:4},{value:"组件被添加时的事件",paraId:12,tocIndex:4},{value:"(this) => void",paraId:12,tocIndex:4},{value:"remove",paraId:12,tocIndex:4},{value:"组件被移除时的事件",paraId:12,tocIndex:4},{value:"(this) => void",paraId:12,tocIndex:4},{value:"show",paraId:12,tocIndex:4},{value:"组件显示时的事件",paraId:12,tocIndex:4},{value:"(this) => void",paraId:12,tocIndex:4},{value:"hide",paraId:12,tocIndex:4},{value:"组件隐藏时的事件",paraId:12,tocIndex:4},{value:"(this) => void",paraId:12,tocIndex:4}]},40610:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(13198);const d=[{value:"Popup 是用于在地图上指定经纬度位置，展示自定义内容的气泡。",paraId:0},{value:"Popup 的锚点位置是由经纬度来表达的，当地图缩放/平移时，Popup 会自动计算相对于当前地图的坐标并且自动位移。换句话说，如果开发者需要在地图的",paraId:1,tocIndex:0},{value:"指定经纬度位置",paraId:1,tocIndex:0},{value:"展示信息气泡，可以考虑使用 Popup 组件来实现对应效果。",paraId:1,tocIndex:0},{value:"开发者可以自定义 Popup 主体展示内容：",paraId:2,tocIndex:0},{value:"纯文本可以通过 ",paraId:3,tocIndex:0},{value:"text",paraId:3,tocIndex:0},{value:" 配置或者 ",paraId:3,tocIndex:0},{value:"setText",paraId:3,tocIndex:0},{value:" 方法控制 Popup 的展示文本。",paraId:3,tocIndex:0},{value:"自定义 DOM 可以通过 ",paraId:3,tocIndex:0},{value:"html",paraId:3,tocIndex:0},{value:" 配置或者 ",paraId:3,tocIndex:0},{value:"setHTML",paraId:3,tocIndex:0},{value:" 方法，支持传入 HTML 字符串或者 DOM 元素或数组的方式控制 Popup 的展示内容。",paraId:3,tocIndex:0},{value:"示例",paraId:4},{value:"import { Scene, Popup } from '@antv/l7';\n\nconst scene = new Scene({\n  id: 'map',\n  map: new GaodeMapV2({\n    // ...\n  }),\n});\n\nscene.on('loaded', () => {\n  const popup = new Popup({\n    // 初始锚点经纬度\n    lngLat: {\n      lng: 120,\n      lat: 30,\n    },\n    // Popup 标题\n    title: 'Popup Title',\n    // Popup 内容\n    html: 'Popup Content',\n  });\n  scene.addPopup(popup);\n\n  // 更新 Popup 锚点经纬度\n  popup.setLngLat({\n    lng: 130,\n    lat: 40,\n  });\n\n  // 更新 Popup 内容\n  popup.setHTML('New Popup Content');\n});\n",paraId:5},{value:"名称",paraId:6,tocIndex:2},{value:"说明",paraId:6,tocIndex:2},{value:"类型",paraId:6,tocIndex:2},{value:"默认值",paraId:6,tocIndex:2},{value:"lngLat",paraId:6,tocIndex:2},{value:"Popup 所在的经纬度",paraId:6,tocIndex:2},{value:"{ lng: number; lat: number }",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"text",paraId:6,tocIndex:2},{value:"Popup 内容展示的文本内容",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"html",paraId:6,tocIndex:2},{value:"Popup 内容展示的自定义 HTML，可以传 HTML 字符串，也可以传 DOM 对象或数组",paraId:6,tocIndex:2},{value:"ElementType",paraId:7,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"title",paraId:6,tocIndex:2},{value:"Popup 标题展示的自定义 HTML，可以传 HTML 字符串，也可以传 DOM 对象或数组",paraId:6,tocIndex:2},{value:"ElementType",paraId:8,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"closeOnClick",paraId:6,tocIndex:2},{value:"点击地图区域时，是否关闭当前 Popup",paraId:6,tocIndex:2},{value:"boolean",paraId:6,tocIndex:2},{value:"false",paraId:6,tocIndex:2},{value:"closeOnEsc",paraId:6,tocIndex:2},{value:"点击 Esc 键时，是否关闭当前 Popup",paraId:6,tocIndex:2},{value:"boolean",paraId:6,tocIndex:2},{value:"false",paraId:6,tocIndex:2},{value:"maxWidth",paraId:6,tocIndex:2},{value:"Popup 的最大宽度",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:"240px",paraId:6,tocIndex:2},{value:"anchor",paraId:6,tocIndex:2},{value:"Popup 箭头位置，可以控制 Popup 相对于经纬度点的展示位置",paraId:6,tocIndex:2},{value:"AnchorType",paraId:9,tocIndex:2},{value:"'bottom'",paraId:6,tocIndex:2},{value:"offsets",paraId:6,tocIndex:2},{value:"Popup 相对于锚点的偏移",paraId:6,tocIndex:2},{value:"[number, number]",paraId:6,tocIndex:2},{value:"[0, 0]",paraId:6,tocIndex:2},{value:"autoPan",paraId:6,tocIndex:2},{value:"当 Popup 展示或者位置发生变化时，地图是否要自动平移至 Popup 所在位置",paraId:6,tocIndex:2},{value:"boolean",paraId:6,tocIndex:2},{value:"false",paraId:6,tocIndex:2},{value:"autoClose",paraId:6,tocIndex:2},{value:"当有其他 Popup 展示时，是否自动关闭当前气泡",paraId:6,tocIndex:2},{value:"boolean",paraId:6,tocIndex:2},{value:"true",paraId:6,tocIndex:2},{value:"followCursor",paraId:6,tocIndex:2},{value:"Popup 是否跟随光标移动，若设为 ",paraId:6,tocIndex:2},{value:"true",paraId:6,tocIndex:2},{value:"，则 ",paraId:6,tocIndex:2},{value:"lngLat",paraId:6,tocIndex:2},{value:" 配置无效",paraId:6,tocIndex:2},{value:"boolean",paraId:6,tocIndex:2},{value:"false",paraId:6,tocIndex:2},{value:"closeButton",paraId:6,tocIndex:2},{value:"是否展示关闭 Popup 图标",paraId:6,tocIndex:2},{value:"boolean",paraId:6,tocIndex:2},{value:"true",paraId:6,tocIndex:2},{value:"closeButtonOffsets",paraId:6,tocIndex:2},{value:"关闭 Popup 图标的相对偏移",paraId:6,tocIndex:2},{value:"[number, number]",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"stopPropagation",paraId:6,tocIndex:2},{value:"Popup 上的鼠标事件是否要阻止其冒泡",paraId:6,tocIndex:2},{value:"boolean",paraId:6,tocIndex:2},{value:"true",paraId:6,tocIndex:2},{value:"type ElementType = HTMLElement | HTMLElement[] | DocumentFragment | Text | string;\n",paraId:10,tocIndex:3},{value:"type AnchorType =\n  | 'center'\n  | 'top'\n  | 'top-left'\n  | 'top-right'\n  | 'bottom'\n  | 'bottom-left'\n  | 'bottom-right'\n  | 'left'\n  | 'right';\n",paraId:11,tocIndex:4},{value:"名称",paraId:12,tocIndex:5},{value:"说明",paraId:12,tocIndex:5},{value:"类型",paraId:12,tocIndex:5},{value:"getOptions",paraId:12,tocIndex:5},{value:"获取当前 Popup 配置",paraId:12,tocIndex:5},{value:"() => IPopupOption",paraId:12,tocIndex:5},{value:"setOptions",paraId:12,tocIndex:5},{value:"更新当前 Popup 配置",paraId:12,tocIndex:5},{value:"(newOption: Partial<IPopupOption>) => this",paraId:12,tocIndex:5},{value:"show",paraId:12,tocIndex:5},{value:"显示 Popup",paraId:12,tocIndex:5},{value:"() => this",paraId:12,tocIndex:5},{value:"hide",paraId:12,tocIndex:5},{value:"隐藏 Popup",paraId:12,tocIndex:5},{value:"() => this",paraId:12,tocIndex:5},{value:"getIsShow",paraId:12,tocIndex:5},{value:"判断当前气泡是否展示",paraId:12,tocIndex:5},{value:"() => boolean",paraId:12,tocIndex:5},{value:"setTitle",paraId:12,tocIndex:5},{value:"设置 Popup 标题展示的 HTML",paraId:12,tocIndex:5},{value:"(title: ElementType) => this",paraId:12,tocIndex:5},{value:"setHTML",paraId:12,tocIndex:5},{value:"设置 Popup 内容展示的 HTML",paraId:12,tocIndex:5},{value:"(html: ElementType) => this",paraId:12,tocIndex:5},{value:"setText",paraId:12,tocIndex:5},{value:"设置 Popup 内容展示的文本",paraId:12,tocIndex:5},{value:"(text: string) => this",paraId:12,tocIndex:5},{value:"setLngLat",paraId:12,tocIndex:5},{value:"设置 Popup 锚点所在经纬度",paraId:12,tocIndex:5},{value:"(lngLat: { lng: number; lat: number } | [number, number]) => this",paraId:12,tocIndex:5},{value:"panToPopup",paraId:12,tocIndex:5},{value:"将地图平移至当前 Popup 位置",paraId:12,tocIndex:5},{value:"() => this",paraId:12,tocIndex:5},{value:"名称",paraId:13,tocIndex:6},{value:"说明",paraId:13,tocIndex:6},{value:"类型",paraId:13,tocIndex:6},{value:"open",paraId:13,tocIndex:6},{value:"Popup 被添加时触发",paraId:13,tocIndex:6},{value:"() => void",paraId:13,tocIndex:6},{value:"close",paraId:13,tocIndex:6},{value:"Popup 被移除时触发",paraId:13,tocIndex:6},{value:"() => void",paraId:13,tocIndex:6},{value:"show",paraId:13,tocIndex:6},{value:"Popup 显示时触发",paraId:13,tocIndex:6},{value:"() => void",paraId:13,tocIndex:6},{value:"hide",paraId:13,tocIndex:6},{value:"Popup 隐藏时触发",paraId:13,tocIndex:6},{value:"() => void",paraId:13,tocIndex:6}]},29411:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(73674);const d=[{value:"该控件用于显示地图上的距离与地面上相应距离的比率。",paraId:0},{value:"示例",paraId:1},{value:"import { Scene, Scale } from '@antv/l7';\n\nconst scene = new Scene({\n  //...\n});\n\nscene.on('loaded', () => {\n  const scale = new Scale({\n    zoomInTitle: '放大',\n    zoomOutTitle: '缩小',\n  });\n  scene.addControl(scale);\n});\n",paraId:2},{value:"名称",paraId:3,tocIndex:1},{value:"说明",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"默认值",paraId:3,tocIndex:1},{value:"lockWidth",paraId:3,tocIndex:1},{value:"是否固定容器宽度",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"true",paraId:3,tocIndex:1},{value:"maxWidth",paraId:3,tocIndex:1},{value:"组件的容器最大宽度",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"100",paraId:3,tocIndex:1},{value:"metric",paraId:3,tocIndex:1},{value:"展示",paraId:3,tocIndex:1},{value:"千米",paraId:3,tocIndex:1},{value:"格式的比例尺",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"true",paraId:3,tocIndex:1},{value:"imperial",paraId:3,tocIndex:1},{value:"展示",paraId:3,tocIndex:1},{value:"英里",paraId:3,tocIndex:1},{value:"格式的比例尺",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"false",paraId:3,tocIndex:1},{value:"updateWhenIdle",paraId:3,tocIndex:1},{value:"是否只在拖拽和缩放结束后才更新比例尺",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"false",paraId:3,tocIndex:1},{value:"名称",paraId:4,tocIndex:1},{value:"说明",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"position",paraId:4,tocIndex:1},{value:"控件被添加到地图中的位置以及排列方式，详情可见 ",paraId:4,tocIndex:1},{value:"控件插槽",paraId:5,tocIndex:1},{value:"Position",paraId:6,tocIndex:1},{value:"className",paraId:4,tocIndex:1},{value:"自定义样式名",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:"style",paraId:4,tocIndex:1},{value:"自定义样式",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:"export type Position =\n  | 'topleft' // ↖ 左上角，纵向排列\n  | 'lefttop' // ↖ 左上角，横向排列\n  | 'topright' // ↗ 右上角，纵向排列\n  | 'righttop' // ↗ 右上角，横向排列\n  | 'bottomleft' // ↙ 左下角，纵向排列\n  | 'leftbottom' // ↙ 左下角，横向排列\n  | 'bottomright' // ↘ 右下角，纵向排列\n  | 'rightbottom' // ↘ 右下角，横向排列\n  | 'topcenter' // ↑ 上方中央，横向排列\n  | 'bottomcenter' // ↓ 下方中间，横向排列\n  | 'leftcenter' // ← 左边中间，纵向排列\n  | 'rightcenter' // → 右边中间，纵向排列\n  | Element; // 传入 DOM 作为当前控件的容器\n",paraId:7,tocIndex:2},{value:"名称",paraId:8,tocIndex:3},{value:"说明",paraId:8,tocIndex:3},{value:"类型",paraId:8,tocIndex:3},{value:"setOptions",paraId:8,tocIndex:3},{value:"更新配置，参数需要参考对应组件的",paraId:8,tocIndex:3},{value:"配置",paraId:9,tocIndex:3},{value:"(newOption: Partial<Option>) => void",paraId:8,tocIndex:3},{value:"getOptions",paraId:8,tocIndex:3},{value:"获取当前",paraId:8,tocIndex:3},{value:"配置",paraId:10,tocIndex:3},{value:"() => Option",paraId:8,tocIndex:3},{value:"show",paraId:8,tocIndex:3},{value:"显示组件",paraId:8,tocIndex:3},{value:"() => void",paraId:8,tocIndex:3},{value:"hide",paraId:8,tocIndex:3},{value:"隐藏组件",paraId:8,tocIndex:3},{value:"() => void",paraId:8,tocIndex:3},{value:"getContainer",paraId:8,tocIndex:3},{value:"获取当前控件对应的 ",paraId:8,tocIndex:3},{value:"DOM",paraId:8,tocIndex:3},{value:" 容器",paraId:8,tocIndex:3},{value:"() => HTMLElement",paraId:8,tocIndex:3},{value:"名称",paraId:11,tocIndex:4},{value:"说明",paraId:11,tocIndex:4},{value:"类型",paraId:11,tocIndex:4},{value:"add",paraId:11,tocIndex:4},{value:"组件被添加时的事件",paraId:11,tocIndex:4},{value:"(this) => void",paraId:11,tocIndex:4},{value:"remove",paraId:11,tocIndex:4},{value:"组件被移除时的事件",paraId:11,tocIndex:4},{value:"(this) => void",paraId:11,tocIndex:4},{value:"show",paraId:11,tocIndex:4},{value:"组件显示时的事件",paraId:11,tocIndex:4},{value:"(this) => void",paraId:11,tocIndex:4},{value:"hide",paraId:11,tocIndex:4},{value:"组件隐藏时的事件",paraId:11,tocIndex:4},{value:"(this) => void",paraId:11,tocIndex:4}]},15117:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(4571);const d=[{value:"该控件用于分屏对比两个地图上叠加图层。",paraId:0},{value:"图层可以添加到地图的左侧（顶部）或右侧（底部）。未添加到卷帘上的图层将显示在两侧。",paraId:1,tocIndex:0},{value:"示例",paraId:2},{value:"import { Scene, Swipe } from '@antv/l7';\n\nconst scene = new Scene({\n  // ...\n});\n\nscene.on('loaded', () => {\n  const swipe = new Swipe({\n    orientation: 'vertical',\n    ratio: 0.5,\n    layers: [],\n    rightLayers: [],\n  });\n  scene.addControl(swipe);\n});\n",paraId:3},{value:"名称",paraId:4,tocIndex:2},{value:"说明",paraId:4,tocIndex:2},{value:"类型",paraId:4,tocIndex:2},{value:"orientation",paraId:4,tocIndex:2},{value:"卷帘方向设置，默认 'vertical'",paraId:4,tocIndex:2},{value:"'vertical'｜'horizontal'",paraId:4,tocIndex:2},{value:"ratio",paraId:4,tocIndex:2},{value:"卷帘的位置，值域为 0 到 1, 默认正中间为 0.5",paraId:4,tocIndex:2},{value:"number",paraId:4,tocIndex:2},{value:"layers",paraId:4,tocIndex:2},{value:"卷帘左侧的图层",paraId:4,tocIndex:2},{value:"ILayer[]",paraId:4,tocIndex:2},{value:"rightLayers",paraId:4,tocIndex:2},{value:"卷帘左侧的图层",paraId:4,tocIndex:2},{value:"ILayer[]",paraId:4,tocIndex:2},{value:"className",paraId:4,tocIndex:2},{value:"自定义样式名",paraId:4,tocIndex:2},{value:"string",paraId:4,tocIndex:2},{value:"style",paraId:4,tocIndex:2},{value:"自定义样式",paraId:4,tocIndex:2},{value:"string",paraId:4,tocIndex:2},{value:"名称",paraId:5,tocIndex:3},{value:"说明",paraId:5,tocIndex:3},{value:"类型",paraId:5,tocIndex:3},{value:"setOptions",paraId:5,tocIndex:3},{value:"更新配置，参数需要参考对应组件的",paraId:5,tocIndex:3},{value:"配置",paraId:6,tocIndex:3},{value:"(newOption: Partial<Option>) => void",paraId:5,tocIndex:3},{value:"getOptions",paraId:5,tocIndex:3},{value:"获取当前",paraId:5,tocIndex:3},{value:"配置",paraId:7,tocIndex:3},{value:"() => Option",paraId:5,tocIndex:3},{value:"show",paraId:5,tocIndex:3},{value:"显示组件",paraId:5,tocIndex:3},{value:"() => void",paraId:5,tocIndex:3},{value:"hide",paraId:5,tocIndex:3},{value:"隐藏组件",paraId:5,tocIndex:3},{value:"() => void",paraId:5,tocIndex:3},{value:"getContainer",paraId:5,tocIndex:3},{value:"获取当前控件对应的 ",paraId:5,tocIndex:3},{value:"DOM",paraId:5,tocIndex:3},{value:" 容器",paraId:5,tocIndex:3},{value:"() => HTMLElement",paraId:5,tocIndex:3},{value:"名称",paraId:8,tocIndex:3},{value:"说明",paraId:8,tocIndex:3},{value:"类型",paraId:8,tocIndex:3},{value:"addLayer",paraId:8,tocIndex:3},{value:"添加要剪裁的图层",paraId:8,tocIndex:3},{value:"(layer: ILayer ｜ ILayer[], addRight: boolean = false) => void",paraId:8,tocIndex:3},{value:"removeLayer",paraId:8,tocIndex:3},{value:"移除剪裁的图层",paraId:8,tocIndex:3},{value:"(layer: ILayer ｜ ILayer[]) => void",paraId:8,tocIndex:3},{value:"removeLayers",paraId:8,tocIndex:3},{value:"清除所有图层",paraId:8,tocIndex:3},{value:"() => void",paraId:8,tocIndex:3},{value:"名称",paraId:9,tocIndex:4},{value:"说明",paraId:9,tocIndex:4},{value:"类型",paraId:9,tocIndex:4},{value:"add",paraId:9,tocIndex:4},{value:"组件被添加时的事件",paraId:9,tocIndex:4},{value:"(this) => void",paraId:9,tocIndex:4},{value:"remove",paraId:9,tocIndex:4},{value:"组件被移除时的事件",paraId:9,tocIndex:4},{value:"(this) => void",paraId:9,tocIndex:4},{value:"show",paraId:9,tocIndex:4},{value:"组件显示时的事件",paraId:9,tocIndex:4},{value:"(this) => void",paraId:9,tocIndex:4},{value:"hide",paraId:9,tocIndex:4},{value:"组件隐藏时的事件",paraId:9,tocIndex:4},{value:"(this) => void",paraId:9,tocIndex:4},{value:"名称",paraId:10,tocIndex:4},{value:"说明",paraId:10,tocIndex:4},{value:"类型",paraId:10,tocIndex:4},{value:"moving",paraId:10,tocIndex:4},{value:"卷帘移动事件",paraId:10,tocIndex:4},{value:"(data: {size: number[], ratio: number[]}) => void",paraId:10,tocIndex:4}]},49862:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(37240);const d=[{value:"用于控制地图",paraId:0},{value:"放大",paraId:0},{value:"和",paraId:0},{value:"缩小",paraId:0},{value:"的控件，并且当地图达到最大或最小缩放比时，会禁用对应缩放按钮。",paraId:0},{value:"示例",paraId:1},{value:"import { Scene, Zoom } from '@antv/l7';\n\nconst scene = new Scene({\n  //...\n});\n\nscene.on('loaded', () => {\n  const zoom = new Zoom({\n    zoomInTitle: '放大',\n    zoomOutTitle: '缩小',\n  });\n  scene.addControl(zoom);\n});\n",paraId:2},{value:"名称",paraId:3,tocIndex:1},{value:"说明",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"zoomInText",paraId:3,tocIndex:1},{value:"放大按钮的展示内容",paraId:3,tocIndex:1},{value:"Element",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:"zoomInTitle",paraId:3,tocIndex:1},{value:"放大按钮的 ",paraId:3,tocIndex:1},{value:"title",paraId:3,tocIndex:1},{value:" 属性",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:"zoomOutText",paraId:3,tocIndex:1},{value:"缩小按钮的展示内容",paraId:3,tocIndex:1},{value:"Element",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:"zoomOutTitle",paraId:3,tocIndex:1},{value:"缩小按钮的 ",paraId:3,tocIndex:1},{value:"title",paraId:3,tocIndex:1},{value:" 属性",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:"showZoom",paraId:3,tocIndex:1},{value:"是否展示地图当前实时 zoom 数值，默认向下取整",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"名称",paraId:4,tocIndex:1},{value:"说明",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"position",paraId:4,tocIndex:1},{value:"控件被添加到地图中的位置以及排列方式，详情可见 ",paraId:4,tocIndex:1},{value:"控件插槽",paraId:5,tocIndex:1},{value:"Position",paraId:6,tocIndex:1},{value:"className",paraId:4,tocIndex:1},{value:"自定义样式名",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:"style",paraId:4,tocIndex:1},{value:"自定义样式",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:"export type Position =\n  | 'topleft' // ↖ 左上角，纵向排列\n  | 'lefttop' // ↖ 左上角，横向排列\n  | 'topright' // ↗ 右上角，纵向排列\n  | 'righttop' // ↗ 右上角，横向排列\n  | 'bottomleft' // ↙ 左下角，纵向排列\n  | 'leftbottom' // ↙ 左下角，横向排列\n  | 'bottomright' // ↘ 右下角，纵向排列\n  | 'rightbottom' // ↘ 右下角，横向排列\n  | 'topcenter' // ↑ 上方中央，横向排列\n  | 'bottomcenter' // ↓ 下方中间，横向排列\n  | 'leftcenter' // ← 左边中间，纵向排列\n  | 'rightcenter' // → 右边中间，纵向排列\n  | Element; // 传入 DOM 作为当前控件的容器\n",paraId:7,tocIndex:2},{value:"名称",paraId:8,tocIndex:3},{value:"说明",paraId:8,tocIndex:3},{value:"类型",paraId:8,tocIndex:3},{value:"zoomIn",paraId:8,tocIndex:3},{value:"放大地图",paraId:8,tocIndex:3},{value:"() => void",paraId:8,tocIndex:3},{value:"zoomOut",paraId:8,tocIndex:3},{value:"缩小底图",paraId:8,tocIndex:3},{value:"() => void",paraId:8,tocIndex:3},{value:"名称",paraId:9,tocIndex:3},{value:"说明",paraId:9,tocIndex:3},{value:"类型",paraId:9,tocIndex:3},{value:"setOptions",paraId:9,tocIndex:3},{value:"更新配置，参数需要参考对应组件的",paraId:9,tocIndex:3},{value:"配置",paraId:10,tocIndex:3},{value:"(newOption: Partial<Option>) => void",paraId:9,tocIndex:3},{value:"getOptions",paraId:9,tocIndex:3},{value:"获取当前",paraId:9,tocIndex:3},{value:"配置",paraId:11,tocIndex:3},{value:"() => Option",paraId:9,tocIndex:3},{value:"show",paraId:9,tocIndex:3},{value:"显示组件",paraId:9,tocIndex:3},{value:"() => void",paraId:9,tocIndex:3},{value:"hide",paraId:9,tocIndex:3},{value:"隐藏组件",paraId:9,tocIndex:3},{value:"() => void",paraId:9,tocIndex:3},{value:"getContainer",paraId:9,tocIndex:3},{value:"获取当前控件对应的 ",paraId:9,tocIndex:3},{value:"DOM",paraId:9,tocIndex:3},{value:" 容器",paraId:9,tocIndex:3},{value:"() => HTMLElement",paraId:9,tocIndex:3},{value:"名称",paraId:12,tocIndex:4},{value:"说明",paraId:12,tocIndex:4},{value:"类型",paraId:12,tocIndex:4},{value:"add",paraId:12,tocIndex:4},{value:"组件被添加时的事件",paraId:12,tocIndex:4},{value:"(this) => void",paraId:12,tocIndex:4},{value:"remove",paraId:12,tocIndex:4},{value:"组件被移除时的事件",paraId:12,tocIndex:4},{value:"(this) => void",paraId:12,tocIndex:4},{value:"show",paraId:12,tocIndex:4},{value:"组件显示时的事件",paraId:12,tocIndex:4},{value:"(this) => void",paraId:12,tocIndex:4},{value:"hide",paraId:12,tocIndex:4},{value:"组件隐藏时的事件",paraId:12,tocIndex:4},{value:"(this) => void",paraId:12,tocIndex:4}]},57431:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(39816);const d=[{value:"L7 在通过 debugService 的形式对外提供调试服务，通过 debugService 用户可以获得一些有助于性能监控的信息。",paraId:0,tocIndex:0},{value:"用户可以通过 scene 初始化的时候和 debugService 提供的方法来开启监控。",paraId:1,tocIndex:1},{value:"// 可以在 scene 初始化的时候打开监控\nconst scene = new Scene({\n  debug: true, // 默认为 false\n});\n\n// 可以通过 debugService 单独控制监控\nconst debugService = scene.getDebugService();\ndebugService.serEnable(true); // 开启监控\n",paraId:2,tocIndex:1},{value:"用户通过 getLog 方法获取日志，通过传入不通的参数，用户可以准确获得自己需要的日志内容。",paraId:3,tocIndex:2},{value:"// 获取地图初始化日志\ndebugService.getLog('map'); // map 为固定值\n\n// 在获取图层的创建日志时，为了获取到全部的数据，需要在 layer 创建完成之后获取\nlayer.on('inited', () => {\n  debugService.getLog(layer.id); // 获取单个图层创建日志\n});\n\nlayerAllLoad([pointLayer1, pointLayer2], () => {\n  // layerAllLoad 自己实现监听\n  debugService.getLog([pointLayer1.id, pointLayer2.id]); // 获取多个图层创建日志\n});\n\n// 获取所有日志\ndebugService.getLog();\n",paraId:4,tocIndex:2},{value:"通过 getLog 方法可以获得如下的日志信息",paraId:5,tocIndex:2},{value:"const enum IDebugLog {\n  MapInitStart = 'mapInitStart', \t\t\t// 地图初始化时间\n\n  LayerInitStart = 'layerInitStart',\t// 图层初始化开始时间\n  LayerInitEnd = 'layerInitEnd',\t\t\t// 图层初始化结束时间\n\n  SourceInitStart = 'sourceInitStart',// souce 初始化开始时间\n  SourceInitEnd = 'sourceInitEnd',\t\t// souce 初始化结束时间\n\n  // scale：将数据进行 scale 映射处理 => 将数据从定义域转化到值域\n  // 如： layer.size('v', [1, 10]);\n  //  \t\t根据字段 v 表示的定义域将 size 的结果映射到 1 ～ 10 之间\n  ScaleInitStart = 'scaleInitStart',\t// scale 初始化开始时间\n  ScaleInitEnd = 'scaleInitEnd',\t\t\t// scale 初始化结束时间\n\n  // mapping：构建渲染数据\n  MappingStart = 'mappingStart',\t\t\t// mapping 初始化开始时间\n  MappingEnd = 'mappingEnd',\t\t\t\t\t// mapping 初始化结束时间\n\n  // build model：构建渲染使用的程序对象、构建网格、纹理等\n  BuildModelStart = 'buildModelStart',// souce 初始化开始时间\n  BuildModelEnd = 'buildModelEnd',\t\t// souce 初始化结束时间\n}\n",paraId:6,tocIndex:2},{value:"debugService 提供了监听图层渲染时间的便捷方法, 通过 renderDebug 开启。",paraId:7,tocIndex:3},{value:"debugService 支持事件监听，常用与监听渲染。",paraId:8,tocIndex:4},{value:"debugService.on('renderEnd', renderInfo => {\n  const {\n    renderUid,\t\t\t// 当前帧渲染唯一编号\n    renderStart,\t\t// 当前帧渲染开始时间\n    renderEnd,\t\t\t// 当前帧渲染结束时间\n    renderDuration\t// 当前帧渲染时间\n  } = renderInfo;\n  ...\n}\n",paraId:9,tocIndex:4},{value:"debugService 事件取消监听。",paraId:10,tocIndex:5}]},75091:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(79498);const d=[{value:"l7-maps 提供 ",paraId:0,tocIndex:0},{value:"Earth",paraId:0,tocIndex:0},{value:" 地图，相较于高德地图、mapbox 地图，是完全不同的一种表现形式，提供了全球视角下的可视化展示能力，为用户提供了更多的地理信息可视化表现形式。",paraId:0,tocIndex:0},{value:"✨ 为了区别普通的地图，l7-maps 提供了全新的 ",paraId:1,tocIndex:0},{value:"Earth",paraId:1,tocIndex:0},{value:" 地图类型， L7 提供对应的 ",paraId:1,tocIndex:0},{value:"EarthLayer",paraId:1,tocIndex:0},{value:" 图层",paraId:1,tocIndex:0},{value:"import { EarthLayer } from '@antv/l7';\nimport { Earth } from '@antv/l7-maps';\n",paraId:2,tocIndex:0},{value:"平面点: circle",paraId:3,tocIndex:2},{value:"圆柱点: cylinder",paraId:4,tocIndex:2},{value:"3D 弧线: arc3d",paraId:5,tocIndex:3},{value:"// 1、引入对应模块\nimport { Scene, Earth } from '@antv/l7-maps';\nimport { EarthLayer } from '@antv/l7-layers';\n\n// 2、构建 Earth Map\nconst scene = new Scene({\n  id: 'map',\n  map: new Earth({}),\n});\n\n// 3、构建地球图层，当前的 shape 为 base，表示基础球体\nconst earthlayer = new EarthLayer()\n  .source(\n    // 地球表面的纹理\n    'https://gw.alipayobjects.com/mdn/rms_23a451/afts/img/A*3-3NSpqRqUoAAAAAAAAAAAAAARQnAQ',\n    {\n      parser: {\n        type: 'image',\n        extent: [121.168, 30.2828, 121.384, 30.421],\n      },\n    },\n  )\n  .color('#f00')\n  .shape('base')\n  .style({\n    opacity: 1.0,\n    radius: 40,\n    globalOptions: {\n      ambientRatio: 0.6, // 环境光\n      diffuseRatio: 0.4, // 漫反射\n      specularRatio: 0.1, // 高光反射\n      earthTime: 0.1,\n    },\n  })\n  .animate(true);\n\nscene.on('loaded', () => {\n  // 4、添加基础地球球体\n  scene.addLayer(earthlayer);\n});\n// 经过上述的步骤，我们就可以在场景中添加一个基础的地球了\n",paraId:6,tocIndex:4},{value:"作为 l7-maps 的基础地图类型，",paraId:7,tocIndex:6},{value:"Earth",paraId:7,tocIndex:6},{value:" 提供了地球系统的相机系统，目前只需要传入一个空对象。",paraId:7,tocIndex:6},{value:"args: ",paraId:8,tocIndex:6},{value:"{}",paraId:8,tocIndex:6},{value:"import { Scene, Earth } from '@antv/l7-maps';\n\nconst scene = new Scene({\n  id: 'map',\n  map: new Earth({}),\n});\n",paraId:9,tocIndex:6},{value:"提供了简单的方法控制地球系统的旋转（实际上控制的是相机的旋转，需要传入一个对象",paraId:10,tocIndex:7},{value:"force: ",paraId:11,tocIndex:7},{value:"false",paraId:11,tocIndex:7},{value:" 判断是否强制生效，默认该方法的优先级比用户鼠标操作要低，当用户操作相机的时候，该方法会失效",paraId:11,tocIndex:7},{value:"reg: ",paraId:11,tocIndex:7},{value:"0.01",paraId:11,tocIndex:7},{value:" 旋转的角度（视觉上地球的旋转角度）， ",paraId:11,tocIndex:7},{value:"reg",paraId:11,tocIndex:7},{value:" 表示的并不是实际的旋转角度，而是单位旋转角度的比例",paraId:11,tocIndex:7},{value:"\n🌟 单位旋转角度 = Math.min(this.earthCameraZoom * this.earthCameraZoom, 1)",paraId:11,tocIndex:7},{value:"import { Scene, Earth } from '@antv/l7-maps';\n\nconst scene = new Scene({\n  id: 'map',\n  map: new Earth({}),\n});\n\nfunction step() {\n  scene.map.rotateY({\n    option: {\n      force: true,\n      reg: 0.1,\n    },\n  });\n  requestAnimationFrame(step);\n}\n\nscene.on('loaded', () => {\n  scene.addLayer(earthlayer);\n  step();\n});\n",paraId:12,tocIndex:7},{value:"地球图层区别于普通高德地图和 Mapbox 地图的图层，只在地球模式下可以被使用，用于表示地球的球体、大气层、辉光等效果。",paraId:13,tocIndex:8},{value:"\n🌟 使用不同的 ",paraId:13,tocIndex:8},{value:"shape",paraId:13,tocIndex:8},{value:" 参数表示区别不同的地球图层。",paraId:13,tocIndex:8},{value:"source: 数据",paraId:14,tocIndex:9},{value:"map: 地球表面纹理贴图的地址",paraId:15,tocIndex:9},{value:"parser: 解析器，目前只需要写固定的对象值即可: ",paraId:15,tocIndex:9},{value:'{ parser: { type: "image" } }',paraId:15,tocIndex:9},{value:"shape: 图层类型",paraId:16,tocIndex:9},{value:"默认值是 ",paraId:17,tocIndex:9},{value:"base",paraId:17,tocIndex:9},{value:", 目前支持的 ",paraId:17,tocIndex:9},{value:"shape",paraId:17,tocIndex:9},{value:" 类型有:",paraId:17,tocIndex:9},{value:"base: 球体",paraId:18,tocIndex:9},{value:"atomSphere: 大气层",paraId:18,tocIndex:9},{value:"bloomSphere: 辉光",paraId:18,tocIndex:9},{value:"当用户的 ",paraId:19,tocIndex:9},{value:"shape",paraId:19,tocIndex:9},{value:" 参数不被识别时，自动降级为 ",paraId:19,tocIndex:9},{value:"base",paraId:19,tocIndex:9},{value:" 类型",paraId:19,tocIndex:9},{value:"globalOptions: 图层样式",paraId:20,tocIndex:9},{value:"ambientRatio: 环境光",paraId:21,tocIndex:9},{value:"diffuseRatio: 漫反射",paraId:21,tocIndex:9},{value:"specularRatio: 高光反射",paraId:21,tocIndex:9},{value:"const earthlayer = new EarthLayer()\n  .source('https://gw.alipayobjects.com/mdn/rms_23a451/afts/img/A*3-3NSpqRqUoAAAAAAAAAAAAAARQnAQ', {\n    parser: {\n      type: 'image',\n    },\n  })\n  .shape('base')\n  .style({\n    globalOptions: {\n      ambientRatio: 0.6, // 环境光\n      diffuseRatio: 0.4, // 漫反射\n      specularRatio: 0.1, // 高光反射\n    },\n  });\n",paraId:22,tocIndex:9},{value:"atomLayer",paraId:23,tocIndex:10},{value:" 作为地球的效果图层，不需要传入数据，所以可以不调用 ",paraId:23,tocIndex:10},{value:"source",paraId:23,tocIndex:10},{value:" 方法",paraId:23,tocIndex:10},{value:"const atomLayer = new EarthLayer().color('#2E8AE6').shape('atomSphere').style({\n  // 可以控制发光程度\n  opacity: 1,\n});\n",paraId:24,tocIndex:10},{value:"bloomLayer",paraId:25,tocIndex:11},{value:" 作为地球的效果图层，不需要传入数据，所以可以不调用 ",paraId:25,tocIndex:11},{value:"source",paraId:25,tocIndex:11},{value:" 方法",paraId:25,tocIndex:11},{value:"const bloomLayer = new EarthLayer().color('#fff').shape('bloomSphere').style({\n  opacity: 0.5,\n});\n",paraId:26,tocIndex:11}]},68758:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(90546);const d=[{value:"用户在地球模式下使用飞线图层无需做额外的操作，L7 会自动识别地球模式并相关的转化",paraId:0},{value:"地球飞线图通过 ",paraId:1,tocIndex:0},{value:"LineLayer",paraId:1,tocIndex:0},{value:" 和 ",paraId:1,tocIndex:0},{value:"EarthLayer",paraId:1,tocIndex:0},{value:" 实例化",paraId:1,tocIndex:0},{value:"import { EarthLayer, LineLayer } from '@antv/l7';\n",paraId:2,tocIndex:0},{value:"地球飞线图层 shape 只支持 ",paraId:3,tocIndex:1},{value:"arc3d",paraId:3,tocIndex:1}]},75152:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(4158);const d=[{value:"后处理（Post-Process Effect）是 3D 渲染常见的处理效果，是一种对渲染之后的画面进行再加工的技术，一般用于实现各种特效。L7 的后处理模块为用户提供了一些常见的后处理效果，同时也提供了标准规范，允许用户自定义后处理效果。",paraId:0},{value:"🌟 需要注意的是，使用后处理通常会产生额外的性能消耗，用户应该根据项目的实际情况合理使用后处理。",paraId:1},{value:"const layer = new LineLayer({\n  enableMultiPassRenderer: true,\n  passes: [\n    [\n      'bloom',\n      {\n        bloomBaseRadio: 0.8,\n        bloomRadius: 2,\n        bloomIntensity: 1\n      }\n    ]\n  ]\n}).source(data)\n  .size('ELEV', h => [ h % 50 === 0 ? 1.0 : 0.5, (h - 1300) * 0.2 ])\n  .shape('line')\n  .scale('ELEV', {\n    type: 'quantize'\n  })\n  .color('ELEV', [\n    '#094D4A',\n    ...\n  ]);\nscene.addLayer(layer);\n",paraId:2,tocIndex:0},{value:"为了开启图层的后处理能力，我们需要在初始化图层的时候配置 enableMultiPassRenderer 为 true，同时传入该图层作用的处理效果配置。",paraId:3,tocIndex:1},{value:"let pointLayer = new PointLayer({\n  zIndex: 1,\n  enableMultiPassRenderer: false,\n  passes: [\n    [\n      'bloom',\n      {\n        bloomBaseRadio: 0.95,\n        bloomRadius: 4,\n        bloomIntensity: 1.1,\n      },\n    ],\n  ],\n});\n",paraId:4,tocIndex:1},{value:"enableMultiPassRenderer 配置该图层是否开始后处理能力",paraId:5,tocIndex:1},{value:"passes 后处理配置列表",paraId:5,tocIndex:1},{value:"\n🌟 passes 需要根据一定的规则配置",paraId:5,tocIndex:1},{value:"传统的后处理渲染往往会对场景中所有的对象做统一的后处理，而许多时候我们只需要对场景中的一部分内容做后处理。L7 的后处理模块天然支持以图层为单位进行后处理，这使的用户对 L7 场景内容的处理有更高的自由度。",paraId:6,tocIndex:2},{value:"用户在初始化完图层对象之后，若想调整后处理效果的参数，可以直接使用 style 方法",paraId:7,tocIndex:3},{value:"layer.style({\n  passes: [\n    [\n      'colorHalftone',\n      {\n        // 更新 cenrter 的位置\n        center: [newX, newY],\n      },\n    ],\n  ],\n});\nscene.render();\n",paraId:8,tocIndex:3},{value:"为了方便用户切换后处理的状态（开启、关闭后处理），我们为用户提供了专门的方法",paraId:9,tocIndex:4},{value:"// 当前图层存在 multiPass，我们需要关闭时\n// 直接关闭\nlayer.setMultiPass(false);\n// 关闭的同时清除 passes\nlayer.setMultiPass(false, []);\n\n// 当前图层不存在 multiPass，我们需要开启时\n// 图层初始化时已经传入 passes\nconst layer = new PolygonLayer({\n  zIndex: 0,\n  enableMultiPassRenderer: false,\n  passes: [\n    [\n      'bloom',\n      {\n        bloomBaseRadio: 0.5,\n        bloomRadius: 20,\n        bloomIntensity: 1,\n      },\n    ],\n  ],\n});\nlayer.setMultiPass(true);\n\n// 图层初始化时没有传入 passes\nlayer.setMultiPass(true, [\n  [\n    'bloom',\n    {\n      bloomRadius: 10,\n      bloomIntensity: 1,\n    },\n  ],\n]);\n",paraId:10,tocIndex:4},{value:"passes 可以传入多种后处理，普通渲染的结果是第一个后处理的输入，前一种后处理的输出是后一个后处理的输入，最后的结果输出到屏幕。",paraId:11,tocIndex:5},{value:"L7 的后处理模块预置了几种后处理效果，因此用户可以直接在 passes 中配置使用。",paraId:12,tocIndex:6},{value:"const bloomPass = [\n  'bloom',\n  {\n    bloomBaseRadio: 0.5,\n    bloomRadius: 20,\n    bloomIntensity: 1,\n  },\n];\n",paraId:13,tocIndex:7},{value:"辉光后处理",paraId:14,tocIndex:7},{value:"bloomBaseRadio",paraId:15,tocIndex:7},{value:"\n设置保持图形原本样式的比例，值在 0 - 1 之间，值为 1 时完全保存本身的样式",paraId:15,tocIndex:7},{value:"bloomRadius\n设置 bloom 的半径，值越大，bloom 范围越大",paraId:15,tocIndex:7},{value:"bloomIntensity\n设置 bloom 的强度，值越大，辉光越强",paraId:15,tocIndex:7},{value:"垂直方向模糊/水平方向模糊",paraId:16,tocIndex:8},{value:"const blurVPass = [\n  'blurV',\n  {\n    blurRadius: 5,\n  },\n];\nconst blurHPass = [\n  'blurH',\n  {\n    blurRadius: 5,\n  },\n];\n",paraId:17,tocIndex:8},{value:"blurRadius\n设置模糊半径",paraId:18,tocIndex:8},{value:"colorHalftone",paraId:19,tocIndex:9},{value:"const colorHalftonePass = [\n  'colorHalftone',\n  {\n    angle: 0,\n    size: 8,\n    centerX: 0.5,\n    centerY: 0.5,\n  },\n];\n",paraId:20,tocIndex:9},{value:"angle\n设置角度",paraId:21,tocIndex:9},{value:"size\n设置大小",paraId:21,tocIndex:9},{value:"centerX\n设置中心点 X",paraId:21,tocIndex:9},{value:"centerY\n设置中心点 Y",paraId:21,tocIndex:9},{value:"六边形像素",paraId:22,tocIndex:10},{value:"const hexagonalPixelatePass = [\n  'hexagonalPixelate',\n  {\n    scale: 10,\n    centerX: 0.5,\n    centerY: 0.5,\n  },\n];\n",paraId:23,tocIndex:10},{value:"scale\n设置缩放",paraId:24,tocIndex:10},{value:"centerX\n设置中心点 X",paraId:24,tocIndex:10},{value:"centerY\n设置中心点 Y",paraId:24,tocIndex:10},{value:"ink",paraId:25,tocIndex:11},{value:"const inkPass = [\n  'ink',\n  {\n    strength: 1,\n  },\n];\n",paraId:26,tocIndex:11},{value:"strength\n设置强度",paraId:27,tocIndex:11},{value:"噪声",paraId:28,tocIndex:12},{value:"const noisePass = [\n  'noise',\n  {\n    amount: 1,\n  },\n];\n",paraId:29,tocIndex:12},{value:"amount\n设置噪点数量",paraId:30,tocIndex:12},{value:"用户通过 L7 定义的标准可以轻松的自定义后处理效果。",paraId:31,tocIndex:13},{value:"import { BasePostProcessingPass, PolygonLayer, Scene } from '@antv/l7';\n\ninterface IDotScreenEffectConfig {\n  center: [number, number]; // pattern 圆心\n  angle: number; // dot 旋转角度\n  size: number; // dot 尺寸\n}\n\nclass DotScreenEffect extends BasePostProcessingPass<IDotScreenEffectConfig> {\n  protected setupShaders() {\n    this.shaderModuleService.registerModule('dotScreenEffect', {\n      vs: this.quad,\n      fs: `\n      varying vec2 v_UV;\n\n      uniform sampler2D u_Texture;\n      uniform vec2 u_ViewportSize : [1.0, 1.0];\n      uniform vec2 u_Center : [0.5, 0.5];\n      uniform float u_Angle : 1;\n      uniform float u_Size : 3;\n\n      float pattern(vec2 texSize, vec2 texCoord) {\n        float scale = 3.1415 / u_Size;\n        float s = sin(u_Angle), c = cos(u_Angle);\n        vec2 tex = texCoord * texSize - u_Center * texSize;\n        vec2 point = vec2(\n          c * tex.x - s * tex.y,\n          s * tex.x + c * tex.y\n        ) * scale;\n        return (sin(point.x) * sin(point.y)) * 4.0;\n      }\n      vec4 dotScreen_filterColor(vec4 color, vec2 texSize, vec2 texCoord) {\n        float average = (color.r + color.g + color.b) / 3.0;\n        return vec4(vec3(average * 10.0 - 5.0 + pattern(texSize, texCoord)), color.a);\n      }\n\n      void main() {\n        gl_FragColor = vec4(texture2D(u_Texture, v_UV));\n        gl_FragColor = dotScreen_filterColor(gl_FragColor, u_ViewportSize, v_UV);\n      }\n      `,\n    });\n    const { vs, fs, uniforms } = this.shaderModuleService.getModule('dotScreenEffect');\n    const { width, height } = this.rendererService.getViewportSize();\n    return {\n      vs,\n      fs,\n      uniforms: {\n        ...uniforms,\n        u_ViewportSize: [width, height],\n      },\n    };\n  }\n}\n\n// 注册自定义后处理效果\nscene.registerPostProcessingPass(DotScreenEffect, 'dotScreenEffect');\nconst layer = new PolygonLayer({\n  enableMultiPassRenderer: true,\n  passes: [\n    [\n      'dotScreenEffect',\n      {\n        size: 8,\n        angle: 1,\n      },\n    ],\n  ],\n});\n",paraId:32,tocIndex:13}]},56886:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(32780);const d=[{value:"用户在地球模式下使用点图层无需做额外的操作，L7 会自动识别地球模式并相关的转化",paraId:0},{value:"地球点图层通过 ",paraId:1,tocIndex:0},{value:"PointLayer",paraId:1,tocIndex:0},{value:" 和 ",paraId:1,tocIndex:0},{value:"EarthLayer",paraId:1,tocIndex:0},{value:" 实例化",paraId:1,tocIndex:0},{value:"import { PointLayer, EarthLayer } from '@antv/l7';\n",paraId:2,tocIndex:0}]},65539:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(10093);const d=[{value:"我们通常使用经纬度来描述地理位置，但是在某些特殊的场景，我们往往倾向于使用更加简单的平面坐标系(xyz)来描述位置的相对坐标，为此 L7 提供了简单坐标系的模式。",paraId:0},{value:"在线案例",paraId:1},{value:"为了使用简单坐标系，我们需要是使用 L7 自定义的 Map 地图类型，同时制定 map 的 version 属性",paraId:2,tocIndex:0},{value:"import { Scene, ImageLayer, PointLayer } from '@antv/l7';\nimport { Map } from '@antv/l7-maps';\n\nconst scene = new Scene({\n  id: 'map',\n  map: new Map({\n    center: [500, 500],\n    pitch: 0,\n    zoom: 3,\n    version: 'SIMPLE',\n    mapSize: 1000,\n    maxZoom: 5,\n    minZoom: 2,\n    pitchEnabled: false,\n    rotateEnabled: false,\n  }),\n});\n",paraId:3,tocIndex:0},{value:"用户在使用自定义坐标系的时候，需要将地图的类型设置成 'SIMPLE'",paraId:4,tocIndex:1},{value:"用户在使用自定义坐标系的时候，可以设置绘图区域的大小。绘图区域默认是 10000 X 10000 的矩形区域，坐标起点是左下角，水平向右为 X 正方向，垂直向上是 Y 正方向。",paraId:5,tocIndex:2},{value:"用户在使用自定义坐标系的时候，推荐将 pitchEnabled/rotateEnabled 设置为 false",paraId:6,tocIndex:3},{value:"用户在使用自定义坐标系的时候，可以正常使用普通的图层，唯一的区别就是需要将原本的经纬度坐标转化为平面坐标",paraId:7,tocIndex:4},{value:"const imagelayer = new ImageLayer({}).source(\n   'https://gw.alipayobjects.com/mdn/rms_816329/afts/img/A*I0X5R4jAUQ4AAAAAAAAAAAAAARQnAQ',\n   {\n   parser: {\n      type: 'image',\n      extent: [360, 400, 640, 600],\n   },\n   },\n);\n\nconst textlayer = new PointLayer({ zIndex: 2 })\n.source(\n  [\n    {\n      x: 515,\n      y: 575,\n      t: '小屋',\n    },\n    ...\n  ],\n  {\n    parser: {\n      type: 'json',\n      x: 'x',\n      y: 'y',\n    },\n  },\n)\n.shape('t', 'text')\n.size(12)\n.active({\n  color: '#00f',\n  mix: 0.9\n})\n.color('rgb(86, 156, 214)')\n.style({\n  textAnchor: 'center', // 文本相对锚点的位置 center|left|right|top|bottom|top-left\n  spacing: 2, // 字符间距\n  fontWeight: '800',\n  padding: [1, 1], // 文本包围盒 padding [水平，垂直]，影响碰撞检测结果，避免相邻文本靠的太近\n  stroke: '#ffffff', // 描边颜色\n  strokeWidth: 2, // 描边宽度\n  textAllowOverlap: true,\n});\n\nconst lineData = {\n      type: 'FeatureCollection',\n      features: [\n        {\n          type: 'Feature',\n          properties: {\n            testOpacity: 0.8,\n          },\n          geometry: {\n            type: 'Polygon',\n            coordinates: [\n              [\n                [6000, 6000],\n                [6000, 7000],\n                [7000, 7000],\n                [7000, 6000],\n              ],\n            ],\n          },\n        },\n      ],\n    };\n\n    const linelayer = new LineLayer()\n      .source(lineData)\n      .shape('line')\n      .size(10)\n      .color('#0f0')\n      .active(true);\n\n\nconst polygonData = {\n      type: 'FeatureCollection',\n      features: [\n        {\n          type: 'Feature',\n          properties: {\n            testOpacity: 0.4,\n          },\n          geometry: {\n            type: 'MultiPolygon',\n            coordinates: [\n              [\n                [\n                  [6000, 6000],\n                  [6000, 7000],\n                  [7000, 7000],\n                  [7000, 6000],\n                  [6000, 6000],\n                ],\n                [\n                  [6300, 6300],\n                  [6300, 6700],\n                  [6700, 6700],\n                  [6700, 6300],\n                  [6300, 6300],\n                ],\n              ],\n              [\n                [\n                  [5000, 5000],\n                  [5000, 6000],\n                  [6000, 6000],\n                  [6000, 5000],\n                  [5000, 5000],\n                ],\n              ],\n            ],\n          },\n        },\n      ],\n    };\n\n    const polygonLayer = new PolygonLayer()\n      .source(polygonData)\n      .shape('fill')\n      .color('#f00')\n      .style({\n        opacity: 0.6,\n      })\n      .active(true);\n",paraId:8,tocIndex:4}]},78954:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(43112);const d=[{value:"1、L7 支持允许用户接入第三方的渲染引擎对地图场景进行开发，threejs 作为当前最广泛使用的通用 3D 渲染引擎，L7 将其集成后可以满足\n用户自定义开发的需求，可以让 L7 覆盖更多的应用场景。",paraId:0,tocIndex:0},{value:"2、目前 L7Three 模块为了抹平不同地图底图之间的差异，提供了一些兼容方法，如 setMeshScale 方法，通过这些方法用户可以在不同的底图\n环境中使用同一套代码。",paraId:1,tocIndex:0},{value:"3、L7 提供的适配方法只负责 threejs 世界坐标到不同地图底图坐标的转化、 gl 上下文的共享以及渲染帧的同步，其余关于 3D 场景内容的搭建\n与普通 threejs 应用的开发没有任何区别。",paraId:2,tocIndex:0},{value:"4、L7 本身并没有集成 threejs，所以用于在使用 L7Three 模块的时候需要独立安装 threejs。",paraId:3,tocIndex:0},{value:"✨ 目前 L7 官方提供的 threejs 兼容是根据 0.115.0 版本进行开发的，使用其他版本 threejs 可能会存在兼容问题",paraId:4,tocIndex:0},{value:"// 1、引入对应模块\nimport { ThreeLayer, ThreeRender } from '@antv/l7-three';\nimport * as THREE from 'three';\n...\n// 2、注册服务\nscene.registerRenderService(ThreeRender);\n...\n// 3、构建 threejs 图层对象并在其中添加 threejs 构建的网格对象\nconst threeJSLayer = new ThreeLayer({\n  onAddMeshes: (threeScene: THREE.Scene, layer: ThreeLayer) => {\n    threeScene.add(new THREE.AmbientLight(0xffffff));\n\n    const sunlight = new THREE.DirectionalLight(0xffffff, 0.25);\n    sunlight.position.set(0, 80000000, 100000000);\n    sunlight.matrixWorldNeedsUpdate = true;\n    threeScene.add(sunlight);\n\n    let center = scene.getCenter();\n\n    let cubeGeometry = new THREE.BoxBufferGeometry(10000, 10000, 10000);\n    let cubeMaterial = new THREE.MeshNormalMaterial();\n    let cube = new THREE.Mesh(cubeGeometry, cubeMaterial);\n\n    layer.setObjectLngLat(cube, [center.lng + 0.05, center.lat], 0);\n    threeScene.add(cube);\n  },\n})\n.source(data)\n.animate(true);\n\n// 4、添加 threejs 图层对象\nscene.addLayer(threeJSLayer);\n\n",paraId:5,tocIndex:1},{value:"L7 将 threejs 的引用封装成一个特殊的图层对象，在使用上与其他的图层相同。",paraId:6,tocIndex:1},{value:"该方法接受两个参数 threeScene: THREE.Scene, layer: ThreeLayer",paraId:7,tocIndex:3},{value:"threeScene: 这是普通的 threejs 场景对象",paraId:8,tocIndex:3},{value:"layer: 这是 L7 提供的 threeLayer 对象，上面挂载了 threejs 空间适配到地图空间所需要的方法",paraId:8,tocIndex:3},{value:"用户新建的图层对象，同时也会在 onAddMesh 方法的第二个参数返回。",paraId:9,tocIndex:4},{value:"以下是挂载在 ThreeLayer 实例上的适配方法。",paraId:10,tocIndex:4},{value:"lnglat: [number, number] 经纬度",paraId:11,tocIndex:5},{value:"altitude: number = 0 相对高度",paraId:11,tocIndex:5},{value:"rotation: [number, number, number] = [0, 0, 0] 旋转角度",paraId:11,tocIndex:5},{value:"scale: [number, number, number] = [1, 1, 1] 缩放比例",paraId:11,tocIndex:5},{value:"用户可以通过该方法计算在对应经纬度点位、相对高度、旋转角度和缩放的模型矩阵\n该方法的返回值是 THREE.Matrix4 类型的矩阵",paraId:12,tocIndex:5},{value:"object: Object3D threejs 对象",paraId:13,tocIndex:6},{value:"lnglat: ILngLat[number, number] 经纬度",paraId:13,tocIndex:6},{value:"altitude = 0 相对高度",paraId:13,tocIndex:6},{value:"用户可以通过该方法将 object 对象从当前位置向指定位置移动（地图经纬度坐标）",paraId:14,tocIndex:6},{value:"object: Object3D threejs 对象",paraId:15,tocIndex:7},{value:"lnglat: ILngLat[number, number] 经纬度",paraId:15,tocIndex:7},{value:"altitude = 0 相对高度",paraId:15,tocIndex:7},{value:"用户可以通过该方法设置 object 对象的位置（地图经纬度坐标）",paraId:16,tocIndex:7},{value:"lnglat: ILngLat[number, number] 经纬度",paraId:17,tocIndex:8},{value:"用户可以通过该方法将经纬度坐标转化成 threejs 世界坐标",paraId:18,tocIndex:8},{value:"object: Object3D threejs 对象",paraId:19,tocIndex:9},{value:"用户在添加 threejs 对象的前可以通过该方法调整 3D 对象的姿态，保证添加对象能正确显示",paraId:20,tocIndex:9},{value:"✨ 在 threejs 世界坐标中，默认的上方向为 Y 轴正方向，而在地图坐标中，默认的上方向为 Z 轴正方向",paraId:21,tocIndex:9},{value:"✨ 用户不一定使用该方法调整物体的姿态，也可以自己实现",paraId:22,tocIndex:9},{value:"object: Object3D threejs 对象",paraId:23,tocIndex:10},{value:"x: number = 1 x 轴方向的缩放比例",paraId:23,tocIndex:10},{value:"y: number = 1 y 轴方向的缩放比例",paraId:23,tocIndex:10},{value:"z: number = 1 z 轴方向的缩放比例",paraId:23,tocIndex:10},{value:"用户可以通过该方法设置 threejs 对象缩放",paraId:24,tocIndex:10},{value:"✨ 其实通过设置 threejs 对象的 scale 属性一样能达到同样的效果，但是由于 mapbox 在计算模型矩阵的时候引入了特殊计算，所以无法直接设置 scale 属性进行缩放",paraId:25,tocIndex:10},{value:"✨ 同样的，可以直接修改 threejs 的 position、rotation 等调整 3D 对象的姿态",paraId:26,tocIndex:10},{value:"mixer: AnimationMixer threejs 的动画混合器",paraId:27,tocIndex:11},{value:"用户通过该方法管理加载模型的动画",paraId:28,tocIndex:11},{value:"返回根据当前地图场景参数下对应的 THREEJS 相机",paraId:29,tocIndex:12},{value:"用户可以使用 threejs 提供的能力加载其支持的任意模型",paraId:30,tocIndex:13},{value:"✨ 以加载 gltf 模型为例",paraId:31,tocIndex:14},{value:"// 1、引入加载器\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\n...\nconst threeJSLayer = new ThreeLayer({\n  onAddMeshes: (threeScene: THREE.Scene, layer: ThreeLayer) => {\n    ...\n    // 2、构建加载器\n    const loader = new GLTFLoader();\n    // 3、加载模型\n    loader.load('https://gw.alipayobjects.com/os/bmw-prod/3ca0a546-92d8-4ba0-a89c-017c218d5bea.gltf',\n    (gltf) => {\n      const model = gltf.scene;\n      layer.adjustMeshToMap(model);\n      layer.setMeshScale(model, 1000, 1000, 1000);\n      layer.setObjectLngLat( model, [center.lng, center.lat], 0 );\n\n      // 4、播放模型上绑定的动画\n      const animations = gltf.animations;\n      if (animations && animations.length) {\n        const mixer = new THREE.AnimationMixer(model);\n        const animation = animations[2];\n        const action = mixer.clipAction(animation);\n        action.play();\n        // 5、由 L7 控制模型动画的播放\n        layer.addAnimateMixer(mixer);\n      }\n    })\n  }\n}).source(data)\n.animate(true) // 若需要播放模型动画，请开启动画模式（或者场景中已经存在开启动画的图层）\n\n",paraId:32,tocIndex:14}]},31638:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(53976);const d=[{value:"WindLayer",paraId:0},{value:" 用于将存储风场信息的图片，设置其风速线采样相关参数，将采样后的风场线的走向、强度通过可视化的方式在地图上呈现出来。",paraId:0},{value:"import { WindLayer } from '@antv/l7';\n",paraId:1,tocIndex:0},{value:"(data, options) => WindLayer, 设置风场相关信息的函数",paraId:2,tocIndex:1},{value:"data: string 存储风场信息的图片地址\n🌟 ",paraId:3,tocIndex:1},{value:"数据获取",paraId:3,tocIndex:1},{value:"options:",paraId:3,tocIndex:1},{value:"{\n  parser: {\n    type: 'image',\n      extent: [-180, -85, 180, 85],  // 用于设置风场图片作用到地图上的经纬图区间\n  },\n}\n",paraId:4,tocIndex:1},{value:"开启动画效果。",paraId:5,tocIndex:2},{value:"layer.animate(true);\n",paraId:6,tocIndex:2},{value:"uMin",paraId:7,tocIndex:3},{value:": 风速 ",paraId:7,tocIndex:3},{value:"X",paraId:7,tocIndex:3},{value:" 轴/横向最小值。",paraId:7,tocIndex:3},{value:"uMax",paraId:7,tocIndex:3},{value:": 风速 ",paraId:7,tocIndex:3},{value:"X",paraId:7,tocIndex:3},{value:" 轴/横向最大值。",paraId:7,tocIndex:3},{value:"vMin",paraId:7,tocIndex:3},{value:": 风速 ",paraId:7,tocIndex:3},{value:"Y",paraId:7,tocIndex:3},{value:" 轴/纵向最小值。",paraId:7,tocIndex:3},{value:"vMax",paraId:7,tocIndex:3},{value:": 风速 ",paraId:7,tocIndex:3},{value:"Y",paraId:7,tocIndex:3},{value:" 轴/纵向最大值。",paraId:7,tocIndex:3},{value:"sizeScale",paraId:7,tocIndex:3},{value:": 风场线条粗细缩放比，",paraId:7,tocIndex:3},{value:"0 - 2",paraId:7,tocIndex:3},{value:"。",paraId:7,tocIndex:3},{value:"fadeOpacity",paraId:7,tocIndex:3},{value:": 线条透明度，",paraId:7,tocIndex:3},{value:"0 - 1",paraId:7,tocIndex:3},{value:"。",paraId:7,tocIndex:3},{value:"numParticles",paraId:7,tocIndex:3},{value:": 线条数量。",paraId:7,tocIndex:3},{value:"rampColors",paraId:7,tocIndex:3},{value:": 线条填充颜色映射。",paraId:7,tocIndex:3},{value:"const rampColors = {\n  colors: ['#3288bd', '#66c2a5', '#abdda4', '#e6f598', '#fee08b', '#fdae61', '#f46d43', '#d53e4f'],\n  positions: [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 1.0],\n};\n",paraId:8,tocIndex:3},{value:"colors  颜色数组",paraId:9,tocIndex:4},{value:"positions 数据区间",paraId:9,tocIndex:4},{value:"配置值域映射颜色的色带，值域的范围为 ",paraId:10,tocIndex:4},{value:"[0 - 1]",paraId:10,tocIndex:4},{value:", 对应的我们需要为每一个 ",paraId:10,tocIndex:4},{value:"position",paraId:10,tocIndex:4},{value:" 位置设置一个颜色值。",paraId:10,tocIndex:4},{value:"⚠️ colors, positions 的长度要相同",paraId:11,tocIndex:4},{value:"layer.style({\n  rampColors: {\n    colors: ['#FF4818', '#F7B74A', '#FFF598', '#91EABC', '#2EA9A1', '#206C7C'],\n    positions: [0, 0.2, 0.4, 0.6, 0.8, 1.0],\n  },\n});\n",paraId:12,tocIndex:4},{value:"在线案例",paraId:13}]},75105:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(77788);const d=[{value:"热力图以特殊高亮的形式显示数据在地理区域的聚集程度，L7 提供了以多种表现形式的热力图，通过切换 ",paraId:0,tocIndex:0},{value:"shape",paraId:0,tocIndex:0},{value:" 参数，用户可以得到不同的热力图",paraId:0,tocIndex:0},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"layer\n  .shape('heatmap')\n  .size('mag', [0, 1.0]) // weight映射通道\n  .style({\n    radius: 20,\n    rampColors: rampColors,\n  });\n",paraId:2,tocIndex:0}]},50542:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(36517);const d=[{value:" ",paraId:0,tocIndex:0},{value:"string",paraId:0,tocIndex:0},{value:" ",paraId:0,tocIndex:0},{value:"optional",paraId:0,tocIndex:0},{value:" ",paraId:0,tocIndex:0},{value:"default:",paraId:0,tocIndex:0},{value:" 自动数字编号",paraId:0,tocIndex:0},{value:"设置图层名称,可根据 name 获取 layer",paraId:1,tocIndex:0},{value:"scene.getLayerByName(name);\n",paraId:2,tocIndex:0},{value:" ",paraId:3,tocIndex:1},{value:"bool",paraId:3,tocIndex:1},{value:" ",paraId:3,tocIndex:1},{value:"optional",paraId:3,tocIndex:1},{value:" ",paraId:3,tocIndex:1},{value:"default:",paraId:3,tocIndex:1},{value:" true",paraId:3,tocIndex:1},{value:"图层是否可见",paraId:4,tocIndex:1},{value:" ",paraId:5,tocIndex:2},{value:"int",paraId:5,tocIndex:2},{value:" ",paraId:5,tocIndex:2},{value:"optional",paraId:5,tocIndex:2},{value:" ",paraId:5,tocIndex:2},{value:"default:",paraId:5,tocIndex:2},{value:" 0",paraId:5,tocIndex:2},{value:"图层绘制顺序，数值大绘制在上层，可以控制图层绘制的上下层级",paraId:6,tocIndex:2},{value:"L7 采用队列渲染的机制，所有的图层在内部保存在一个数组中，每一帧的渲染会将图层数组按照 zIndex 的值进行排序，然后遍历数组，将符合条件的图层渲染到场景中",paraId:7,tocIndex:2},{value:" ",paraId:8,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:" ",paraId:8,tocIndex:3},{value:"optional",paraId:8,tocIndex:3},{value:" ",paraId:8,tocIndex:3},{value:"default:",paraId:8,tocIndex:3},{value:" Mapbox （0-24） 高德 （2-19)",paraId:8,tocIndex:3},{value:"图层显示最小缩放等级",paraId:9,tocIndex:3},{value:" ",paraId:10,tocIndex:4},{value:"number",paraId:10,tocIndex:4},{value:" ",paraId:10,tocIndex:4},{value:"optional",paraId:10,tocIndex:4},{value:" ",paraId:10,tocIndex:4},{value:"default:",paraId:10,tocIndex:4},{value:" Mapbox （0-24） 高德 （2-19)",paraId:10,tocIndex:4},{value:"图层显示最大缩放等级",paraId:11,tocIndex:4},{value:" ",paraId:12,tocIndex:5},{value:"bool",paraId:12,tocIndex:5},{value:" ",paraId:12,tocIndex:5},{value:"optional",paraId:12,tocIndex:5},{value:" ",paraId:12,tocIndex:5},{value:"default:",paraId:12,tocIndex:5},{value:" false",paraId:12,tocIndex:5},{value:"layer 初始化完成之后，地图是否自动缩放到图层范围",paraId:13,tocIndex:5},{value:" ",paraId:14,tocIndex:6},{value:"bool",paraId:14,tocIndex:6},{value:" ",paraId:14,tocIndex:6},{value:"optional",paraId:14,tocIndex:6},{value:" ",paraId:14,tocIndex:6},{value:"default:",paraId:14,tocIndex:6},{value:" 0",paraId:14,tocIndex:6},{value:"图层拾取缓存机制，如 1px 宽度的线鼠标很难拾取(点击)到, 通过设置该参数可扩大拾取的范围（放大图层对象的尺寸）",paraId:15,tocIndex:6},{value:" ",paraId:16,tocIndex:7},{value:"string",paraId:16,tocIndex:7},{value:" ",paraId:16,tocIndex:7},{value:"optional",paraId:16,tocIndex:7},{value:" ",paraId:16,tocIndex:7},{value:"default:",paraId:16,tocIndex:7},{value:" 'normal'",paraId:16,tocIndex:7},{value:"图层元素混合效果",paraId:17,tocIndex:7},{value:"normal 正常效果 默认 发生遮挡的时候，只会显示前面的图层的颜色",paraId:18,tocIndex:7},{value:"additive 叠加模式 发生遮挡的时候，显示前后图层颜色的叠加",paraId:18,tocIndex:7},{value:"subtractive 相减模式 发生遮挡的时候，显示前后图层颜色的相减",paraId:18,tocIndex:7},{value:"max 最大值 发生遮挡的时候，显示图层颜色 rgb 的最大值",paraId:18,tocIndex:7},{value:" ",paraId:19,tocIndex:8},{value:"boolean",paraId:19,tocIndex:8},{value:" ",paraId:19,tocIndex:8},{value:"optional",paraId:19,tocIndex:8},{value:" ",paraId:19,tocIndex:8},{value:"default:",paraId:19,tocIndex:8},{value:" 'false'",paraId:19,tocIndex:8},{value:"\n图层事件，默认只响应最上层图层，设置为true 将允许事件透传",paraId:19,tocIndex:8},{value:"⚠️ mask、maskfence 不推荐使用，一下配置 2.14.x 之后版本生效",paraId:20,tocIndex:8},{value:"模板图层：用做模板的图层，PointLayer、LineLayer、PolygonLayer 都可以作为模板\n掩模图层：被模板切割的图层",paraId:21,tocIndex:8},{value:"掩模图层生效",paraId:22,tocIndex:9},{value:" ",paraId:23,tocIndex:9},{value:"array Layer",paraId:23,tocIndex:9},{value:" ",paraId:23,tocIndex:9},{value:"optional",paraId:23,tocIndex:9},{value:" ",paraId:23,tocIndex:9},{value:"default:",paraId:23,tocIndex:9},{value:" []",paraId:23,tocIndex:9},{value:"掩模图层生效",paraId:24,tocIndex:10},{value:"是否开启掩模，默认开启 maskLayers 不为空时生效",paraId:25,tocIndex:10},{value:" ",paraId:26,tocIndex:10},{value:"bool",paraId:26,tocIndex:10},{value:" ",paraId:26,tocIndex:10},{value:"optional",paraId:26,tocIndex:10},{value:" ",paraId:26,tocIndex:10},{value:"default:",paraId:26,tocIndex:10},{value:" true",paraId:26,tocIndex:10},{value:"掩模图层生效\n",paraId:27,tocIndex:11},{value:" ",paraId:28,tocIndex:11},{value:"boolean",paraId:28,tocIndex:11},{value:" ",paraId:28,tocIndex:11},{value:"optional",paraId:28,tocIndex:11},{value:" ",paraId:28,tocIndex:11},{value:"default:",paraId:28,tocIndex:11},{value:" true",paraId:28,tocIndex:11},{value:"用来描述当前图层的内容与掩模边界显示。",paraId:29,tocIndex:11},{value:"true",paraId:30,tocIndex:11},{value:" 在掩模内部显示",paraId:30,tocIndex:11},{value:"false",paraId:30,tocIndex:11},{value:" 在掩模外部显示",paraId:30,tocIndex:11},{value:"模板图层生效\n",paraId:31,tocIndex:12},{value:" ",paraId:31,tocIndex:12},{value:"枚举",paraId:31,tocIndex:12},{value:" ",paraId:31,tocIndex:12},{value:"optional",paraId:31,tocIndex:12},{value:" ",paraId:31,tocIndex:12},{value:"default:",paraId:31,tocIndex:12},{value:" and",paraId:31,tocIndex:12},{value:"\nmaskLayers 为多个时失效，需要在模板图层设置",paraId:31,tocIndex:12},{value:"or 交集",paraId:32,tocIndex:12},{value:"and 并集",paraId:32,tocIndex:12},{value:"使用示例",paraId:33,tocIndex:12},{value:"const polygonLayer = new Polygon();\nconst rasterLayer = new Raster({\n  // 栅格图层使用polygon 掩模\n  maskLayers: [polygonLayer],\n  enableMask: true,\n  maskInside: true,\n});\n",paraId:34,tocIndex:12}]},27281:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(60486);const d=[{value:"scale",paraId:0},{value:" 方法设置数据字段映射方法，用于设将地图数据值（数字、日期、类别等数据）转成视觉值（颜色、大小、形状）。尺度 Scale 是数据可视化的基本组成部分，因为它们决定了视觉编码的性质。",paraId:0},{value:"field",paraId:1,tocIndex:0},{value:" 指定 source 中传入的数据中用于映射的字段名",paraId:1,tocIndex:0},{value:"scaleConfig",paraId:1,tocIndex:0},{value:" 列定义配置，对象类型",paraId:1,tocIndex:0},{value:"interface IScaleConfig {\n  type: ScaleTypeName;\n  domain?: any[];\n  ...\n}\n\nlayer.color('id', ['#f00', '#ff0'])\n.size('mag', [1, 80])\n.scale('mag', {\n  type: 'linear',\n  domain: [ 1, 50]\n})；\n",paraId:2,tocIndex:0},{value:"scale",paraId:3,tocIndex:1},{value:" 的类型可以分为 ",paraId:3,tocIndex:1},{value:"3",paraId:3,tocIndex:1},{value:" 类 ",paraId:3,tocIndex:1},{value:"11",paraId:3,tocIndex:1},{value:" 种，不同 ",paraId:3,tocIndex:1},{value:"Scale",paraId:3,tocIndex:1},{value:" 的差异在于 ",paraId:3,tocIndex:1},{value:"domain->range",paraId:3,tocIndex:1},{value:" 的转换方法的不同。",paraId:3,tocIndex:1},{value:"range",paraId:3,tocIndex:1},{value:" 和 ",paraId:3,tocIndex:1},{value:"domain",paraId:3,tocIndex:1},{value:" 是 ",paraId:3,tocIndex:1},{value:"Scale",paraId:3,tocIndex:1},{value:" 中非常重要的两个参数。",paraId:3,tocIndex:1},{value:"domain: 地图数据值的定义区间",paraId:4,tocIndex:1},{value:"range：视觉值的区间定义",paraId:4,tocIndex:1},{value:"数据类型",paraId:5,tocIndex:1},{value:"度量类型",paraId:5,tocIndex:1},{value:"连续",paraId:5,tocIndex:1},{value:"linear、log、pow、time、sequential、quantize、quantile、threshold",paraId:5,tocIndex:1},{value:"分类",paraId:5,tocIndex:1},{value:"cat、time",paraId:5,tocIndex:1},{value:"常量",paraId:5,tocIndex:1},{value:"identity",paraId:5,tocIndex:1},{value:"Cat 指枚举类型，用于展示分类数据，比如农作物种植区分布图，水稻、玉米、大豆等不同类别需要映射为不同的颜色。",paraId:6,tocIndex:2},{value:"// 三种作物会分别转成对应的颜色\n// domain = ['corn','rice', 'soybean'];\n// range = ['red','white','blue'];\nconst data = [\n  { lng: 120, lat: 30, t: 'corn' },\n  { lng: 121, lat: 30, t: 'rice' },\n  { lng: 122, lat: 30, t: 'soybean' },\n];\nlayer.source(data, {\n  parser: {\n    type: 'type',\n    x: 'lng',\n    y: 'lat',\n  },\n});\nlayer.scale('t', { type: 'cat' });\nlayer.color('t', ['red', 'white', 'blue']);\n",paraId:7,tocIndex:2},{value:"常量度量 某个字段是不变的常量。",paraId:8,tocIndex:3},{value:"线性是连续数据的映射方法，数据和视觉值是通过线性方法换算的。如数据值 1-100 线性映射到红到蓝的线下渐变色每个数字对应一个颜色",paraId:9,tocIndex:4},{value:"相等间隔会将属性值的范围划分为若干个大小相等的子范围。相等间隔最适用于常见的数据范围，如百分比和温度。这种方法强调的是某个属性值相对于其他值的量",paraId:10,tocIndex:5},{value:"每个类都含有相等数量的要素。分位数分类非常适用于呈线性分布的数据。分位数为每个类分配数量相等的数据值。不存在空类，也不存在值过多或过少的类。\n由于使用“分位数”分类将要素以同等数量分组到每个类中，因此得到的地图往往具有误导性。可能会将相似的要素置于相邻的类中，或将值差异较大的要素置于相同类中。可通过增加类的数量将这种失真降至最低。",paraId:11,tocIndex:6},{value:"他允许将域的任意子集（非统一段）映射到范围内的离散值。输入域仍然是连续的，并根据提供给域属性的一组阈值划分为多个切片。 range 属性必须有 N+1 个元素，其中 N 是域中提供的阈值边界数",paraId:12,tocIndex:7},{value:"手动设置间隔 Manual interval 手动设置分级分类区间，某些数据会有相应的业界标准，或者需要进行某种特殊的显示。如空气质量数据有严格数据分段标准",paraId:13,tocIndex:7},{value:'-1   => "red"\n0    => "white"\n0.5  => "white"\n1.0  => "blue"\n1000 => "blue\n\n',paraId:14,tocIndex:7},{value:"用于返回给定的颜色数组的统一非有理 B-spline 插值器函数，该数组将转换为RGB颜色。",paraId:15,tocIndex:8},{value:"const scaleColors = d3interpolate.interpolateRgbBasis(colors);\n",paraId:16,tocIndex:8},{value:"interface IScaleConfig {\n  type: ScaleTypeName;\n  domain?: any[];\n  range?: any[];\n  neutral?: number;\n  field?: string;\n  unknown?: string;\n  ticks?: any[];\n  nice?: boolean;\n  clamp?: boolean;\n  format?: () => any;\n}\n",paraId:17,tocIndex:9}]},33425:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(83375);const d=[{value:"shape",paraId:0},{value:" 方法用于指定热力图层绘制热力的类型，现在支持经典热力、蜂窝热力、网格热力三种类型。",paraId:0},{value:"shape",paraId:1,tocIndex:0},{value:" 为 ",paraId:1,tocIndex:0},{value:"heatmap",paraId:1,tocIndex:0},{value:" 热力图层用于绘制 2D 经典热力。",paraId:1,tocIndex:0},{value:"shape",paraId:2,tocIndex:1},{value:" 为 ",paraId:2,tocIndex:1},{value:"heatmap3D",paraId:2,tocIndex:1},{value:" 热力图层用于绘制 3D 热力。",paraId:2,tocIndex:1},{value:"网格热力和蜂窝热力的实现依赖配置 ",paraId:3,tocIndex:2},{value:"transforms",paraId:3,tocIndex:2},{value:" 的参数，",paraId:3,tocIndex:2},{value:"具体说明使用",paraId:4,tocIndex:2},{value:"。",paraId:3,tocIndex:2},{value:"fetch('https://gw.alipayobjects.com/os/basement_prod/513add53-dcb2-4295-8860-9e7aa5236699.json')\n  .then((res) => res.json())\n  .then((data) => {\n    const layer = new HeatmapLayer({})\n      .source(data, {\n        transforms: [\n          {\n            type: 'hexagon',\n            size: 100,\n            field: 'h12',\n            method: 'sum',\n          },\n        ],\n      })\n      .size('sum', [0, 600])\n      .shape('hexagonColumn')\n      .style({\n        coverage: 0.8,\n        angle: 0,\n      })\n      .color(\n        'sum',\n        [\n          '#094D4A',\n          '#146968',\n          '#1D7F7E',\n          '#289899',\n          '#34B6B7',\n          '#4AC5AF',\n          '#5FD3A6',\n          '#7BE39E',\n          '#A1EDB8',\n          '#CEF8D6',\n        ].reverse(),\n      );\n    scene.addLayer(layer);\n  });\n",paraId:5,tocIndex:2}]},17940:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(33957);const d=[{value:"图层数据使用经纬度格式，数据源支持 JSON、GeoJSON、CSV 三种数据格式。",paraId:0},{value:"GeoJSON",paraId:1},{value:"CSV",paraId:2},{value:"JSON",paraId:3},{value:"🌟 通常每种数据都需要相应的 parser 解析数据",paraId:4},{value:"🌟 热力图的数据使用和点图层保持一致。",paraId:5},{value:"// 传入 GeoJSON 类型数据 *** L7 默认支持，不需要 parser 解析\nvar data = {\n      type: 'FeatureCollection',\n      features: [\n        {\n          type: 'Feature',\n          properties: {},\n          geometry: {\n            type: 'Polygon',\n            coordinates: [\n              [120, 30],\n              ...\n            ]\n          },\n        },\n      ],\n    };\n\nvar layer = new HeatmapLayer()\n.source(data)\n",paraId:6,tocIndex:0},{value:"// 传入 txt 类型数据\nvar data = `from,to,value,type,lng1,lat1,lng2,lat2\n鎷夎惃,娴疯タ,6.91,move_out,91.111891,29.662557,97.342625,37.373799\n鎷夎惃,鎴愰兘,4.79,move_out,91.111891,29.662557,104.067923,30.679943\n鎷夎惃,閲嶅簡,2.41,move_out,91.111891,29.662557,106.530635,29.544606\n鎷夎惃,鍖椾含,2.05,move_out,91.111891,29.662557,116.395645,39.929986\n...`;\n\nvar layer = new HeatmapLayer().source(data, {\n  parser: {\n    type: 'csv',\n    x: 'lng1',\n    y: 'lat1',\n  },\n});\n",paraId:7,tocIndex:1},{value:"// 传入 JSON 类型的数据\nvar data = [\n  {\n    lng: 120,\n    lat: 30\n  },\n  ...\n]\n\nvar layer = new HeatmapLayer()\n.source(data, {\n  parser: {\n    type: 'json',\n    x: 'lng',\n    y: 'lat',\n  }\n})\n",paraId:8,tocIndex:2}]},10716:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(62067);const d=[{value:"style",paraId:0},{value:" 方法用于配制图层的样式，相同图层拥有不同的 ",paraId:0},{value:"shape",paraId:0},{value:" 图形，不同 ",paraId:0},{value:"shape",paraId:0},{value:" 的图层 ",paraId:0},{value:"style",paraId:0},{value:" 方法接受不同的参数。",paraId:0},{value:"🌟 蜂窝热力图和网格热力图的 ",paraId:1},{value:"style",paraId:1},{value:" 样式可以参考实际绘制的图层。",paraId:1},{value:"layer.style({\n  opacity: 0.5,\n});\n",paraId:2},{value:"通用 ",paraId:3,tocIndex:0},{value:"style",paraId:3,tocIndex:0},{value:" 参数，所有图形都支持的参数。",paraId:3,tocIndex:0},{value:"style",paraId:4,tocIndex:0},{value:"类型",paraId:4,tocIndex:0},{value:"描述",paraId:4,tocIndex:0},{value:"默认值",paraId:4,tocIndex:0},{value:"opacity",paraId:4,tocIndex:0},{value:"number",paraId:4,tocIndex:0},{value:"图形的透明度",paraId:4,tocIndex:0},{value:"1",paraId:4,tocIndex:0},{value:"shape",paraId:5,tocIndex:1},{value:" 为 ",paraId:5,tocIndex:1},{value:"heatmap",paraId:5,tocIndex:1},{value:"、",paraId:5,tocIndex:1},{value:"heatmap3D",paraId:5,tocIndex:1},{value:" 类型的时候，绘制经典热力图。",paraId:5,tocIndex:1},{value:"style",paraId:6,tocIndex:1},{value:"类型",paraId:6,tocIndex:1},{value:"描述",paraId:6,tocIndex:1},{value:"默认值",paraId:6,tocIndex:1},{value:"intensity",paraId:6,tocIndex:1},{value:"number",paraId:6,tocIndex:1},{value:"热力的强度",paraId:6,tocIndex:1},{value:"10",paraId:6,tocIndex:1},{value:"radius",paraId:6,tocIndex:1},{value:"number",paraId:6,tocIndex:1},{value:"热力点的半径",paraId:6,tocIndex:1},{value:"10",paraId:6,tocIndex:1},{value:"rampColors",paraId:6,tocIndex:1},{value:"number",paraId:6,tocIndex:1},{value:"热力的色值",paraId:6,tocIndex:1},{value:"1",paraId:6,tocIndex:1},{value:"colors  颜色数组",paraId:7,tocIndex:2},{value:"positions 数据区间",paraId:7,tocIndex:2},{value:"配置值域映射颜色的色带，值域的范围为 ",paraId:8,tocIndex:2},{value:"[0 - 1]",paraId:8,tocIndex:2},{value:", 对应的我们需要为每一个 ",paraId:8,tocIndex:2},{value:"position",paraId:8,tocIndex:2},{value:" 位置设置一个颜色值。",paraId:8,tocIndex:2},{value:"⚠️ colors, positions 的长度要相同",paraId:9,tocIndex:2},{value:"layer.style({\n  rampColors: {\n    colors: ['#FF4818', '#F7B74A', '#FFF598', '#91EABC', '#2EA9A1', '#206C7C'],\n    positions: [0, 0.2, 0.4, 0.6, 0.8, 1.0],\n  },\n});\n",paraId:10,tocIndex:2},{value:"绘制蜂窝热力图。",paraId:11,tocIndex:3},{value:"style",paraId:12,tocIndex:3},{value:"类型",paraId:12,tocIndex:3},{value:"描述",paraId:12,tocIndex:3},{value:"默认值",paraId:12,tocIndex:3},{value:"angle",paraId:12,tocIndex:3},{value:"number",paraId:12,tocIndex:3},{value:"图形旋转角度",paraId:12,tocIndex:3},{value:"0",paraId:12,tocIndex:3},{value:"coverage",paraId:12,tocIndex:3},{value:"number",paraId:12,tocIndex:3},{value:"图形覆盖比率",paraId:12,tocIndex:3},{value:"0.9",paraId:12,tocIndex:3},{value:"绘制网格热力图。",paraId:13,tocIndex:4},{value:"style",paraId:14,tocIndex:4},{value:"类型",paraId:14,tocIndex:4},{value:"描述",paraId:14,tocIndex:4},{value:"默认值",paraId:14,tocIndex:4},{value:"coverage",paraId:14,tocIndex:4},{value:"number",paraId:14,tocIndex:4},{value:"图形覆盖比率",paraId:14,tocIndex:4},{value:"1",paraId:14,tocIndex:4}]},43672:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(69477);const d=[{value:"将图片添加到地图上，同时需要指定图片的经纬度范围和数据解析类型。",paraId:0,tocIndex:0},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"const layer = new ImageLayer({});\nlayer.source('https://gw.alipayobjects.com/zos/rmsportal/FnHFeFklTzKDdUESRNDv.jpg', {\n  parser: {\n    type: 'image',\n    extent: [121.168, 30.2828, 121.384, 30.4219],\n  },\n});\n",paraId:2,tocIndex:0}]},49855:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(8757);const d=[{value:" ",paraId:0,tocIndex:0},{value:"string",paraId:0,tocIndex:0},{value:" ",paraId:0,tocIndex:0},{value:"optional",paraId:0,tocIndex:0},{value:" ",paraId:0,tocIndex:0},{value:"default:",paraId:0,tocIndex:0},{value:" 自动数字编号",paraId:0,tocIndex:0},{value:"设置图层名称,可根据 name 获取 layer",paraId:1,tocIndex:0},{value:"scene.getLayerByName(name);\n",paraId:2,tocIndex:0},{value:" ",paraId:3,tocIndex:1},{value:"bool",paraId:3,tocIndex:1},{value:" ",paraId:3,tocIndex:1},{value:"optional",paraId:3,tocIndex:1},{value:" ",paraId:3,tocIndex:1},{value:"default:",paraId:3,tocIndex:1},{value:" true",paraId:3,tocIndex:1},{value:"图层是否可见",paraId:4,tocIndex:1},{value:" ",paraId:5,tocIndex:2},{value:"int",paraId:5,tocIndex:2},{value:" ",paraId:5,tocIndex:2},{value:"optional",paraId:5,tocIndex:2},{value:" ",paraId:5,tocIndex:2},{value:"default:",paraId:5,tocIndex:2},{value:" 0",paraId:5,tocIndex:2},{value:"图层绘制顺序，数值大绘制在上层，可以控制图层绘制的上下层级",paraId:6,tocIndex:2},{value:"L7 采用队列渲染的机制，所有的图层在内部保存在一个数组中，每一帧的渲染会将图层数组按照 zIndex 的值进行排序，然后遍历数组，将符合条件的图层渲染到场景中",paraId:7,tocIndex:2},{value:" ",paraId:8,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:" ",paraId:8,tocIndex:3},{value:"optional",paraId:8,tocIndex:3},{value:" ",paraId:8,tocIndex:3},{value:"default:",paraId:8,tocIndex:3},{value:" Mapbox （0-24） 高德 （2-19)",paraId:8,tocIndex:3},{value:"图层显示最小缩放等级",paraId:9,tocIndex:3},{value:" ",paraId:10,tocIndex:4},{value:"number",paraId:10,tocIndex:4},{value:" ",paraId:10,tocIndex:4},{value:"optional",paraId:10,tocIndex:4},{value:" ",paraId:10,tocIndex:4},{value:"default:",paraId:10,tocIndex:4},{value:" Mapbox （0-24） 高德 （2-19)",paraId:10,tocIndex:4},{value:"图层显示最大缩放等级",paraId:11,tocIndex:4},{value:" ",paraId:12,tocIndex:5},{value:"bool",paraId:12,tocIndex:5},{value:" ",paraId:12,tocIndex:5},{value:"optional",paraId:12,tocIndex:5},{value:" ",paraId:12,tocIndex:5},{value:"default:",paraId:12,tocIndex:5},{value:" false",paraId:12,tocIndex:5},{value:"layer 初始化完成之后，地图是否自动缩放到图层范围",paraId:13,tocIndex:5},{value:" ",paraId:14,tocIndex:6},{value:"bool",paraId:14,tocIndex:6},{value:" ",paraId:14,tocIndex:6},{value:"optional",paraId:14,tocIndex:6},{value:" ",paraId:14,tocIndex:6},{value:"default:",paraId:14,tocIndex:6},{value:" 0",paraId:14,tocIndex:6},{value:"图层拾取缓存机制，如 1px 宽度的线鼠标很难拾取(点击)到, 通过设置该参数可扩大拾取的范围（放大图层对象的尺寸）",paraId:15,tocIndex:6},{value:" ",paraId:16,tocIndex:7},{value:"string",paraId:16,tocIndex:7},{value:" ",paraId:16,tocIndex:7},{value:"optional",paraId:16,tocIndex:7},{value:" ",paraId:16,tocIndex:7},{value:"default:",paraId:16,tocIndex:7},{value:" 'normal'",paraId:16,tocIndex:7},{value:"图层元素混合效果",paraId:17,tocIndex:7},{value:"normal 正常效果 默认 发生遮挡的时候，只会显示前面的图层的颜色",paraId:18,tocIndex:7},{value:"additive 叠加模式 发生遮挡的时候，显示前后图层颜色的叠加",paraId:18,tocIndex:7},{value:"subtractive 相减模式 发生遮挡的时候，显示前后图层颜色的相减",paraId:18,tocIndex:7},{value:"max 最大值 发生遮挡的时候，显示图层颜色 rgb 的最大值",paraId:18,tocIndex:7},{value:" ",paraId:19,tocIndex:8},{value:"boolean",paraId:19,tocIndex:8},{value:" ",paraId:19,tocIndex:8},{value:"optional",paraId:19,tocIndex:8},{value:" ",paraId:19,tocIndex:8},{value:"default:",paraId:19,tocIndex:8},{value:" 'false'",paraId:19,tocIndex:8},{value:"\n图层事件，默认只响应最上层图层，设置为true 将允许事件透传",paraId:19,tocIndex:8},{value:"⚠️ mask、maskfence 不推荐使用，一下配置 2.14.x 之后版本生效",paraId:20,tocIndex:8},{value:"模板图层：用做模板的图层，PointLayer、LineLayer、PolygonLayer 都可以作为模板\n掩模图层：被模板切割的图层",paraId:21,tocIndex:8},{value:"掩模图层生效",paraId:22,tocIndex:9},{value:" ",paraId:23,tocIndex:9},{value:"array Layer",paraId:23,tocIndex:9},{value:" ",paraId:23,tocIndex:9},{value:"optional",paraId:23,tocIndex:9},{value:" ",paraId:23,tocIndex:9},{value:"default:",paraId:23,tocIndex:9},{value:" []",paraId:23,tocIndex:9},{value:"掩模图层生效",paraId:24,tocIndex:10},{value:"是否开启掩模，默认开启 maskLayers 不为空时生效",paraId:25,tocIndex:10},{value:" ",paraId:26,tocIndex:10},{value:"bool",paraId:26,tocIndex:10},{value:" ",paraId:26,tocIndex:10},{value:"optional",paraId:26,tocIndex:10},{value:" ",paraId:26,tocIndex:10},{value:"default:",paraId:26,tocIndex:10},{value:" true",paraId:26,tocIndex:10},{value:"掩模图层生效\n",paraId:27,tocIndex:11},{value:" ",paraId:28,tocIndex:11},{value:"boolean",paraId:28,tocIndex:11},{value:" ",paraId:28,tocIndex:11},{value:"optional",paraId:28,tocIndex:11},{value:" ",paraId:28,tocIndex:11},{value:"default:",paraId:28,tocIndex:11},{value:" true",paraId:28,tocIndex:11},{value:"用来描述当前图层的内容与掩模边界显示。",paraId:29,tocIndex:11},{value:"true",paraId:30,tocIndex:11},{value:" 在掩模内部显示",paraId:30,tocIndex:11},{value:"false",paraId:30,tocIndex:11},{value:" 在掩模外部显示",paraId:30,tocIndex:11},{value:"模板图层生效\n",paraId:31,tocIndex:12},{value:" ",paraId:31,tocIndex:12},{value:"枚举",paraId:31,tocIndex:12},{value:" ",paraId:31,tocIndex:12},{value:"optional",paraId:31,tocIndex:12},{value:" ",paraId:31,tocIndex:12},{value:"default:",paraId:31,tocIndex:12},{value:" and",paraId:31,tocIndex:12},{value:"\nmaskLayers 为多个时失效，需要在模板图层设置",paraId:31,tocIndex:12},{value:"or 交集",paraId:32,tocIndex:12},{value:"and 并集",paraId:32,tocIndex:12},{value:"使用示例",paraId:33,tocIndex:12},{value:"const polygonLayer = new Polygon();\nconst rasterLayer = new Raster({\n  // 栅格图层使用polygon 掩模\n  maskLayers: [polygonLayer],\n  enableMask: true,\n  maskInside: true,\n});\n",paraId:34,tocIndex:12}]},16707:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(99571);const d=[{value:"imagelayer",paraId:0},{value:" 通过提供在线图片的 ",paraId:0},{value:"url",paraId:0},{value:" 指定数据，通过 ",paraId:0},{value:"extent",paraId:0},{value:" 指定图片在地图上的矩形范围的位置。",paraId:0},{value:"layer.source('https://gw.alipayobjects.com/zos/rmsportal/FnHFeFklTzKDdUESRNDv.jpg', {\n  parser: {\n    type: 'image',\n    extent: [121.168, 30.2828, 121.384, 30.4219],\n  },\n});\n",paraId:1},{value:"也可通过 ",paraId:2},{value:"coordinates",paraId:2},{value:" 指定一系列坐，来定义图片在地图上的不规则形状范围的位置。",paraId:2},{value:"layer.source('https://gw.alipayobjects.com/zos/rmsportal/FnHFeFklTzKDdUESRNDv.jpg', {\n  parser: {\n    type: 'image',\n    coordinates: [\n      [100.959388, 41.619522],\n      [101.229887, 41.572654],\n      [101.16971, 41.377836],\n      [100.900015, 41.424628],\n    ],\n  },\n});\n",paraId:3}]},42897:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(4938);const d=[{value:"imagelayer",paraId:0},{value:" 的 ",paraId:0},{value:"style",paraId:0},{value:" 参数只支持 ",paraId:0},{value:"opacity",paraId:0},{value:"。",paraId:0},{value:"style",paraId:1},{value:"类型",paraId:1},{value:"描述",paraId:1},{value:"默认值",paraId:1},{value:"opacity",paraId:1},{value:"number",paraId:1},{value:"图形的透明度",paraId:1},{value:"1",paraId:1},{value:"brightness",paraId:1},{value:"number",paraId:1},{value:"图形的亮度",paraId:1},{value:"1",paraId:1},{value:"contrast",paraId:1},{value:"number",paraId:1},{value:"图形的对比度",paraId:1},{value:"1",paraId:1},{value:"saturation",paraId:1},{value:"number",paraId:1},{value:"图形的饱和度",paraId:1},{value:"1",paraId:1},{value:"gamma",paraId:1},{value:"number",paraId:1},{value:"图形的伽马值",paraId:1},{value:"1",paraId:1}]},46432:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(69416);const d=[{value:"线图层图层在开启 ",paraId:0},{value:"animate",paraId:0},{value:" 方法后会得到沿线方向的线动画。",paraId:0},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"animate",paraId:2,tocIndex:0},{value:" 方法支持布尔值和对象传值。",paraId:2,tocIndex:0},{value:"layer.animate(true);\n\nlayer.animate({\n  enable: true,\n});\n",paraId:3,tocIndex:0},{value:"interface IAnimateOption {\n  enable: boolean;\n  speed: number;\n  rings: number;\n}\n",paraId:4,tocIndex:1},{value:"layer.animate(true);\nlayer.animate(false);\n",paraId:5,tocIndex:3},{value:"duration 动画时间 单位(s)秒",paraId:6,tocIndex:4},{value:"interval 轨迹间隔, 取值区间 0 - 1",paraId:6,tocIndex:4},{value:"trailLength 轨迹长度 取值区间 0 - 1",paraId:6,tocIndex:4},{value:"layer.animate({\n  duration: 4,\n  interval: 0.2,\n  trailLength: 0.1,\n});\n",paraId:7,tocIndex:4},{value:"L7 目前动画参数为相对单位，我们默认一条线段的长度为 1\n",paraId:8,tocIndex:5},{value:"如果 interval = 0.2,则一条轨迹将会分成 5 段，如果 interval = 0.5 则为两段。",paraId:9,tocIndex:5},{value:"在线案例",paraId:10}]},40672:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(10226);const d=[{value:"color",paraId:0},{value:" 方法用于设置图形的颜色。",paraId:0},{value:"color",paraId:1,tocIndex:0},{value:" 类型的字符串。",paraId:1,tocIndex:0},{value:"color 类型可以为 rgb 的写法 ",paraId:2,tocIndex:0},{value:"rgb(200, 100, 100)",paraId:2,tocIndex:0},{value:"、",paraId:2,tocIndex:0},{value:"rgba(255, 0, 0, 1)",paraId:2,tocIndex:0},{value:"color 类型可以为十六进制的写法 ",paraId:2,tocIndex:0},{value:"#ffffff",paraId:2,tocIndex:0},{value:"、",paraId:2,tocIndex:0},{value:"#000",paraId:2,tocIndex:0},{value:"color 类型可以是颜色名称的写法 ",paraId:2,tocIndex:0},{value:"red",paraId:2,tocIndex:0},{value:"、",paraId:2,tocIndex:0},{value:"yellow",paraId:2,tocIndex:0},{value:"图层可以直接设置颜色值。",paraId:3,tocIndex:1},{value:"layer.color('#f00');\n",paraId:4,tocIndex:1},{value:"图层的颜色可以根据图层接受的数据值进行映射，接受传入数据的字段作为参数。",paraId:5,tocIndex:2},{value:"layer.source([\n  {\n    lng: 120,\n    lat: 30,\n    c: '#f00',\n  },\n]);\nlayer.color('c');\n",paraId:6,tocIndex:2},{value:"color",paraId:7,tocIndex:3},{value:" 方法支持简单的值映射，将根据 ",paraId:7,tocIndex:3},{value:"field",paraId:7,tocIndex:3},{value:" 从传入图层的数据中提取的值映射到 ",paraId:7,tocIndex:3},{value:"domain",paraId:7,tocIndex:3},{value:" 值域中。",paraId:7,tocIndex:3},{value:"layer.color('type', ['#f00', '#0f0', '#00f']);\n",paraId:8,tocIndex:3},{value:"color",paraId:9,tocIndex:4},{value:" 方法支持回调函数的写法，将根据 ",paraId:9,tocIndex:4},{value:"field",paraId:9,tocIndex:4},{value:" 作为 ",paraId:9,tocIndex:4},{value:"callback",paraId:9,tocIndex:4},{value:" 方法的参数，",paraId:9,tocIndex:4},{value:"callback",paraId:9,tocIndex:4},{value:" 方法的返回值作为图层实际的颜色。",paraId:9,tocIndex:4},{value:"layer.color('type', (value) => {\n  switch (value) {\n    case 'water':\n      return '#f00';\n    case 'wood':\n      return '#0f0';\n  }\n});\n",paraId:10,tocIndex:4}]},16083:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(46837);const d=[{value:"线图层通过一组经纬度数据组来描述地图上的一条或者多条路径。通过路径的类型，将其区分为路径、弧线、3D 弧线以及其他的类型。",paraId:0,tocIndex:0},{value:"\n用户可以通过配置 ",paraId:0,tocIndex:0},{value:"shape",paraId:0,tocIndex:0},{value:" 参数来选择点的类型，同时通过 ",paraId:0,tocIndex:0},{value:"style",paraId:0,tocIndex:0},{value:"、",paraId:0,tocIndex:0},{value:"size",paraId:0,tocIndex:0},{value:"、",paraId:0,tocIndex:0},{value:"color",paraId:0,tocIndex:0},{value:" 方法调整点的样式。",paraId:0,tocIndex:0},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"const layer = new LineLayer()\n  .source([{ lng: 120, lat: 30, lng1: 125, lat1: 30 }], {\n    parser: {\n      type: 'json',\n      x: 'lng',\n      y: 'lat',\n      x1: 'lng1',\n      y1: 'lat1',\n    },\n  })\n  .shape('line')\n  .size(2)\n  .color('#f00');\n",paraId:2,tocIndex:0}]},31996:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(67795);const d=[{value:" ",paraId:0,tocIndex:0},{value:"string",paraId:0,tocIndex:0},{value:" ",paraId:0,tocIndex:0},{value:"optional",paraId:0,tocIndex:0},{value:" ",paraId:0,tocIndex:0},{value:"default:",paraId:0,tocIndex:0},{value:" 自动数字编号",paraId:0,tocIndex:0},{value:"设置图层名称,可根据 name 获取 layer",paraId:1,tocIndex:0},{value:"scene.getLayerByName(name);\n",paraId:2,tocIndex:0},{value:" ",paraId:3,tocIndex:1},{value:"bool",paraId:3,tocIndex:1},{value:" ",paraId:3,tocIndex:1},{value:"optional",paraId:3,tocIndex:1},{value:" ",paraId:3,tocIndex:1},{value:"default:",paraId:3,tocIndex:1},{value:" true",paraId:3,tocIndex:1},{value:"图层是否可见",paraId:4,tocIndex:1},{value:" ",paraId:5,tocIndex:2},{value:"int",paraId:5,tocIndex:2},{value:" ",paraId:5,tocIndex:2},{value:"optional",paraId:5,tocIndex:2},{value:" ",paraId:5,tocIndex:2},{value:"default:",paraId:5,tocIndex:2},{value:" 0",paraId:5,tocIndex:2},{value:"图层绘制顺序，数值大绘制在上层，可以控制图层绘制的上下层级",paraId:6,tocIndex:2},{value:"L7 采用队列渲染的机制，所有的图层在内部保存在一个数组中，每一帧的渲染会将图层数组按照 zIndex 的值进行排序，然后遍历数组，将符合条件的图层渲染到场景中",paraId:7,tocIndex:2},{value:" ",paraId:8,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:" ",paraId:8,tocIndex:3},{value:"optional",paraId:8,tocIndex:3},{value:" ",paraId:8,tocIndex:3},{value:"default:",paraId:8,tocIndex:3},{value:" Mapbox （0-24） 高德 （2-19)",paraId:8,tocIndex:3},{value:"图层显示最小缩放等级",paraId:9,tocIndex:3},{value:" ",paraId:10,tocIndex:4},{value:"number",paraId:10,tocIndex:4},{value:" ",paraId:10,tocIndex:4},{value:"optional",paraId:10,tocIndex:4},{value:" ",paraId:10,tocIndex:4},{value:"default:",paraId:10,tocIndex:4},{value:" Mapbox （0-24） 高德 （2-19)",paraId:10,tocIndex:4},{value:"图层显示最大缩放等级",paraId:11,tocIndex:4},{value:" ",paraId:12,tocIndex:5},{value:"bool",paraId:12,tocIndex:5},{value:" ",paraId:12,tocIndex:5},{value:"optional",paraId:12,tocIndex:5},{value:" ",paraId:12,tocIndex:5},{value:"default:",paraId:12,tocIndex:5},{value:" false",paraId:12,tocIndex:5},{value:"layer 初始化完成之后，地图是否自动缩放到图层范围",paraId:13,tocIndex:5},{value:" ",paraId:14,tocIndex:6},{value:"bool",paraId:14,tocIndex:6},{value:" ",paraId:14,tocIndex:6},{value:"optional",paraId:14,tocIndex:6},{value:" ",paraId:14,tocIndex:6},{value:"default:",paraId:14,tocIndex:6},{value:" 0",paraId:14,tocIndex:6},{value:"图层拾取缓存机制，如 1px 宽度的线鼠标很难拾取(点击)到, 通过设置该参数可扩大拾取的范围（放大图层对象的尺寸）",paraId:15,tocIndex:6},{value:" ",paraId:16,tocIndex:7},{value:"string",paraId:16,tocIndex:7},{value:" ",paraId:16,tocIndex:7},{value:"optional",paraId:16,tocIndex:7},{value:" ",paraId:16,tocIndex:7},{value:"default:",paraId:16,tocIndex:7},{value:" 'normal'",paraId:16,tocIndex:7},{value:"图层元素混合效果",paraId:17,tocIndex:7},{value:"normal 正常效果 默认 发生遮挡的时候，只会显示前面的图层的颜色",paraId:18,tocIndex:7},{value:"additive 叠加模式 发生遮挡的时候，显示前后图层颜色的叠加",paraId:18,tocIndex:7},{value:"subtractive 相减模式 发生遮挡的时候，显示前后图层颜色的相减",paraId:18,tocIndex:7},{value:"max 最大值 发生遮挡的时候，显示图层颜色 rgb 的最大值",paraId:18,tocIndex:7},{value:" ",paraId:19,tocIndex:8},{value:"boolean",paraId:19,tocIndex:8},{value:" ",paraId:19,tocIndex:8},{value:"optional",paraId:19,tocIndex:8},{value:" ",paraId:19,tocIndex:8},{value:"default:",paraId:19,tocIndex:8},{value:" 'false'",paraId:19,tocIndex:8},{value:"\n图层事件，默认只响应最上层图层，设置为true 将允许事件透传",paraId:19,tocIndex:8},{value:"⚠️ mask、maskfence 不推荐使用，一下配置 2.14.x 之后版本生效",paraId:20,tocIndex:8},{value:"模板图层：用做模板的图层，PointLayer、LineLayer、PolygonLayer 都可以作为模板\n掩模图层：被模板切割的图层",paraId:21,tocIndex:8},{value:"掩模图层生效",paraId:22,tocIndex:9},{value:" ",paraId:23,tocIndex:9},{value:"array Layer",paraId:23,tocIndex:9},{value:" ",paraId:23,tocIndex:9},{value:"optional",paraId:23,tocIndex:9},{value:" ",paraId:23,tocIndex:9},{value:"default:",paraId:23,tocIndex:9},{value:" []",paraId:23,tocIndex:9},{value:"掩模图层生效",paraId:24,tocIndex:10},{value:"是否开启掩模，默认开启 maskLayers 不为空时生效",paraId:25,tocIndex:10},{value:" ",paraId:26,tocIndex:10},{value:"bool",paraId:26,tocIndex:10},{value:" ",paraId:26,tocIndex:10},{value:"optional",paraId:26,tocIndex:10},{value:" ",paraId:26,tocIndex:10},{value:"default:",paraId:26,tocIndex:10},{value:" true",paraId:26,tocIndex:10},{value:"掩模图层生效\n",paraId:27,tocIndex:11},{value:" ",paraId:28,tocIndex:11},{value:"boolean",paraId:28,tocIndex:11},{value:" ",paraId:28,tocIndex:11},{value:"optional",paraId:28,tocIndex:11},{value:" ",paraId:28,tocIndex:11},{value:"default:",paraId:28,tocIndex:11},{value:" true",paraId:28,tocIndex:11},{value:"用来描述当前图层的内容与掩模边界显示。",paraId:29,tocIndex:11},{value:"true",paraId:30,tocIndex:11},{value:" 在掩模内部显示",paraId:30,tocIndex:11},{value:"false",paraId:30,tocIndex:11},{value:" 在掩模外部显示",paraId:30,tocIndex:11},{value:"模板图层生效\n",paraId:31,tocIndex:12},{value:" ",paraId:31,tocIndex:12},{value:"枚举",paraId:31,tocIndex:12},{value:" ",paraId:31,tocIndex:12},{value:"optional",paraId:31,tocIndex:12},{value:" ",paraId:31,tocIndex:12},{value:"default:",paraId:31,tocIndex:12},{value:" and",paraId:31,tocIndex:12},{value:"\nmaskLayers 为多个时失效，需要在模板图层设置",paraId:31,tocIndex:12},{value:"or 交集",paraId:32,tocIndex:12},{value:"and 并集",paraId:32,tocIndex:12},{value:"使用示例",paraId:33,tocIndex:12},{value:"const polygonLayer = new Polygon();\nconst rasterLayer = new Raster({\n  // 栅格图层使用polygon 掩模\n  maskLayers: [polygonLayer],\n  enableMask: true,\n  maskInside: true,\n});\n",paraId:34,tocIndex:12}]},52269:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(77932);const d=[{value:"scale",paraId:0},{value:" 方法设置数据字段映射方法，用于设将地图数据值（数字、日期、类别等数据）转成视觉值（颜色、大小、形状）。尺度 Scale 是数据可视化的基本组成部分，因为它们决定了视觉编码的性质。",paraId:0},{value:"field",paraId:1,tocIndex:0},{value:" 指定 source 中传入的数据中用于映射的字段名",paraId:1,tocIndex:0},{value:"scaleConfig",paraId:1,tocIndex:0},{value:" 列定义配置，对象类型",paraId:1,tocIndex:0},{value:"interface IScaleConfig {\n  type: ScaleTypeName;\n  domain?: any[];\n  ...\n}\n\nlayer.color('id', ['#f00', '#ff0'])\n.size('mag', [1, 80])\n.scale('mag', {\n  type: 'linear',\n  domain: [ 1, 50]\n})；\n",paraId:2,tocIndex:0},{value:"scale",paraId:3,tocIndex:1},{value:" 的类型可以分为 ",paraId:3,tocIndex:1},{value:"3",paraId:3,tocIndex:1},{value:" 类 ",paraId:3,tocIndex:1},{value:"11",paraId:3,tocIndex:1},{value:" 种，不同 ",paraId:3,tocIndex:1},{value:"Scale",paraId:3,tocIndex:1},{value:" 的差异在于 ",paraId:3,tocIndex:1},{value:"domain->range",paraId:3,tocIndex:1},{value:" 的转换方法的不同。",paraId:3,tocIndex:1},{value:"range",paraId:3,tocIndex:1},{value:" 和 ",paraId:3,tocIndex:1},{value:"domain",paraId:3,tocIndex:1},{value:" 是 ",paraId:3,tocIndex:1},{value:"Scale",paraId:3,tocIndex:1},{value:" 中非常重要的两个参数。",paraId:3,tocIndex:1},{value:"domain: 地图数据值的定义区间",paraId:4,tocIndex:1},{value:"range：视觉值的区间定义",paraId:4,tocIndex:1},{value:"数据类型",paraId:5,tocIndex:1},{value:"度量类型",paraId:5,tocIndex:1},{value:"连续",paraId:5,tocIndex:1},{value:"linear、log、pow、time、sequential、quantize、quantile、threshold",paraId:5,tocIndex:1},{value:"分类",paraId:5,tocIndex:1},{value:"cat、time",paraId:5,tocIndex:1},{value:"常量",paraId:5,tocIndex:1},{value:"identity",paraId:5,tocIndex:1},{value:"Cat 指枚举类型，用于展示分类数据，比如农作物种植区分布图，水稻、玉米、大豆等不同类别需要映射为不同的颜色。",paraId:6,tocIndex:2},{value:"// 三种作物会分别转成对应的颜色\n// domain = ['corn','rice', 'soybean'];\n// range = ['red','white','blue'];\nconst data = [\n  { lng: 120, lat: 30, t: 'corn' },\n  { lng: 121, lat: 30, t: 'rice' },\n  { lng: 122, lat: 30, t: 'soybean' },\n];\nlayer.source(data, {\n  parser: {\n    type: 'type',\n    x: 'lng',\n    y: 'lat',\n  },\n});\nlayer.scale('t', { type: 'cat' });\nlayer.color('t', ['red', 'white', 'blue']);\n",paraId:7,tocIndex:2},{value:"常量度量 某个字段是不变的常量。",paraId:8,tocIndex:3},{value:"线性是连续数据的映射方法，数据和视觉值是通过线性方法换算的。如数据值 1-100 线性映射到红到蓝的线下渐变色每个数字对应一个颜色",paraId:9,tocIndex:4},{value:"相等间隔会将属性值的范围划分为若干个大小相等的子范围。相等间隔最适用于常见的数据范围，如百分比和温度。这种方法强调的是某个属性值相对于其他值的量",paraId:10,tocIndex:5},{value:"每个类都含有相等数量的要素。分位数分类非常适用于呈线性分布的数据。分位数为每个类分配数量相等的数据值。不存在空类，也不存在值过多或过少的类。\n由于使用“分位数”分类将要素以同等数量分组到每个类中，因此得到的地图往往具有误导性。可能会将相似的要素置于相邻的类中，或将值差异较大的要素置于相同类中。可通过增加类的数量将这种失真降至最低。",paraId:11,tocIndex:6},{value:"他允许将域的任意子集（非统一段）映射到范围内的离散值。输入域仍然是连续的，并根据提供给域属性的一组阈值划分为多个切片。 range 属性必须有 N+1 个元素，其中 N 是域中提供的阈值边界数",paraId:12,tocIndex:7},{value:"手动设置间隔 Manual interval 手动设置分级分类区间，某些数据会有相应的业界标准，或者需要进行某种特殊的显示。如空气质量数据有严格数据分段标准",paraId:13,tocIndex:7},{value:'-1   => "red"\n0    => "white"\n0.5  => "white"\n1.0  => "blue"\n1000 => "blue\n\n',paraId:14,tocIndex:7},{value:"用于返回给定的颜色数组的统一非有理 B-spline 插值器函数，该数组将转换为RGB颜色。",paraId:15,tocIndex:8},{value:"const scaleColors = d3interpolate.interpolateRgbBasis(colors);\n",paraId:16,tocIndex:8},{value:"interface IScaleConfig {\n  type: ScaleTypeName;\n  domain?: any[];\n  range?: any[];\n  neutral?: number;\n  field?: string;\n  unknown?: string;\n  ticks?: any[];\n  nice?: boolean;\n  clamp?: boolean;\n  format?: () => any;\n}\n",paraId:17,tocIndex:9}]},3256:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(59860);const d=[{value:"shape",paraId:0},{value:" 方法用于指定线图层绘制什么样的线。",paraId:0},{value:"绘制路径图。",paraId:1,tocIndex:0},{value:"line",paraId:2,tocIndex:0},{value:" 路径是最普通的线图层，支持配置宽度和高度，支持配置纹理和动画。",paraId:2,tocIndex:0},{value:"layer.shape('line');\n",paraId:3,tocIndex:0},{value:"arc",paraId:4,tocIndex:1},{value:" 弧线通过贝塞尔曲线算法计算出弧线的的路径，支持配置纹理和动画。",paraId:4,tocIndex:1},{value:"layer.shape('arc');\n",paraId:5,tocIndex:1},{value:"arc3d",paraId:6,tocIndex:2},{value:" 3d 弧线是在垂直地图两点之间的弧线，具有高度，支持配置纹理和动画。",paraId:6,tocIndex:2},{value:"layer.shape('arc3d');\n",paraId:7,tocIndex:2},{value:"greatcircle",paraId:8,tocIndex:3},{value:" 大圆航线是地图两个点最近距离的连线，支持配置纹理和动画。",paraId:8,tocIndex:3},{value:"layer.shape('greatcircle');\n",paraId:9,tocIndex:3},{value:"wall",paraId:10,tocIndex:4},{value:" 是垂直地图的围墙，支持配置高度，纹理和动画。",paraId:10,tocIndex:4},{value:"layer.shape('wall');\n",paraId:11,tocIndex:4},{value:"simple",paraId:12,tocIndex:5},{value:" 线图层，宽度始终为 ",paraId:12,tocIndex:5},{value:"1px",paraId:12,tocIndex:5},{value:"。",paraId:12,tocIndex:5},{value:"layer.shape('simple');\n",paraId:13,tocIndex:5},{value:"flowline",paraId:14,tocIndex:6},{value:" 流向图, 2.17 版本新增",paraId:14,tocIndex:6}]},68112:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(35560);const d=[{value:"线图层的 ",paraId:0},{value:"size",paraId:0},{value:" 方法可以设置线的宽度和高度。",paraId:0},{value:"size 类型为 number 则表示 line 的宽度",paraId:1,tocIndex:0},{value:"size 类型为 [number , number] 分别表示宽度和高度",paraId:1,tocIndex:0},{value:"lineLayer.size(1); // 线的宽度为 1\nlineLayer.size([1, 2]); // 宽度为1，高度2\n",paraId:2,tocIndex:0},{value:"线图层可以直接设置宽度值。图层中所有的线使用一个宽度。",paraId:3,tocIndex:1},{value:"layer.size(2);\n",paraId:4,tocIndex:1},{value:"线图层的宽度可以根据图层接受的数据值进行映射，接受传入数据的字段作为参数。",paraId:5,tocIndex:2},{value:"layer.source({\n  type: 'Feature',\n  properties: {\n    lineSize: 2,\n  },\n  geometry: {\n    type: 'LineString',\n    coordinates: [\n      [119.988511, 30.269614],\n      [119.9851, 30.269323],\n      [119.99271, 30.22088],\n    ],\n  },\n});\nlayer.size('lineSize');\n",paraId:6,tocIndex:2},{value:"size",paraId:7,tocIndex:3},{value:" 方法支持简单的值映射，将根据 ",paraId:7,tocIndex:3},{value:"field",paraId:7,tocIndex:3},{value:" 从传入图层的数据中提取的值映射到 ",paraId:7,tocIndex:3},{value:"domain",paraId:7,tocIndex:3},{value:" 值域中。",paraId:7,tocIndex:3},{value:"layer.size('type', [1, 2, 3]);\n",paraId:8,tocIndex:3},{value:"size",paraId:9,tocIndex:4},{value:" 方法支持回调函数的写法，将根据 ",paraId:9,tocIndex:4},{value:"field",paraId:9,tocIndex:4},{value:" 作为 ",paraId:9,tocIndex:4},{value:"callback",paraId:9,tocIndex:4},{value:" 方法的参数，",paraId:9,tocIndex:4},{value:"callback",paraId:9,tocIndex:4},{value:" 方法的返回值作为线图层实际的宽高。",paraId:9,tocIndex:4},{value:"layer.size('type', (value) => {\n  switch (value) {\n    case 'path':\n      return 1;\n    case 'road':\n      return 2;\n  }\n});\n",paraId:10,tocIndex:4}]},44575:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(94214);const d=[{value:"图层数据使用经纬度格式，数据源支持 JSON、GeoJSON、CSV 三种数据格式。",paraId:0},{value:"GeoJSON",paraId:1},{value:"CSV",paraId:2},{value:"JSON",paraId:3},{value:"🌟 通常每种数据都需要相应的 parser 解析数据",paraId:4},{value:"// 传入 GeoJSON 类型数据 *** L7 默认支持，不需要 parser 解析\nconst data = {\n  type: 'FeatureCollection',\n  features: [\n    {\n      type: 'Feature',\n      properties: {},\n      geometry: {\n        type: 'LineString',\n        coordinates: [\n          [106.5234375, 57.51582286553883],\n          [136.40625, 61.77312286453146],\n        ],\n      },\n    },\n  ],\n};\n\nconst layer = new LineLayer().source(data);\n",paraId:5,tocIndex:0},{value:"// 传入 txt 类型数据\nvar data = `from,to,value,type,lng1,lat1,lng2,lat2\n鎷夎惃,娴疯タ,6.91,move_out,91.111891,29.662557,97.342625,37.373799\n鎷夎惃,鎴愰兘,4.79,move_out,91.111891,29.662557,104.067923,30.679943\n鎷夎惃,閲嶅簡,2.41,move_out,91.111891,29.662557,106.530635,29.544606\n鎷夎惃,鍖椾含,2.05,move_out,91.111891,29.662557,116.395645,39.929986\n...`;\n\nnew LineLayer().source(data, {\n  parser: {\n    type: 'csv',\n    x: 'lng1',\n    y: 'lat1',\n    x1: 'lng2',\n    y1: 'lat2',\n  },\n});\n",paraId:6,tocIndex:1},{value:"// 传入 JSON 类型的数据\nvar data = [\n  {\n    lng: 120,\n    lat: 30,\n    lng1: 125,\n    lat1: 30\n  },\n  ...\n]\n\nvar layer = new LineLayer()\n.source(data, {\n  parser: {\n    type: 'json',\n    x: 'lng',\n    y: 'lat',\n    x1: 'lng1',\n    y1: 'lat1'\n  }\n})\n",paraId:7,tocIndex:2}]},99937:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(21209);const d=[{value:"style",paraId:0},{value:" 方法用于配制图层的样式，相同图层拥有不同的 ",paraId:0},{value:"shape",paraId:0},{value:" 图形，不同 ",paraId:0},{value:"shape",paraId:0},{value:" 的图层 ",paraId:0},{value:"style",paraId:0},{value:" 方法接受不同的参数。",paraId:0},{value:"layer.style({\n  opacity: 0.5,\n});\n",paraId:1},{value:"通用 ",paraId:2,tocIndex:0},{value:"style",paraId:2,tocIndex:0},{value:" 参数，所有图形都支持的参数。",paraId:2,tocIndex:0},{value:"style",paraId:3,tocIndex:0},{value:"类型",paraId:3,tocIndex:0},{value:"描述",paraId:3,tocIndex:0},{value:"数据映射",paraId:3,tocIndex:0},{value:"默认值",paraId:3,tocIndex:0},{value:"opacity",paraId:3,tocIndex:0},{value:"number",paraId:3,tocIndex:0},{value:"图形的透明度",paraId:3,tocIndex:0},{value:"支持",paraId:3,tocIndex:0},{value:"1",paraId:3,tocIndex:0},{value:"shape",paraId:4,tocIndex:1},{value:" 为 ",paraId:4,tocIndex:1},{value:"line",paraId:4,tocIndex:1},{value:" 的普通线图层。",paraId:4,tocIndex:1},{value:"line",paraId:5,tocIndex:1},{value:"支持渐变",paraId:6,tocIndex:1},{value:"支持纹理",paraId:7,tocIndex:1},{value:"支持虚线",paraId:8,tocIndex:1},{value:"style",paraId:9,tocIndex:1},{value:"类型",paraId:9,tocIndex:1},{value:"描述",paraId:9,tocIndex:1},{value:"支持数据映射",paraId:9,tocIndex:1},{value:"默认值",paraId:9,tocIndex:1},{value:"stroke",paraId:9,tocIndex:1},{value:"string",paraId:9,tocIndex:1},{value:"图形边框颜色",paraId:9,tocIndex:1},{value:"是",paraId:9,tocIndex:1},{value:"#fff",paraId:9,tocIndex:1},{value:"strokeWidth",paraId:9,tocIndex:1},{value:"number",paraId:9,tocIndex:1},{value:"图形边框半径",paraId:9,tocIndex:1},{value:"否",paraId:9,tocIndex:1},{value:"0",paraId:9,tocIndex:1},{value:"blur",paraId:9,tocIndex:1},{value:"[number, number, number]",paraId:9,tocIndex:1},{value:"图形模糊分布",paraId:9,tocIndex:1},{value:"否",paraId:9,tocIndex:1},{value:"[1, 1, 1]",paraId:9,tocIndex:1},{value:"raisingHeight",paraId:9,tocIndex:1},{value:"number",paraId:9,tocIndex:1},{value:"抬升高度",paraId:9,tocIndex:1},{value:"否",paraId:9,tocIndex:1},{value:"0",paraId:9,tocIndex:1},{value:"heightfixed",paraId:9,tocIndex:1},{value:"boolean",paraId:9,tocIndex:1},{value:"抬升高度是否随 ",paraId:9,tocIndex:1},{value:"zoom",paraId:9,tocIndex:1},{value:" 变化",paraId:9,tocIndex:1},{value:"否",paraId:9,tocIndex:1},{value:"false",paraId:9,tocIndex:1},{value:"shape",paraId:10,tocIndex:2},{value:" 为 ",paraId:10,tocIndex:2},{value:"arc",paraId:10,tocIndex:2},{value:" 平面的弧线。",paraId:10,tocIndex:2},{value:"arc",paraId:11,tocIndex:2},{value:"支持渐变",paraId:12,tocIndex:2},{value:"支持纹理",paraId:13,tocIndex:2},{value:"支持虚线",paraId:14,tocIndex:2},{value:"style",paraId:15,tocIndex:2},{value:"类型",paraId:15,tocIndex:2},{value:"描述",paraId:15,tocIndex:2},{value:"支持数据映射",paraId:15,tocIndex:2},{value:"默认值",paraId:15,tocIndex:2},{value:"segmentNumber",paraId:15,tocIndex:2},{value:"number",paraId:15,tocIndex:2},{value:"弧线分段，分段越多越平滑，消耗越大",paraId:15,tocIndex:2},{value:"否",paraId:15,tocIndex:2},{value:"30",paraId:15,tocIndex:2},{value:"opacity",paraId:15,tocIndex:2},{value:"number",paraId:15,tocIndex:2},{value:"透明度，支持数据映射",paraId:15,tocIndex:2},{value:"是",paraId:15,tocIndex:2},{value:"1",paraId:15,tocIndex:2},{value:"thetaOffset",paraId:15,tocIndex:2},{value:"number",paraId:15,tocIndex:2},{value:"弧线的弧度参数",paraId:15,tocIndex:2},{value:"是",paraId:15,tocIndex:2},{value:"0.314",paraId:15,tocIndex:2},{value:"shape",paraId:16,tocIndex:3},{value:" 为 ",paraId:16,tocIndex:3},{value:"arc3d",paraId:16,tocIndex:3},{value:" 的弧线图层。",paraId:16,tocIndex:3},{value:"arc3d",paraId:17,tocIndex:3},{value:"支持渐变",paraId:18,tocIndex:3},{value:"支持纹理",paraId:19,tocIndex:3},{value:"支持虚线",paraId:20,tocIndex:3},{value:"style",paraId:21,tocIndex:3},{value:"类型",paraId:21,tocIndex:3},{value:"描述",paraId:21,tocIndex:3},{value:"支持数据映射",paraId:21,tocIndex:3},{value:"默认值",paraId:21,tocIndex:3},{value:"opacity",paraId:21,tocIndex:3},{value:"number",paraId:21,tocIndex:3},{value:"透明度，支持数据映射",paraId:21,tocIndex:3},{value:"是",paraId:21,tocIndex:3},{value:"1",paraId:21,tocIndex:3},{value:"segmentNumber",paraId:21,tocIndex:3},{value:"number",paraId:21,tocIndex:3},{value:"弧线分段，分段越多越平滑，消耗越大",paraId:21,tocIndex:3},{value:"否",paraId:21,tocIndex:3},{value:"30",paraId:21,tocIndex:3},{value:"thetaOffset",paraId:21,tocIndex:3},{value:"number",paraId:21,tocIndex:3},{value:"弧线的弧度参数",paraId:21,tocIndex:3},{value:"是",paraId:21,tocIndex:3},{value:"1",paraId:21,tocIndex:3},{value:"shape",paraId:22,tocIndex:4},{value:" 为大圆弧线图层。",paraId:22,tocIndex:4},{value:"greatcircle",paraId:23,tocIndex:4},{value:"支持渐变",paraId:24,tocIndex:4},{value:"支持纹理",paraId:25,tocIndex:4},{value:"支持虚线",paraId:26,tocIndex:4},{value:"style",paraId:27,tocIndex:4},{value:"类型",paraId:27,tocIndex:4},{value:"描述",paraId:27,tocIndex:4},{value:"支持数据映射",paraId:27,tocIndex:4},{value:"默认值",paraId:27,tocIndex:4},{value:"opacity",paraId:27,tocIndex:4},{value:"number",paraId:27,tocIndex:4},{value:"透明度，支持数据映射",paraId:27,tocIndex:4},{value:"是",paraId:27,tocIndex:4},{value:"1",paraId:27,tocIndex:4},{value:"segmentNumber",paraId:27,tocIndex:4},{value:"number",paraId:27,tocIndex:4},{value:"弧线分段，分段越多越平滑，消耗越大",paraId:27,tocIndex:4},{value:"否",paraId:27,tocIndex:4},{value:"30",paraId:27,tocIndex:4},{value:"style",paraId:28,tocIndex:5},{value:"类型",paraId:28,tocIndex:5},{value:"描述",paraId:28,tocIndex:5},{value:"支持数据映射",paraId:28,tocIndex:5},{value:"默认值",paraId:28,tocIndex:5},{value:"opacity",paraId:28,tocIndex:5},{value:"number",paraId:28,tocIndex:5},{value:"透明度，支持数据映射",paraId:28,tocIndex:5},{value:"是",paraId:28,tocIndex:5},{value:"1",paraId:28,tocIndex:5},{value:"strokeOpacity",paraId:28,tocIndex:5},{value:"number",paraId:28,tocIndex:5},{value:"描边透明度",paraId:28,tocIndex:5},{value:"否",paraId:28,tocIndex:5},{value:"30",paraId:28,tocIndex:5},{value:"stroke",paraId:28,tocIndex:5},{value:"number",paraId:28,tocIndex:5},{value:"描边颜色",paraId:28,tocIndex:5},{value:"是",paraId:28,tocIndex:5},{value:"#000",paraId:28,tocIndex:5},{value:"strokeWidth",paraId:28,tocIndex:5},{value:"number",paraId:28,tocIndex:5},{value:"描边宽度",paraId:28,tocIndex:5},{value:"1",paraId:28,tocIndex:5},{value:"否",paraId:28,tocIndex:5},{value:"gapWidth",paraId:28,tocIndex:5},{value:"number",paraId:28,tocIndex:5},{value:"不同方向两条线间距",paraId:28,tocIndex:5},{value:"2",paraId:28,tocIndex:5},{value:"否",paraId:28,tocIndex:5},{value:"offsets",paraId:28,tocIndex:5},{value:"[number,number]",paraId:28,tocIndex:5},{value:"两端偏移量，支持数据映射",paraId:28,tocIndex:5},{value:"是",paraId:28,tocIndex:5},{value:"[0,0]",paraId:28,tocIndex:5},{value:"flowline opacity 和 offsets 支持数据映射，数据驱动设置数据大小",paraId:29,tocIndex:5},{value:"layer.style({\n  opacity: {\n    field: 'count', // 映射字段\n    value: [0.2,0.4,0.6,0.8], // 映射值,支持回调函数，支持设置scale\n  }\n\n// field 和 value  等同于 layer.color('count',[0.2,0.4,0.6,0.8])\n",paraId:30,tocIndex:6},{value:"layer.style({\n  offsets:{\n     field: 'count',\n     values:() => {\n      return [10 + Math.random()*20, 10 + Math.random()*20]\n     }\n})\n\n",paraId:31,tocIndex:7},{value:"shape",paraId:32,tocIndex:8},{value:" 为 ",paraId:32,tocIndex:8},{value:"wall",paraId:32,tocIndex:8},{value:" 地理围栏弧线图层。",paraId:32,tocIndex:8},{value:"wall",paraId:33,tocIndex:8},{value:"支持渐变",paraId:34,tocIndex:8},{value:"支持纹理",paraId:35,tocIndex:8},{value:"shape",paraId:36,tocIndex:9},{value:" 为 ",paraId:36,tocIndex:9},{value:"simple",paraId:36,tocIndex:9},{value:" 简单线图层。",paraId:36,tocIndex:9},{value:"simple",paraId:37,tocIndex:9},{value:"支持渐变",paraId:38,tocIndex:9},{value:"line、arc、arc3d、greatcircle、wall、simple",paraId:39,tocIndex:10},{value:"线图层支持配置渐变效果，在配置渐变效果后会覆盖 ",paraId:40,tocIndex:10},{value:"layer.color",paraId:40,tocIndex:10},{value:" 方法设置的颜色。",paraId:40,tocIndex:10},{value:"style",paraId:41,tocIndex:10},{value:"类型",paraId:41,tocIndex:10},{value:"描述",paraId:41,tocIndex:10},{value:"默认值",paraId:41,tocIndex:10},{value:"sourceColor",paraId:41,tocIndex:10},{value:"IColor",paraId:41,tocIndex:10},{value:"线起始颜色",paraId:41,tocIndex:10},{value:"/",paraId:41,tocIndex:10},{value:"targetColor",paraId:41,tocIndex:10},{value:"IColor",paraId:41,tocIndex:10},{value:"线结尾颜色",paraId:41,tocIndex:10},{value:"/",paraId:41,tocIndex:10},{value:"linearDir",paraId:41,tocIndex:10},{value:"ILinearDir",paraId:41,tocIndex:10},{value:"线渐变方向",paraId:41,tocIndex:10},{value:"vertical",paraId:41,tocIndex:10},{value:"const color = `rgb(200, 100, 50)`;\nconst color2 = '#ff0';\n",paraId:42,tocIndex:11},{value:"vertical 纵向（沿线方向）",paraId:43,tocIndex:12},{value:"horizontal 横向",paraId:43,tocIndex:12},{value:"type ILinearDir = 'vertical' | 'horizontal';\n",paraId:44,tocIndex:12},{value:"line、arc、arc3d、greatcircle",paraId:45,tocIndex:13},{value:"线图层支持纹理以及纹理动画，纹理样式有自己的参数。",paraId:46,tocIndex:13},{value:"style",paraId:47,tocIndex:13},{value:"类型",paraId:47,tocIndex:13},{value:"描述",paraId:47,tocIndex:13},{value:"默认值",paraId:47,tocIndex:13},{value:"lineTexture",paraId:47,tocIndex:13},{value:"boolean",paraId:47,tocIndex:13},{value:"时候开启纹理能力",paraId:47,tocIndex:13},{value:"false",paraId:47,tocIndex:13},{value:"textureBlend",paraId:47,tocIndex:13},{value:"ITextureBlend",paraId:47,tocIndex:13},{value:"纹理混合方式",paraId:47,tocIndex:13},{value:"normal",paraId:47,tocIndex:13},{value:"iconStep",paraId:47,tocIndex:13},{value:"number",paraId:47,tocIndex:13},{value:"纹理贴图在线图层上面排布的间隔",paraId:47,tocIndex:13},{value:"100",paraId:47,tocIndex:13},{value:"线图层的纹理在和线本身的颜色进行融合的时候支持两种，",paraId:48,tocIndex:14},{value:"normal",paraId:48,tocIndex:14},{value:" 和 ",paraId:48,tocIndex:14},{value:"replace",paraId:48,tocIndex:14},{value:"。",paraId:48,tocIndex:14},{value:"normal 纹理和线颜色混合",paraId:49,tocIndex:14},{value:"replace 使用纹理替换线颜色",paraId:49,tocIndex:14},{value:"type ITextureBlend = 'normal' | 'replace';\n",paraId:50,tocIndex:14},{value:"✨ animate",paraId:51,tocIndex:15},{value:"\n当线图层 (shape 为 arc/arc3d) 开启动画模式的时候，纹理在线图层上的分布还会和 animate 的参数相关",paraId:51,tocIndex:15},{value:"线图层上排列的纹理的数量大致为 duration/interval",paraId:52,tocIndex:15},{value:".animate({\n    duration: 1,\n    interval: 0.2,\n    trailLength: 0.1\n});\n\n// 此时 纹理贴图数量为  duration / interval = 5\n",paraId:53,tocIndex:15},{value:"✨ textureBlend 参数",paraId:54,tocIndex:15},{value:"\n通过控制 style 方法中的 textureBlend 参数，我们可以控制纹理图层和线图层的混合情况",paraId:54,tocIndex:15},{value:"normal",paraId:55,tocIndex:15},{value:"replace",paraId:55,tocIndex:15},{value:".style({\n    lineTexture: true, // 开启线的贴图功能\n    iconStep: 30, // 设置贴图纹理的间距\n    textureBlend: 'replace', // 设置纹理混合方式，默认值为 normal，可选值有 normal/replace 两种\n  });\n\n",paraId:56,tocIndex:15},{value:"line、arc、arc3d、greatcircle",paraId:57,tocIndex:16},{value:"线图层支持配置虚线，虚线有自己额外的样式参数。",paraId:58,tocIndex:16},{value:"layer.style({\n    lineType: 'dash'\n    dashArray: [5, 5]\n})\n",paraId:59,tocIndex:16},{value:"style",paraId:60,tocIndex:16},{value:"类型",paraId:60,tocIndex:16},{value:"描述",paraId:60,tocIndex:16},{value:"默认值",paraId:60,tocIndex:16},{value:"lineType",paraId:60,tocIndex:16},{value:"ILineType",paraId:60,tocIndex:16},{value:"线的类别",paraId:60,tocIndex:16},{value:"solid",paraId:60,tocIndex:16},{value:"dashArray",paraId:60,tocIndex:16},{value:"IDashArray",paraId:60,tocIndex:16},{value:"虚线的间隔",paraId:60,tocIndex:16},{value:"/",paraId:60,tocIndex:16},{value:"solid 实线",paraId:61,tocIndex:17},{value:"dash 虚线",paraId:61,tocIndex:17},{value:"dashArray",paraId:62,tocIndex:18},{value:" 只有在 ",paraId:62,tocIndex:18},{value:"ILineType",paraId:62,tocIndex:18},{value:" 为 ",paraId:62,tocIndex:18},{value:"dashed",paraId:62,tocIndex:18},{value:" 的时候才会生效。",paraId:62,tocIndex:18},{value:"// len1 实线长度 len2 间隔长度\ntype IDashArray = [len1: number, len2: number]\n",paraId:63,tocIndex:18}]},3265:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(97571);const d=[{value:"线图层支持纹理贴图和多种表现形式，通过 ",paraId:0},{value:"scene.addImage",paraId:0},{value:" 方法添加到全局的资源，使用 ",paraId:0},{value:"texture",paraId:0},{value:" 方法指定贴图。",paraId:0},{value:"scene.addImage(\n  '02',\n  'https://gw.alipayobjects.com/zos/bmw-prod/ce83fc30-701f-415b-9750-4b146f4b3dd6.svg',\n);\nconst layer = new LineLayer()\n  .source(data)\n  .size(4)\n  .shape('line')\n  .texture('02')\n  .color('#25d8b7')\n  .animate({\n    interval: 1, // 间隔\n    duration: 1, // 持续时间，延时\n    trailLength: 2, // 流线长度\n  })\n  .style({\n    lineTexture: true, // 开启线的贴图功能\n    iconStep: 20, // 设置贴图纹理的间距\n  });\n",paraId:1},{value:"\n  ",paraId:2},{value:"\n    ",paraId:2},{value:"\n  ",paraId:2},{value:"lineTexture 指定是否开启纹理贴图能力",paraId:3},{value:"iconStep 指定贴图在线图层上面排布的间隔",paraId:3},{value:"在线案例",paraId:4},{value:"✨ animate",paraId:5,tocIndex:0},{value:"\n当线图层 (",paraId:5,tocIndex:0},{value:"shape",paraId:5,tocIndex:0},{value:" 为 ",paraId:5,tocIndex:0},{value:"arc",paraId:5,tocIndex:0},{value:"/",paraId:5,tocIndex:0},{value:"arc3d",paraId:5,tocIndex:0},{value:") 开启动画模式的时候，纹理在线图层上的分布还会和 ",paraId:5,tocIndex:0},{value:"animate",paraId:5,tocIndex:0},{value:" 的参数相关.",paraId:5,tocIndex:0},{value:"线图层上排列的纹理的数量大致为 duration/interval",paraId:6,tocIndex:0},{value:".animate({\n    duration: 1,\n    interval: 0.2,\n    trailLength: 0.1\n});\n\n// 此时 纹理贴图数量为  duration / interval = 5\n",paraId:7,tocIndex:0},{value:"✨ textureBlend 参数",paraId:8,tocIndex:0},{value:"\n通过控制 style 方法中的 textureBlend 参数，我们可以控制纹理图层和线图层的混合情况",paraId:8,tocIndex:0},{value:"normal",paraId:9,tocIndex:0},{value:"replace",paraId:9,tocIndex:0},{value:".style({\n    lineTexture: true, // 开启线的贴图功能\n    iconStep: 30, // 设置贴图纹理的间距\n    textureBlend: 'replace', // 设置纹理混合方式，默认值为 normal，可选值有 normal/replace 两种\n  });\n\n",paraId:10,tocIndex:0},{value:"在线案例",paraId:11}]},17325:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(84778);const d=[{value:"L7 地理可视化侧重于地理数据的可视化表达，地图层需要依赖第三方地图，第三方地图通过 Scene 统一创建管理，只需要通过 Scene 传入地图配置项即可。",paraId:0,tocIndex:0},{value:"L7 在内部解决了不同地图底图之间差异，同时 L7 层面统一管理地图的操作方法。",paraId:1,tocIndex:0},{value:"L7 目前支持的百度地图是",paraId:2,tocIndex:0},{value:"API GL版本",paraId:2,tocIndex:0},{value:"，也是百度地图官方推荐使用版本。",paraId:2,tocIndex:0},{value:"使用百度地图之前，需要申请百度地图密钥，如何申请百度地图密钥",paraId:3,tocIndex:1},{value:"点我查看",paraId:3,tocIndex:1},{value:"。",paraId:3,tocIndex:1},{value:"⚠️ L7 内部设置了默认 token，仅供测试使用",paraId:4,tocIndex:1},{value:"import { BaiduMap } from '@antv/l7-maps';\n",paraId:5,tocIndex:2},{value:"L7 提供 BaiduMap直接实例化地图，也可外部传入方式实例化地图。",paraId:6,tocIndex:3},{value:"新项目推荐 BaiduMap 直接实例化，已有地图项目可外部传入方式，以便快速接入 L7 的能力。",paraId:7,tocIndex:3},{value:"import { BaiduMap } from '@antv/l7-maps';\n\nconst scene = new Scene({\n  id: 'map',\n  map: new BaiduMap({\n    // 填写百度地图密钥，此为测试token，不可用于生产\n    token: 'zLhopYPPERGtpGOgimcdKcCimGRyyIsh',\n    center: [103, 30],\n    pitch: 4,\n    zoom: 10,\n    rotation: 19,\n  }),\n});\n",paraId:8,tocIndex:4},{value:"⚠️ scene id 参数需要与 BMapGL.Map 实例是同个容器。",paraId:9,tocIndex:5},{value:"⚠️ 传入地图实例需要自行引入",paraId:10,tocIndex:5},{value:"百度地图的 API",paraId:10,tocIndex:5},{value:"const map = new BMapGL.Map('map', {\n  zoom: 11, // 初始化地图层级\n  minZoom: 4,\n  maxZoom: 23,\n  enableWheelZoom: true,\n});\n\nconst scene = new Scene({\n  id: 'map',\n  map: new BaiduMap({\n    mapInstance: map,\n  }),\n});\n",paraId:11,tocIndex:5},{value:"BaiduMap ",paraId:12,tocIndex:5},{value:"示例地址",paraId:13,tocIndex:5},{value:"、外部传入",paraId:12,tocIndex:5},{value:"示例地址",paraId:14,tocIndex:5},{value:" ",paraId:15,tocIndex:7},{value:"number",paraId:15,tocIndex:7},{value:" ",paraId:15,tocIndex:7},{value:"地图初始显示级别 {number} Mapbox （0-24） 高德 （2-19）",paraId:16,tocIndex:7},{value:"地图初始中心经纬度 {Lnglat}",paraId:17,tocIndex:8},{value:"地图初始俯仰角度 {number}  default 0",paraId:18,tocIndex:9},{value:"地图最小缩放等级 {number}  default 0 Mapbox 0-24） 高德 （2-19）",paraId:19,tocIndex:10},{value:"地图最大缩放等级 {number}  default 22 Mapbox（0-24） 高德 （2-19）",paraId:20,tocIndex:11},{value:"地图是否可旋转 {Boolean} default true",paraId:21,tocIndex:12},{value:"Scene 统一代理，见 ",paraId:22,tocIndex:13},{value:"Scene 文档",paraId:23,tocIndex:13},{value:"或者",paraId:24,tocIndex:13},{value:"scene.map 直接调用 map 实例方法",paraId:25,tocIndex:13}]},63932:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(44269);const d=[{value:"L7 地理可视化侧重于地理数据的可视化表达，地图层需要依赖第三方地图，第三方地图通过 Scene 统一创建管理，只需要通过 Scene 传入地图配置项即可。",paraId:0,tocIndex:0},{value:"L7 在内部解决了不同地图底图之间差异，同时 L7 层面统一管理地图的操作方法。",paraId:1,tocIndex:0},{value:"高德地图 官网",paraId:2,tocIndex:0},{value:"高德地图 API 配置参数",paraId:3,tocIndex:1},{value:"token\n注册高德 ",paraId:4,tocIndex:1},{value:"API token",paraId:4,tocIndex:1},{value:"const L7AMap = new GaodeMap({\n  pitch: 35.210526315789465,\n  style: 'dark',\n  center: [104.288144, 31.239692],\n  zoom: 4.4,\n  token: 'xxxx - token',\n  plugin: [], // 可以不设置\n});\n",paraId:5,tocIndex:2},{value:" ",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:" ",paraId:6,tocIndex:4},{value:"地图初始显示级别 {number} Mapbox （0-24） 高德 （2-19）",paraId:7,tocIndex:4},{value:"地图初始中心经纬度 {Lnglat}",paraId:8,tocIndex:5},{value:"地图初始俯仰角度 {number}  default 0",paraId:9,tocIndex:6},{value:"地图最小缩放等级 {number}  default 0 Mapbox 0-24） 高德 （2-19）",paraId:10,tocIndex:7},{value:"地图最大缩放等级 {number}  default 22 Mapbox（0-24） 高德 （2-19）",paraId:11,tocIndex:8},{value:"地图是否可旋转 {Boolean} default true",paraId:12,tocIndex:9},{value:"Scene 统一代理，见 ",paraId:13,tocIndex:10},{value:"Scene 文档",paraId:14,tocIndex:10},{value:"或者",paraId:15,tocIndex:10},{value:"scene.map 直接调用 map 实例方法",paraId:16,tocIndex:10},{value:"为了支持已有地图项目快速接入 L7 的能力，L7 提供传入地图实例的方法。如果你是新项目推荐使用 Scene 初始化地图",paraId:17,tocIndex:11},{value:"⚠️ scene id 参数需要地图的 Map 实例是同个容器。",paraId:18,tocIndex:11},{value:"⚠️ 传入地图实例需要自行引入相关地图的 API",paraId:19,tocIndex:11},{value:"⚠️ viewMode 设置为 3D 模式（GaodeMap2.0 支持 2D 模式，可以不设置）",paraId:20,tocIndex:11},{value:"const map = new AMap.Map('map', {\n  viewMode: '3D',\n  resizeEnable: true, // 是否监控地图容器尺寸变化\n  zoom: 11, // 初始化地图层级\n  center: [116.397428, 39.90923], // 初始化地图中心点\n});\nconst scene = new Scene({\n  id: 'map',\n  map: new GaodeMap({\n    mapInstance: map,\n  }),\n});\n",paraId:21,tocIndex:12},{value:"示例地址",paraId:22,tocIndex:12},{value:"代码地址",paraId:23,tocIndex:12},{value:"示例地址（ 2D ）",paraId:24,tocIndex:12},{value:"代码地址",paraId:25,tocIndex:12},{value:" ",paraId:26,tocIndex:14},{value:"number",paraId:26,tocIndex:14},{value:" ",paraId:26,tocIndex:14},{value:"地图初始显示级别 {number} Mapbox （0-24） 高德 （2-19）",paraId:27,tocIndex:14},{value:"地图初始中心经纬度 {Lnglat}",paraId:28,tocIndex:15},{value:"地图初始俯仰角度 {number}  default 0",paraId:29,tocIndex:16},{value:"地图最小缩放等级 {number}  default 0 Mapbox 0-24） 高德 （2-19）",paraId:30,tocIndex:17},{value:"地图最大缩放等级 {number}  default 22 Mapbox（0-24） 高德 （2-19）",paraId:31,tocIndex:18},{value:"地图是否可旋转 {Boolean} default true",paraId:32,tocIndex:19},{value:"Scene 统一代理，见 ",paraId:33,tocIndex:20},{value:"Scene 文档",paraId:34,tocIndex:20},{value:"或者",paraId:35,tocIndex:20},{value:"scene.map 直接调用 map 实例方法",paraId:36,tocIndex:20},{value:"const scene = new Scene({\n  id: 'map',\n  map: new GaodeMap({\n    center: [116.475, 39.99],\n    pitch: 0,\n    zoom: 13,\n    plugin: ['AMap.ToolBar', 'AMap.LineSearch'],\n  }),\n});\n// plugin: ['AMap.ToolBar', 'AMap.LineSearch'],\n// 为了使用对应插件的能力，应该首先在 plugin 中注册对应的插件\n\n// 加载的 AMap 会挂载在全局的 window 对象上\nscene.on('loaded', () => {\n  window.AMap.plugin(['AMap.ToolBar', 'AMap.LineSearch'], () => {\n    // add control\n    scene.map.addControl(new AMap.ToolBar());\n\n    var linesearch = new AMap.LineSearch({\n      pageIndex: 1, //页码，默认值为1\n      pageSize: 1, //单页显示结果条数，默认值为20，最大值为50\n      city: '北京', //限定查询城市，可以是城市名（中文/中文全拼）、城市编码，默认值为『全国』\n      extensions: 'all', //是否返回公交线路详细信息，默认值为『base』\n    });\n\n    //执行公交路线关键字查询\n    linesearch.search('536', function (status, result) {\n      //打印状态信息status和结果信息result\n      // ... do something\n    });\n  });\n});\n",paraId:37,tocIndex:21},{value:"在线案例",paraId:38}]},41343:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(88528);const d=[{value:"L7 地理可视化侧重于地理数据的可视化表达，地图层需要依赖第三方地图，第三方地图通过 Scene 统一创建管理，只需要通过 Scene 传入地图配置项即可。",paraId:0,tocIndex:0},{value:"L7 在内部解决了不同地图底图之间差异，同时 L7 层面统一管理地图的操作方法。",paraId:1,tocIndex:0},{value:"Leaflet 官网",paraId:2,tocIndex:0},{value:"Leaflet GitHub",paraId:2,tocIndex:0},{value:"L7-Leaflet 为三方插件 L7本身没有内置，需要独立按照",paraId:3,tocIndex:1},{value:"L7-Leaflet GitHub",paraId:4,tocIndex:1},{value:"L7-Leaflet Demo ",paraId:4,tocIndex:1},{value:" npm install  '@antv/l7-leaflet'\n\n",paraId:5,tocIndex:1},{value:"or",paraId:6,tocIndex:1},{value:'<script src="https://unpkg.com/@antv/l7-leaflet"><\/script>\n',paraId:7,tocIndex:1},{value:"import { Scene } from '@antv/l7';\nimport * as L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { Map } from '@antv/l7-leaflet';\nconst scene = new Scene({\n  id: 'map',\n  map: new Map({\n    pitch: 0,\n    center: [112, 37.8],\n    zoom: 3,\n    minZoom: 1,\n  }),\n});\n",paraId:8,tocIndex:2},{value:"import * as L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { LineLayer } from '@antv/l7';\nimport { L7Layer } from '@antv/l7-leaflet';\n\nconst map = L.map('map', {\n  minZoom: 1,\n}).setView([30, 112], 3);\nconst mapType = 'vec';\nL.tileLayer(\n  'https://t{s}.tianditu.gov.cn/' +\n    mapType +\n    '_w/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=' +\n    mapType +\n    '&STYLE=default&TILEMATRIXSET=w&FORMAT=tiles&TILECOL={x}&TILEROW={y}&TILEMATRIX={z}&tk=b72aa81ac2b3cae941d1eb213499e15e',\n  {\n    subdomains: ['0', '1', '2', '3', '4', '5', '6', '7'],\n    attribution:\n      '&copy; <a href=\"http://lbs.tianditu.gov.cn/home.html\">天地图 GS(2022)3124号 - 甲测资字1100471</a>',\n  },\n).addTo(map);\n\nconst l7layer = new L7Layer().addTo(map);\nconst scene = l7layer.getScene();\n",paraId:9,tocIndex:3}]},91732:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(67294);const d=[{value:"L7 地理可视化侧重于地理数据的可视化表达，地图层需要依赖第三方地图，第三方地图通过 Scene 统一创建，创建管理\n只需要通过 Scene 传入地图配置项即可。",paraId:0,tocIndex:0},{value:"L7 在内部解决了不同地图底图之间差异，同时 L7 层面统一管理地图的操作方法。",paraId:1,tocIndex:0},{value:"Map 独立地图引擎，不需要底图、或者加载地图瓦片服务，不需要 Token",paraId:2,tocIndex:0},{value:"import { Map } from '@antv/l7-maps';\n",paraId:3,tocIndex:1},{value:"import { Scene, PointLayer } from '@antv/l7';\nimport { Map } from '@antv/l7-maps';\n\nconst scene = new Scene({\n  id: 'map',\n  map: new Map({\n    zoom: 10,\n    minZoom: 0,\n    maxZoom: 18,\n  }),\n});\n\nscene.on('loaded', () => {\n  // 添加地图底图\n  const layer = new RasterLayer();\n  layer.source(\n    'https://webrd0{1-3}.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scale=1&style=8&x={x}&y={y}&z={z}',\n    {\n      parser: {\n        type: 'rasterTile',\n        tileSize: 256,\n        minZoom: 2,\n        maxZoom: 18,\n      },\n    },\n  );\n  scene.addLayer(layer);\n});\n",paraId:4,tocIndex:2},{value:" ",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:" ",paraId:5,tocIndex:4},{value:"地图初始显示级别 {number} Mapbox （0-24） 高德 （2-19）",paraId:6,tocIndex:4},{value:"地图初始中心经纬度 {Lnglat}",paraId:7,tocIndex:5},{value:"地图初始俯仰角度 {number}  default 0",paraId:8,tocIndex:6},{value:"地图最小缩放等级 {number}  default 0 Mapbox 0-24） 高德 （2-19）",paraId:9,tocIndex:7},{value:"地图最大缩放等级 {number}  default 22 Mapbox（0-24） 高德 （2-19）",paraId:10,tocIndex:8},{value:"地图是否可旋转 {Boolean} default true",paraId:11,tocIndex:9},{value:"Scene 统一代理，见 ",paraId:12,tocIndex:10},{value:"Scene 文档",paraId:13,tocIndex:10},{value:"或者",paraId:14,tocIndex:10},{value:"scene.map 直接调用 map 实例方法",paraId:15,tocIndex:10}]},2749:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(5808);const d=[{value:"L7 地理可视化侧重于地理数据的可视化表达，地图层需要依赖第三方地图，第三方地图通过 Scene 统一创建管理，只需要通过 Scene 传入地图配置项即可。",paraId:0,tocIndex:0},{value:"L7 在内部解决了不同地图底图之间差异，同时 L7 层面统一管理地图的操作方法。",paraId:1,tocIndex:0},{value:"Mapbox-gl 官网",paraId:2,tocIndex:0},{value:" Mapbox-gl GitHub",paraId:2,tocIndex:0},{value:"申请token",paraId:3,tocIndex:1},{value:"import { Scene, PointLayer } from '@antv/l7';\nimport { Mapbox } from '@antv/l7-maps';\n\nconst scene = new Scene({\n  id: 'map',\n  map: new Mapbox({\n    zoom: 10,\n    minZoom: 0,\n    maxZoom: 18,\n    token: 'xxxx', //必须\n  }),\n});\n",paraId:4,tocIndex:2},{value:"mapboxgl.accessToken = 'xxxx - token';\nconst map = new mapboxgl.Map({\n  container: 'map', // container id\n  style: 'mapbox://styles/mapbox/streets-v11', // stylesheet location\n  center: [-74.5, 40], // starting position [lng, lat]\n  zoom: 9, // starting zoom\n});\n\nconst scene = new Scene({\n  id: 'map',\n  map: new Mapbox({\n    mapInstance: map,\n  }),\n});\n",paraId:5,tocIndex:3},{value:" ",paraId:6,tocIndex:5},{value:"number",paraId:6,tocIndex:5},{value:" ",paraId:6,tocIndex:5},{value:"地图初始显示级别 {number} Mapbox （0-24） 高德 （2-19）",paraId:7,tocIndex:5},{value:"地图初始中心经纬度 {Lnglat}",paraId:8,tocIndex:6},{value:"地图初始俯仰角度 {number}  default 0",paraId:9,tocIndex:7},{value:"地图最小缩放等级 {number}  default 0 Mapbox 0-24） 高德 （2-19）",paraId:10,tocIndex:8},{value:"地图最大缩放等级 {number}  default 22 Mapbox（0-24） 高德 （2-19）",paraId:11,tocIndex:9},{value:"地图是否可旋转 {Boolean} default true",paraId:12,tocIndex:10},{value:"Scene 统一代理，见 ",paraId:13,tocIndex:11},{value:"Scene 文档",paraId:14,tocIndex:11},{value:"或者",paraId:15,tocIndex:11},{value:"scene.map 直接调用 map 实例方法",paraId:16,tocIndex:11}]},8508:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(66866);const d=[{value:"L7 地理可视化侧重于地理数据的可视化表达，地图层需要依赖第三方地图，第三方地图通过 Scene 统一创建管理，只需要通过 Scene 传入地图配置项即可。",paraId:0,tocIndex:0},{value:"L7 在内部解决了不同地图底图之间差异，同时 L7 层面统一管理地图的操作方法。",paraId:1,tocIndex:0},{value:"MapLibre",paraId:2,tocIndex:0},{value:" MapLibre GitHub",paraId:2,tocIndex:0},{value:"import { Scene, PointLayer } from '@antv/l7';\nimport { MapLibre } from '@antv/l7-maps';\nconst scene = new Scene({\n  id: 'map',\n  map: new MapLibre({\n    zoom: 10,\n    style: 'https://api.maptiler.com/maps/streets/style.json?key=YbCPLULzWdf1NplssEIc', // style URL\n    minZoom: 0,\n    maxZoom: 18,\n  }),\n});\n",paraId:3,tocIndex:1},{value:"import { Scene, PointLayer } from '@antv/l7';\nimport { MapLibre } from '@antv/l7-maps';\nvar map = new maplibregl.Map({\n  container: 'map', // container id\n  style: 'https://demotiles.maplibre.org/style.json', // style URL\n  center: [0, 0], // starting position [lng, lat]\n  zoom: 1, // starting zoom\n});\n\nconst scene = new Scene({\n  id: 'map',\n  map: new MapLibre({\n    mapInstance: map,\n  }),\n});\n",paraId:4,tocIndex:2},{value:" ",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:" ",paraId:5,tocIndex:4},{value:"地图初始显示级别 {number} Mapbox （0-24） 高德 （2-19）",paraId:6,tocIndex:4},{value:"地图初始中心经纬度 {Lnglat}",paraId:7,tocIndex:5},{value:"地图初始俯仰角度 {number}  default 0",paraId:8,tocIndex:6},{value:"地图最小缩放等级 {number}  default 0 Mapbox 0-24） 高德 （2-19）",paraId:9,tocIndex:7},{value:"地图最大缩放等级 {number}  default 22 Mapbox（0-24） 高德 （2-19）",paraId:10,tocIndex:8},{value:"地图是否可旋转 {Boolean} default true",paraId:11,tocIndex:9},{value:"Scene 统一代理，见 ",paraId:12,tocIndex:10},{value:"Scene 文档",paraId:13,tocIndex:10},{value:"或者",paraId:14,tocIndex:10},{value:"scene.map 直接调用 map 实例方法",paraId:15,tocIndex:10}]},27325:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(93310);const d=[{value:"L7 地理可视化侧重于地理数据的可视化表达，地图层需要依赖第三方地图，第三方地图通过 Scene 统一创建管理，只需要通过 Scene 传入地图配置项即可。",paraId:0,tocIndex:0},{value:"L7 在内部解决了不同地图底图之间差异，同时 L7 层面统一管理地图的操作方法。",paraId:1,tocIndex:0},{value:"L7 目前支持的腾讯地图是",paraId:2,tocIndex:0},{value:"JavaScript API GL",paraId:2,tocIndex:0},{value:"，也是腾讯地图官方推荐使用版本。",paraId:2,tocIndex:0},{value:"使用腾讯地图之前，需要申请腾讯地图密钥，如何申请腾讯地图密钥",paraId:3,tocIndex:1},{value:"点我查看",paraId:3,tocIndex:1},{value:"。",paraId:3,tocIndex:1},{value:"⚠️ L7 内部设置了默认 token，仅供测试使用。",paraId:4,tocIndex:1},{value:"import { TencentMap } from '@antv/l7-maps';\n",paraId:5,tocIndex:2},{value:"import { Scene, PointLayer } from '@antv/l7';\nimport { TencentMap } from '@antv/l7-maps';\nconst scene = new Scene({\n  id: 'map',\n  map: new TencentMap({\n    zoom: 10,\n    minZoom: 5,\n    maxZoom: 18,\n  }),\n});\n",paraId:6,tocIndex:3},{value:"腾讯底图 ",paraId:7,tocIndex:3},{value:"示例地址",paraId:8,tocIndex:3},{value:"、腾讯地图实例化",paraId:7,tocIndex:3},{value:"示例地址",paraId:9,tocIndex:3},{value:" ",paraId:10,tocIndex:5},{value:"number",paraId:10,tocIndex:5},{value:" ",paraId:10,tocIndex:5},{value:"地图初始显示级别 {number} Mapbox （0-24） 高德 （2-19）",paraId:11,tocIndex:5},{value:"地图初始中心经纬度 {Lnglat}",paraId:12,tocIndex:6},{value:"地图初始俯仰角度 {number}  default 0",paraId:13,tocIndex:7},{value:"地图最小缩放等级 {number}  default 0 Mapbox 0-24） 高德 （2-19）",paraId:14,tocIndex:8},{value:"地图最大缩放等级 {number}  default 22 Mapbox（0-24） 高德 （2-19）",paraId:15,tocIndex:9},{value:"地图是否可旋转 {Boolean} default true",paraId:16,tocIndex:10},{value:"Scene 统一代理，见 ",paraId:17,tocIndex:11},{value:"Scene 文档",paraId:18,tocIndex:11},{value:"或者",paraId:19,tocIndex:11},{value:"scene.map 直接调用 map 实例方法",paraId:20,tocIndex:11}]},63535:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(88955);const d=[{value:"L7 地理可视化侧重于地理数据的可视化表达，地图层需要依赖第三方地图，第三方地图通过 Scene 统一创建管理，只需要通过 Scene 传入地图配置项即可。",paraId:0,tocIndex:0},{value:"L7 在内部解决了不同地图底图之间差异，同时 L7 层面统一管理地图的操作方法。",paraId:1,tocIndex:0},{value:"天地图 官网",paraId:2,tocIndex:0},{value:"、",paraId:2,tocIndex:0},{value:"天地图JavaScript API 4.0支持HTTP和HTTPS，免费对外开放，可直接使用。使用API之前，需要",paraId:3,tocIndex:1},{value:"申请应用Key",paraId:3,tocIndex:1},{value:".",paraId:3,tocIndex:1}]},28706:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(8072);const d=[{value:"CanvasLayer",paraId:0},{value:" 会在官方图层画布之上额外创建一个 ",paraId:0},{value:"canvas",paraId:0},{value:" 画布，允许用户通过 ",paraId:0},{value:"canvas",paraId:0},{value:" 绘制的方法自定义图层的内容和样式，相比于 ",paraId:0},{value:"Marker",paraId:0},{value:" 通过创建实际 ",paraId:0},{value:"DOM",paraId:0},{value:" 的方式，",paraId:0},{value:"CanvasLayer",paraId:0},{value:" 无疑有更佳的性能，同时 ",paraId:0},{value:"CanvasLayer",paraId:0},{value:" 的绘制内容会永远覆盖在官方图层的内容之上。",paraId:0},{value:"用户主要通过 ",paraId:1},{value:"CanvasLayer",paraId:1},{value:" 的 ",paraId:1},{value:"draw",paraId:1},{value:" 回调函数来自定义 ",paraId:1},{value:"canvas",paraId:1},{value:" 上绘制的内容，并且 ",paraId:1},{value:"CanvasLayer",paraId:1},{value:" 在用户进行地图缩放、移动等操作时会自动调用 ",paraId:1},{value:"draw",paraId:1},{value:" 方法保证绘制物与地图位置相对不变。",paraId:1},{value:"import { CanvasLayer, Scene } from '@antv/l7';\n\nconst scene = new Scene({\n  //...\n});\n\nscene.on('loaded', () => {\n  const layer = new CanvasLayer({\n    trigger: 'change',\n  });\n\n  layer.draw(({ container, ctx, utils }) => {\n    const [width, height] = size;\n    // 清空画布\n    ctx.clearRect(0, 0, container.width, container.height);\n    // 经纬度 => 像素坐标 的转换\n    const { x, y } = utils.lngLatToContainer([120, 30]);\n    // 设置绘制颜色\n    ctx.fillStyle = 'red';\n    // 绘制一个矩形\n    ctx.fillRect(x, y, 10, 10);\n  });\n\n  scene.addLayer(layer);\n});\n",paraId:2,tocIndex:0},{value:"在线案例",paraId:3},{value:"类型：",paraId:4,tocIndex:2},{value:"(drawParams: ICanvasLayerRenderParams) => void",paraId:4,tocIndex:2},{value:"type ICanvasLayerRenderParams = {\n  canvas: HTMLCanvasELement;\n  ctx: RenderingContext;\n  container: {\n    width: number;\n    height: number;\n    bounds: [\n      [number, number],\n      [number, number],\n    ];\n  };\n  utils: {\n    lngLatToContainer: IMapService['lngLatToContainer'];\n  };\n  mapService: IMapService;\n}\n",paraId:5,tocIndex:2},{value:"作用：",paraId:6,tocIndex:2},{value:"draw",paraId:6,tocIndex:2},{value:" 方法是用于在地图状态更新时调用的渲染函数，接受相关参数，用户在该函数中写 canvas 的绘制逻辑",paraId:6,tocIndex:2},{value:"canvas CanvasLayer 生成的 canvas DOM 节点",paraId:7,tocIndex:2},{value:"ctx 生成的 canvas DOM 的上下文",paraId:7,tocIndex:2},{value:"container 当前视图的实际绘图范围和地图展示的经纬度范围",paraId:7,tocIndex:2},{value:"utils 提供在 ",paraId:7,tocIndex:2},{value:"draw",paraId:7,tocIndex:2},{value:" 方法中常用的工具函数",paraId:7,tocIndex:2},{value:"mapService 当前地图的 ",paraId:7,tocIndex:2},{value:"mapService",paraId:7,tocIndex:2},{value:"，提供位置转换的相关方法",paraId:7,tocIndex:2},{value:"类型：",paraId:8,tocIndex:3},{value:"'change' | 'end'",paraId:8,tocIndex:3},{value:"作用：指定 CanvasLayer 的更新方式，update 有两个值 'change'、'end'，默认为 'change'",paraId:9,tocIndex:3},{value:"change：地图更新时触发 ",paraId:10,tocIndex:3},{value:"draw",paraId:10,tocIndex:3},{value:" 方法",paraId:10,tocIndex:3},{value:"end： 地图拖动完后/缩放完后触发 ",paraId:10,tocIndex:3},{value:"draw",paraId:10,tocIndex:3},{value:" 方法",paraId:10,tocIndex:3},{value:"类型：",paraId:11,tocIndex:4},{value:"number",paraId:11,tocIndex:4},{value:"作用：每个创建一个 CanvasLayer，L7 会生成一个 Canvas DOM 的实例，我们通过设置 zIndex 的值来调整 CanvasLayer 的层级。",paraId:12,tocIndex:4},{value:"类型：",paraId:13,tocIndex:6},{value:"(drawCallback: (renderParams: ICanvasLayerRenderParams) => void) => this",paraId:13,tocIndex:6},{value:"作用：更新 draw 绘制方法",paraId:14,tocIndex:6},{value:"类型：",paraId:15,tocIndex:7},{value:"(options: Partial<ICanvasLayerOptions>) => this",paraId:15,tocIndex:7},{value:"作用：更新 ",paraId:16,tocIndex:7},{value:"CanvasLayer",paraId:16,tocIndex:7},{value:" 的配置",paraId:16,tocIndex:7},{value:"类型：",paraId:17,tocIndex:8},{value:"() => void",paraId:17,tocIndex:8},{value:"作用：触发 CanvasLayer 的重新渲染",paraId:18,tocIndex:8},{value:"类型：",paraId:19,tocIndex:9},{value:"() => HTMLCanvasElement | null",paraId:19,tocIndex:9},{value:"作用：获取 ",paraId:20,tocIndex:9},{value:"Canvas",paraId:20,tocIndex:9},{value:" 实例，只有在 ",paraId:20,tocIndex:9},{value:"CanvasLayer",paraId:20,tocIndex:9},{value:" 的 ",paraId:20,tocIndex:9},{value:"add",paraId:20,tocIndex:9},{value:" 事件触发后，",paraId:20,tocIndex:9},{value:"getCanvas",paraId:20,tocIndex:9},{value:" 才能获取到值",paraId:20,tocIndex:9},{value:"类型：",paraId:21,tocIndex:10},{value:"() => this",paraId:21,tocIndex:10},{value:"作用：显示 ",paraId:22,tocIndex:10},{value:"CanvasLayer",paraId:22,tocIndex:10},{value:"类型：",paraId:23,tocIndex:11},{value:"() => this",paraId:23,tocIndex:11},{value:"作用：隐藏 ",paraId:24,tocIndex:11},{value:"CanvasLayer",paraId:24,tocIndex:11},{value:"图层基础事件可见 ",paraId:25,tocIndex:12},{value:"图层事件",paraId:26,tocIndex:12},{value:"注意",paraId:27,tocIndex:12},{value:"：如需监听 ",paraId:27,tocIndex:12},{value:"canvas",paraId:27,tocIndex:12},{value:" 画布相关事件，需要在 ",paraId:27,tocIndex:12},{value:"CanvasLayer",paraId:27,tocIndex:12},{value:" 触发 ",paraId:27,tocIndex:12},{value:"add",paraId:27,tocIndex:12},{value:" 事件后（",paraId:27,tocIndex:12},{value:"canvas",paraId:27,tocIndex:12},{value:" DOM 初始化并挂载完成后），方可监听相应事件。",paraId:27,tocIndex:12},{value:"例如：",paraId:28,tocIndex:12},{value:"const layer = new CanvasLayer({\n  // ...\n});\nscene.addLayer(layer);\n\nlayer.on('add', () => {\n  // 通过 getCanvas 获取 canvas DOM 实例\n  layer.getCanvas().addEventListener('click', (e) => {\n    console.log(e);\n  });\n});\n",paraId:29,tocIndex:12}]},53067:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(47503);const d=[{value:"CityBuildingLayer",paraId:0,tocIndex:0},{value:" 用于构建城市建筑 3D 模型, 展示城市建筑",paraId:0,tocIndex:0},{value:"import { CityBuildingLayer } from '@antv/l7';\n",paraId:1,tocIndex:1},{value:"是否开启动画效果, 仅支持",paraId:2,tocIndex:2},{value:"boolean",paraId:2,tocIndex:2},{value:" 或",paraId:2,tocIndex:2},{value:"enable: boolean",paraId:2,tocIndex:2},{value:" 配置项",paraId:2,tocIndex:2},{value:"layer.animate(true);\n\nlayer.animatte({\n  enable: true,\n});\n",paraId:3,tocIndex:2},{value:"✨ 在开启 animate 后默认会打开点亮窗户的动画",paraId:4,tocIndex:2},{value:"\n🌟 开启 animate 动画是打开扫光动画的前提",paraId:4,tocIndex:2},{value:"baseColor 楼房颜色,",paraId:5,tocIndex:3},{value:"windowColor: 窗户颜色,",paraId:5,tocIndex:3},{value:"brightColor: 点亮窗户颜色",paraId:5,tocIndex:3},{value:"sweep: 圆形扫光扩散动画相关配置项\n",paraId:5,tocIndex:3},{value:"enable: 是否开启扫光扩散",paraId:6,tocIndex:3},{value:"sweepRadius: 扩散半径",paraId:6,tocIndex:3},{value:"sweepCenter: 扩散中心店坐标",paraId:6,tocIndex:3},{value:"sweepColor: 扩散颜色",paraId:6,tocIndex:3},{value:"sweepSpeed: 扩散速度",paraId:6,tocIndex:3},{value:"baseColor: 开启 sweep 时的基础颜色",paraId:5,tocIndex:3},{value:"其他 style 配置项同",paraId:7,tocIndex:3},{value:"baselayer#style",paraId:8},{value:"自定义动画频率需要 关闭默认动画，通过 ",paraId:9,tocIndex:4},{value:"setLight",paraId:9,tocIndex:4},{value:" 方法不断更新时间",paraId:9,tocIndex:4},{value:"参数\ntime : 时间 毫秒",paraId:10,tocIndex:5},{value:"import { CityBuildingLayer, Scene } from '@antv/l7';\nimport { Mapbox } from '@antv/l7-maps';\n\nconst scene = new Scene({\n  id: 'map',\n  map: new Mapbox({\n    style: 'dark',\n    center: [121.507674, 31.223043],\n    pitch: 65.59312320916906,\n    zoom: 15.4,\n    minZoom: 15,\n    maxZoom: 18,\n  }),\n});\nconst buildingLayer = new CityBuildingLayer();\nbuildingLayer.animate(false);\n\nlet i = 0;\nfunction step() {\n  buildingLayer.setLight(i++);\n  scene.render();\n  requestAnimationFrame(step);\n}\n\nscene.on('loaded', () => {\n  step();\n});\n",paraId:11,tocIndex:5},{value:"import { Scene, CityBuildingLayer } from '@antv/l7';\nimport { GaodeMap } from '@antv/l7-maps';\n\nconst scene = new Scene({\n  id: 'map',\n  map: new GaodeMap({\n    style: 'dark',\n    center: [120.173104, 30.244072],\n    pitch: 70.41138037735848,\n    zoom: 17.18,\n    rotation: 2.24, // 358.7459759480504\n    minZoom: 14,\n  }),\n});\n\nscene.on('loaded', () => {\n  fetch('https://gw.alipayobjects.com/os/rmsportal/ggFwDClGjjvpSMBIrcEx.json')\n    .then((res) => res.json())\n    .then((data) => {\n      const layer = new CityBuildingLayer({\n        zIndex: 0,\n      });\n      layer.source(data);\n      scene.addLayer(layer);\n    });\n});\n",paraId:12,tocIndex:6},{value:"在线案例",paraId:13}]},39796:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(25184);const d=[{value:"PlaneGeometry 是 L7 提供的通用的平面几何体图形，表现为可以自定义为位置，大小和分段数的贴地矩形。",paraId:0,tocIndex:0},{value:"设置普通矩形",paraId:1,tocIndex:1},{value:"import { Scene, GeometryLayer } from '@antv/l7';\n\nconst layer = new GeometryLayer()\n  .shape('plane')\n  .style({\n    opacity: 0.8,\n    width: 0.074,\n    height: 0.061,\n    center: [120.1025, 30.2594],\n  })\n  .active(true)\n  .color('#ff0');\nscene.addLayer(layer);\n",paraId:2,tocIndex:1},{value:"在线案例",paraId:3},{value:"设置 3D 地形模式",paraId:4},{value:"import { Scene, GeometryLayer } from '@antv/l7';\n\nconst layer = new GeometryLayer().shape('plane').style({\n  width: 0.074,\n  height: 0.061,\n  center: [120.1025, 30.2594],\n  widthSegments: 200,\n  heightSegments: 200,\n  terrainClipHeight: 1,\n  mapTexture:\n    'https://gw.alipayobjects.com/mdn/rms_23a451/afts/img/A*gA0NRbuOF5cAAAAAAAAAAAAAARQnAQ',\n  terrainTexture:\n    'https://gw.alipayobjects.com/mdn/rms_23a451/afts/img/A*eYFaRYlnnOUAAAAAAAAAAAAAARQnAQ',\n  rgb2height: (r, g, b) => {\n    let h = (r * 255.0 * 256.0 * 256.0 + g * 255.0 * 256.0 + b * 255.0) * 0.1;\n    h = h / 200 - 12750;\n    h = Math.max(0, h);\n    return h;\n  },\n});\nscene.addLayer(layer);\n",paraId:5},{value:"在线案例",paraId:6},{value:"🌟 PlaneGeometry 不需要设置 source，我们在 style 中通过 center 赋予其位置信息。",paraId:7,tocIndex:2},{value:"PlaneGeometry 主要通过 style 方法设置位置、大小以及其他属性。",paraId:8,tocIndex:3},{value:"设置 PlaneGeometry 的位置，定位是 PlaneGeometry 的几何中心。PlaneGeometry 贴地放置。",paraId:9,tocIndex:4},{value:"设置 PlaneGeometry 的宽度，单位是经度。",paraId:10,tocIndex:5},{value:"设置 PlaneGeometry 的高度，单位是纬度。",paraId:11,tocIndex:6},{value:"设置 PlaneGeometry 在 纬度方向上的分段数。",paraId:12,tocIndex:7},{value:"设置 PlaneGeometry 在 经度方向上的分段数。",paraId:13,tocIndex:8},{value:"PlaneGeometry 纹理贴图 URL。",paraId:14,tocIndex:9},{value:"PlaneGeometry 高度贴图 URL，当存在该参数的时候 L7 会自动解析高程信息。",paraId:15,tocIndex:10},{value:"指定 3D 地形的裁剪高度。在一些情况下我们可能只需要保留存在丘陵山地的部分，通过这个参数我们可以指定地形高度低于这个参数值的部分不显示.",paraId:16,tocIndex:11},{value:"这是一个回调函数，参数是 L7 解析出的地形贴图的 rgb 信息，用户可以使用该函数定义高度值的计算逻辑（不同的地形贴图计算逻辑不同）。",paraId:17,tocIndex:12},{value:"🌟 widthSegments/heightSegments 指定 planeGeometry 的分段数，分段越多，地形越平滑，同时性能消耗越大。",paraId:18,tocIndex:12}]},99408:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(41495);const d=[{value:"SpriteGeometry 是 L7 提供的通用的粒子图层，可以用来绘制各种粒子效果。",paraId:0,tocIndex:0},{value:"设置普通的粒子图层。",paraId:1,tocIndex:1},{value:"import { Scene, GeometryLayer } from '@antv/l7';\n\nlet layer = new GeometryLayer()\n  .shape('sprite')\n  .size(10)\n  .style({\n    opacity: 0.3,\n    center: [120, 30],\n    spriteCount: 120,\n    spriteRadius: 10,\n    spriteTop: 300,\n    spriteUpdate: 10,\n    spriteScale: 0.6,\n  });\n",paraId:2,tocIndex:1},{value:"在线案例",paraId:3},{value:"🌟 SpriteGeometry 不需要设置 source，我们在 style 中通过 center 赋予其位置信息。",paraId:4,tocIndex:2},{value:"SpriteGeometry 主要通过 style 方法设置位置、大小以及其他属性。",paraId:5,tocIndex:3},{value:"设置 SpriteGeometry 的位置，定位是 SpriteGeometry 的中心。",paraId:6,tocIndex:4},{value:"设置精灵的纹理贴图。",paraId:7,tocIndex:5},{value:"粒子的作用半径，默认为 10。",paraId:8,tocIndex:6},{value:"\n🌟 单个粒子会在图层位置半径范围内随机分布。",paraId:8,tocIndex:6},{value:"粒子的运动、默认为 'down'，表示向下运动。可选值有 'down'/'up'。",paraId:9,tocIndex:7},{value:"图层生成的粒子数量，默认为 100。",paraId:10,tocIndex:8},{value:"粒子运动的高度范围，默认为 300.",paraId:11,tocIndex:9},{value:"粒子运动刷新的步长，表现为运动速度、默认为 10。",paraId:12,tocIndex:10},{value:"粒子大小缩放、默认为 1。",paraId:13,tocIndex:11}]},27865:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(47023);const d=[{value:"点图层在开启 ",paraId:0},{value:"animate",paraId:0},{value:" 方法后根据点是 ",paraId:0},{value:"2D",paraId:0},{value:" 点还是 ",paraId:0},{value:"3D",paraId:0},{value:" 点支持两种不同的动画：水波点和生长动画。\n点图层在开启 ",paraId:0},{value:"animate",paraId:0},{value:" 方法后会得到特殊的水波图形。图层由一圈圈向外扩散的圆环构成。",paraId:0},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"animate",paraId:2,tocIndex:1},{value:" 方法支持布尔值和对象传值。",paraId:2,tocIndex:1},{value:"layer.animate(true);\n\nlayer.animate({\n  enable: true,\n});\n",paraId:3,tocIndex:1},{value:"interface IAnimateOption {\n  enable: boolean;\n  speed: number;\n  rings: number;\n}\n",paraId:4,tocIndex:2},{value:"animate",paraId:5,tocIndex:4},{value:" 方法支持布尔值和对象传值。",paraId:5,tocIndex:4},{value:"animate(true)\nanimate(false)\n\nanimate(animateOptions)\n\ninterface IAnimateOptions: {\n  enable: boolean;\n  speed?: number = 0.01;\n  repeat?: number = 1;\n}\n",paraId:6,tocIndex:4},{value:"#### IAnimateOptions\n\n\n\n`animate` 方法的参数：\n\n- `enable` 是否开启动画，布尔值，默认为 `false`。\n- `speed` 生长速度，数值，默认为 `0.01`。\n- `repeat` 生长动画的播放次数，数值，默认为 `1`。\n",paraId:7,tocIndex:4}]},7233:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(80239);const d=[{value:"color",paraId:0},{value:" 方法用于设置图形的颜色。",paraId:0},{value:"color",paraId:1,tocIndex:0},{value:" 类型的字符串。",paraId:1,tocIndex:0},{value:"color 类型可以为 rgb 的写法 ",paraId:2,tocIndex:0},{value:"rgb(200, 100, 100)",paraId:2,tocIndex:0},{value:"、",paraId:2,tocIndex:0},{value:"rgba(255, 0, 0, 1)",paraId:2,tocIndex:0},{value:"color 类型可以为十六进制的写法 ",paraId:2,tocIndex:0},{value:"#ffffff",paraId:2,tocIndex:0},{value:"、",paraId:2,tocIndex:0},{value:"#000",paraId:2,tocIndex:0},{value:"color 类型可以是颜色名称的写法 ",paraId:2,tocIndex:0},{value:"red",paraId:2,tocIndex:0},{value:"、",paraId:2,tocIndex:0},{value:"yellow",paraId:2,tocIndex:0},{value:"图层可以直接设置颜色值。",paraId:3,tocIndex:1},{value:"layer.color('#f00');\n",paraId:4,tocIndex:1},{value:"图层的颜色可以根据图层接受的数据值进行映射，接受传入数据的字段作为参数。",paraId:5,tocIndex:2},{value:"layer.source([\n  {\n    lng: 120,\n    lat: 30,\n    c: '#f00',\n  },\n]);\nlayer.color('c');\n",paraId:6,tocIndex:2},{value:"color",paraId:7,tocIndex:3},{value:" 方法支持简单的值映射，将根据 ",paraId:7,tocIndex:3},{value:"field",paraId:7,tocIndex:3},{value:" 从传入图层的数据中提取的值映射到 ",paraId:7,tocIndex:3},{value:"domain",paraId:7,tocIndex:3},{value:" 值域中。",paraId:7,tocIndex:3},{value:"layer.color('type', ['#f00', '#0f0', '#00f']);\n",paraId:8,tocIndex:3},{value:"color",paraId:9,tocIndex:4},{value:" 方法支持回调函数的写法，将根据 ",paraId:9,tocIndex:4},{value:"field",paraId:9,tocIndex:4},{value:" 作为 ",paraId:9,tocIndex:4},{value:"callback",paraId:9,tocIndex:4},{value:" 方法的参数，",paraId:9,tocIndex:4},{value:"callback",paraId:9,tocIndex:4},{value:" 方法的返回值作为图层实际的颜色。",paraId:9,tocIndex:4},{value:"layer.color('type', (value) => {\n  switch (value) {\n    case 'water':\n      return '#f00';\n    case 'wood':\n      return '#0f0';\n  }\n});\n",paraId:10,tocIndex:4}]},81625:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(40385);const d=[{value:" ",paraId:0,tocIndex:0},{value:"string",paraId:0,tocIndex:0},{value:" ",paraId:0,tocIndex:0},{value:"optional",paraId:0,tocIndex:0},{value:" ",paraId:0,tocIndex:0},{value:"default:",paraId:0,tocIndex:0},{value:" 自动数字编号",paraId:0,tocIndex:0},{value:"设置图层名称,可根据 name 获取 layer",paraId:1,tocIndex:0},{value:"scene.getLayerByName(name);\n",paraId:2,tocIndex:0},{value:" ",paraId:3,tocIndex:1},{value:"bool",paraId:3,tocIndex:1},{value:" ",paraId:3,tocIndex:1},{value:"optional",paraId:3,tocIndex:1},{value:" ",paraId:3,tocIndex:1},{value:"default:",paraId:3,tocIndex:1},{value:" true",paraId:3,tocIndex:1},{value:"图层是否可见",paraId:4,tocIndex:1},{value:" ",paraId:5,tocIndex:2},{value:"int",paraId:5,tocIndex:2},{value:" ",paraId:5,tocIndex:2},{value:"optional",paraId:5,tocIndex:2},{value:" ",paraId:5,tocIndex:2},{value:"default:",paraId:5,tocIndex:2},{value:" 0",paraId:5,tocIndex:2},{value:"图层绘制顺序，数值大绘制在上层，可以控制图层绘制的上下层级",paraId:6,tocIndex:2},{value:"L7 采用队列渲染的机制，所有的图层在内部保存在一个数组中，每一帧的渲染会将图层数组按照 zIndex 的值进行排序，然后遍历数组，将符合条件的图层渲染到场景中",paraId:7,tocIndex:2},{value:" ",paraId:8,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:" ",paraId:8,tocIndex:3},{value:"optional",paraId:8,tocIndex:3},{value:" ",paraId:8,tocIndex:3},{value:"default:",paraId:8,tocIndex:3},{value:" Mapbox （0-24） 高德 （2-19)",paraId:8,tocIndex:3},{value:"图层显示最小缩放等级",paraId:9,tocIndex:3},{value:" ",paraId:10,tocIndex:4},{value:"number",paraId:10,tocIndex:4},{value:" ",paraId:10,tocIndex:4},{value:"optional",paraId:10,tocIndex:4},{value:" ",paraId:10,tocIndex:4},{value:"default:",paraId:10,tocIndex:4},{value:" Mapbox （0-24） 高德 （2-19)",paraId:10,tocIndex:4},{value:"图层显示最大缩放等级",paraId:11,tocIndex:4},{value:" ",paraId:12,tocIndex:5},{value:"bool",paraId:12,tocIndex:5},{value:" ",paraId:12,tocIndex:5},{value:"optional",paraId:12,tocIndex:5},{value:" ",paraId:12,tocIndex:5},{value:"default:",paraId:12,tocIndex:5},{value:" false",paraId:12,tocIndex:5},{value:"layer 初始化完成之后，地图是否自动缩放到图层范围",paraId:13,tocIndex:5},{value:" ",paraId:14,tocIndex:6},{value:"bool",paraId:14,tocIndex:6},{value:" ",paraId:14,tocIndex:6},{value:"optional",paraId:14,tocIndex:6},{value:" ",paraId:14,tocIndex:6},{value:"default:",paraId:14,tocIndex:6},{value:" 0",paraId:14,tocIndex:6},{value:"图层拾取缓存机制，如 1px 宽度的线鼠标很难拾取(点击)到, 通过设置该参数可扩大拾取的范围（放大图层对象的尺寸）",paraId:15,tocIndex:6},{value:" ",paraId:16,tocIndex:7},{value:"string",paraId:16,tocIndex:7},{value:" ",paraId:16,tocIndex:7},{value:"optional",paraId:16,tocIndex:7},{value:" ",paraId:16,tocIndex:7},{value:"default:",paraId:16,tocIndex:7},{value:" 'normal'",paraId:16,tocIndex:7},{value:"图层元素混合效果",paraId:17,tocIndex:7},{value:"normal 正常效果 默认 发生遮挡的时候，只会显示前面的图层的颜色",paraId:18,tocIndex:7},{value:"additive 叠加模式 发生遮挡的时候，显示前后图层颜色的叠加",paraId:18,tocIndex:7},{value:"subtractive 相减模式 发生遮挡的时候，显示前后图层颜色的相减",paraId:18,tocIndex:7},{value:"max 最大值 发生遮挡的时候，显示图层颜色 rgb 的最大值",paraId:18,tocIndex:7},{value:" ",paraId:19,tocIndex:8},{value:"boolean",paraId:19,tocIndex:8},{value:" ",paraId:19,tocIndex:8},{value:"optional",paraId:19,tocIndex:8},{value:" ",paraId:19,tocIndex:8},{value:"default:",paraId:19,tocIndex:8},{value:" 'false'",paraId:19,tocIndex:8},{value:"\n图层事件，默认只响应最上层图层，设置为true 将允许事件透传",paraId:19,tocIndex:8},{value:"⚠️ mask、maskfence 不推荐使用，一下配置 2.14.x 之后版本生效",paraId:20,tocIndex:8},{value:"模板图层：用做模板的图层，PointLayer、LineLayer、PolygonLayer 都可以作为模板\n掩模图层：被模板切割的图层",paraId:21,tocIndex:8},{value:"掩模图层生效",paraId:22,tocIndex:9},{value:" ",paraId:23,tocIndex:9},{value:"array Layer",paraId:23,tocIndex:9},{value:" ",paraId:23,tocIndex:9},{value:"optional",paraId:23,tocIndex:9},{value:" ",paraId:23,tocIndex:9},{value:"default:",paraId:23,tocIndex:9},{value:" []",paraId:23,tocIndex:9},{value:"掩模图层生效",paraId:24,tocIndex:10},{value:"是否开启掩模，默认开启 maskLayers 不为空时生效",paraId:25,tocIndex:10},{value:" ",paraId:26,tocIndex:10},{value:"bool",paraId:26,tocIndex:10},{value:" ",paraId:26,tocIndex:10},{value:"optional",paraId:26,tocIndex:10},{value:" ",paraId:26,tocIndex:10},{value:"default:",paraId:26,tocIndex:10},{value:" true",paraId:26,tocIndex:10},{value:"掩模图层生效\n",paraId:27,tocIndex:11},{value:" ",paraId:28,tocIndex:11},{value:"boolean",paraId:28,tocIndex:11},{value:" ",paraId:28,tocIndex:11},{value:"optional",paraId:28,tocIndex:11},{value:" ",paraId:28,tocIndex:11},{value:"default:",paraId:28,tocIndex:11},{value:" true",paraId:28,tocIndex:11},{value:"用来描述当前图层的内容与掩模边界显示。",paraId:29,tocIndex:11},{value:"true",paraId:30,tocIndex:11},{value:" 在掩模内部显示",paraId:30,tocIndex:11},{value:"false",paraId:30,tocIndex:11},{value:" 在掩模外部显示",paraId:30,tocIndex:11},{value:"模板图层生效\n",paraId:31,tocIndex:12},{value:" ",paraId:31,tocIndex:12},{value:"枚举",paraId:31,tocIndex:12},{value:" ",paraId:31,tocIndex:12},{value:"optional",paraId:31,tocIndex:12},{value:" ",paraId:31,tocIndex:12},{value:"default:",paraId:31,tocIndex:12},{value:" and",paraId:31,tocIndex:12},{value:"\nmaskLayers 为多个时失效，需要在模板图层设置",paraId:31,tocIndex:12},{value:"or 交集",paraId:32,tocIndex:12},{value:"and 并集",paraId:32,tocIndex:12},{value:"使用示例",paraId:33,tocIndex:12},{value:"const polygonLayer = new Polygon();\nconst rasterLayer = new Raster({\n  // 栅格图层使用polygon 掩模\n  maskLayers: [polygonLayer],\n  enableMask: true,\n  maskInside: true,\n});\n",paraId:34,tocIndex:12}]},68534:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(63618);const d=[{value:"点图层一组经纬度数据来描述一系列点在地图上的位置，这些点可以是普通的圆点，也可以是文字、图标、柱子等。",paraId:0,tocIndex:0},{value:"\n用户可以通过配置 ",paraId:0,tocIndex:0},{value:"shape",paraId:0,tocIndex:0},{value:" 参数来选择点的类型，同时通过 ",paraId:0,tocIndex:0},{value:"style",paraId:0,tocIndex:0},{value:"、",paraId:0,tocIndex:0},{value:"size",paraId:0,tocIndex:0},{value:"、",paraId:0,tocIndex:0},{value:"color",paraId:0,tocIndex:0},{value:" 方法调整点的样式。",paraId:0,tocIndex:0},{value:"import { PointLayer } from '@antv/l7';\n\nconst layer = PointLayer({\n  zIndex: 2,\n})\n  .source(data.list, {\n    type: 'array',\n    x: 'j',\n    y: 'w',\n  })\n  .shape('cylinder')\n  .size('t', (level) => {\n    return [4, 4, level + 40];\n  })\n  .color('t', [\n    '#002466',\n    '#105CB3',\n    '#2894E0',\n    '#CFF6FF',\n    '#FFF5B8',\n    '#FFAB5C',\n    '#F27049',\n    '#730D1C',\n  ]);\n",paraId:1,tocIndex:0}]},82958:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(83946);const d=[{value:"scale",paraId:0},{value:" 方法设置数据字段映射方法，用于设将地图数据值（数字、日期、类别等数据）转成视觉值（颜色、大小、形状）。尺度 Scale 是数据可视化的基本组成部分，因为它们决定了视觉编码的性质。",paraId:0},{value:"field",paraId:1,tocIndex:0},{value:" 指定 source 中传入的数据中用于映射的字段名",paraId:1,tocIndex:0},{value:"scaleConfig",paraId:1,tocIndex:0},{value:" 列定义配置，对象类型",paraId:1,tocIndex:0},{value:"interface IScaleConfig {\n  type: ScaleTypeName;\n  domain?: any[];\n  ...\n}\n\nlayer.color('id', ['#f00', '#ff0'])\n.size('mag', [1, 80])\n.scale('mag', {\n  type: 'linear',\n  domain: [ 1, 50]\n})；\n",paraId:2,tocIndex:0},{value:"scale",paraId:3,tocIndex:1},{value:" 的类型可以分为 ",paraId:3,tocIndex:1},{value:"3",paraId:3,tocIndex:1},{value:" 类 ",paraId:3,tocIndex:1},{value:"11",paraId:3,tocIndex:1},{value:" 种，不同 ",paraId:3,tocIndex:1},{value:"Scale",paraId:3,tocIndex:1},{value:" 的差异在于 ",paraId:3,tocIndex:1},{value:"domain->range",paraId:3,tocIndex:1},{value:" 的转换方法的不同。",paraId:3,tocIndex:1},{value:"range",paraId:3,tocIndex:1},{value:" 和 ",paraId:3,tocIndex:1},{value:"domain",paraId:3,tocIndex:1},{value:" 是 ",paraId:3,tocIndex:1},{value:"Scale",paraId:3,tocIndex:1},{value:" 中非常重要的两个参数。",paraId:3,tocIndex:1},{value:"domain: 地图数据值的定义区间",paraId:4,tocIndex:1},{value:"range：视觉值的区间定义",paraId:4,tocIndex:1},{value:"数据类型",paraId:5,tocIndex:1},{value:"度量类型",paraId:5,tocIndex:1},{value:"连续",paraId:5,tocIndex:1},{value:"linear、log、pow、time、sequential、quantize、quantile、threshold",paraId:5,tocIndex:1},{value:"分类",paraId:5,tocIndex:1},{value:"cat、time",paraId:5,tocIndex:1},{value:"常量",paraId:5,tocIndex:1},{value:"identity",paraId:5,tocIndex:1},{value:"Cat 指枚举类型，用于展示分类数据，比如农作物种植区分布图，水稻、玉米、大豆等不同类别需要映射为不同的颜色。",paraId:6,tocIndex:2},{value:"// 三种作物会分别转成对应的颜色\n// domain = ['corn','rice', 'soybean'];\n// range = ['red','white','blue'];\nconst data = [\n  { lng: 120, lat: 30, t: 'corn' },\n  { lng: 121, lat: 30, t: 'rice' },\n  { lng: 122, lat: 30, t: 'soybean' },\n];\nlayer.source(data, {\n  parser: {\n    type: 'type',\n    x: 'lng',\n    y: 'lat',\n  },\n});\nlayer.scale('t', { type: 'cat' });\nlayer.color('t', ['red', 'white', 'blue']);\n",paraId:7,tocIndex:2},{value:"常量度量 某个字段是不变的常量。",paraId:8,tocIndex:3},{value:"线性是连续数据的映射方法，数据和视觉值是通过线性方法换算的。如数据值 1-100 线性映射到红到蓝的线下渐变色每个数字对应一个颜色",paraId:9,tocIndex:4},{value:"相等间隔会将属性值的范围划分为若干个大小相等的子范围。相等间隔最适用于常见的数据范围，如百分比和温度。这种方法强调的是某个属性值相对于其他值的量",paraId:10,tocIndex:5},{value:"每个类都含有相等数量的要素。分位数分类非常适用于呈线性分布的数据。分位数为每个类分配数量相等的数据值。不存在空类，也不存在值过多或过少的类。\n由于使用“分位数”分类将要素以同等数量分组到每个类中，因此得到的地图往往具有误导性。可能会将相似的要素置于相邻的类中，或将值差异较大的要素置于相同类中。可通过增加类的数量将这种失真降至最低。",paraId:11,tocIndex:6},{value:"他允许将域的任意子集（非统一段）映射到范围内的离散值。输入域仍然是连续的，并根据提供给域属性的一组阈值划分为多个切片。 range 属性必须有 N+1 个元素，其中 N 是域中提供的阈值边界数",paraId:12,tocIndex:7},{value:"手动设置间隔 Manual interval 手动设置分级分类区间，某些数据会有相应的业界标准，或者需要进行某种特殊的显示。如空气质量数据有严格数据分段标准",paraId:13,tocIndex:7},{value:'-1   => "red"\n0    => "white"\n0.5  => "white"\n1.0  => "blue"\n1000 => "blue\n\n',paraId:14,tocIndex:7},{value:"用于返回给定的颜色数组的统一非有理 B-spline 插值器函数，该数组将转换为RGB颜色。",paraId:15,tocIndex:8},{value:"const scaleColors = d3interpolate.interpolateRgbBasis(colors);\n",paraId:16,tocIndex:8},{value:"interface IScaleConfig {\n  type: ScaleTypeName;\n  domain?: any[];\n  range?: any[];\n  neutral?: number;\n  field?: string;\n  unknown?: string;\n  ticks?: any[];\n  nice?: boolean;\n  clamp?: boolean;\n  format?: () => any;\n}\n",paraId:17,tocIndex:9}]},6429:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(27155);const d=[{value:"shape",paraId:0},{value:" 方法用于指定点图层绘制什么样的图形，如绘制三角形或者是正方形，还是文字、图标之类的。",paraId:0},{value:"点图层的贴地的几何图形，如圆形、正方形、三角形等。",paraId:1,tocIndex:0},{value:"🌟 若是使用简单的圆点图层，建议使用 ",paraId:2,tocIndex:0},{value:"simple",paraId:2,tocIndex:0},{value:" 代替 ",paraId:2,tocIndex:0},{value:"circle",paraId:2,tocIndex:0},{value:" 以获得更好的性能。",paraId:2,tocIndex:0},{value:"\n  ",paraId:3},{value:"\n    ",paraId:3},{value:"\n  ",paraId:3},{value:"// shape 支持的各种形状\ntype IFillShape =\n  | 'circle'\n  | 'square'\n  | 'hexagon'\n  | 'triangle'\n  | 'pentagon'\n  | 'octogon'\n  | 'hexagram'\n  | 'rhombus'\n  | 'vesica';\n\nlayer.shape('circle');\n",paraId:4,tocIndex:0},{value:"点的类型为垂直地图的柱子。",paraId:5,tocIndex:1},{value:"\n  ",paraId:3},{value:"\n    ",paraId:3},{value:"\n  ",paraId:3},{value:"type IColumn = 'cylinder' | 'triangleColumn' | 'hexagonColumn' | 'squareColumn';\n\nlayer.shape('cylinder');\n\nlayer.shape('triangleColumn');\n\nlayer.shape('hexagonColumn');\n\nlayer.shape('squareColumn');\n",paraId:6,tocIndex:1},{value:"simple",paraId:7,tocIndex:2},{value:" 点精灵是特殊的点图层，始终面向相机，且大小受到设备的限制。",paraId:7,tocIndex:2},{value:"layer.shape('simple');\n",paraId:8,tocIndex:2},{value:"dot",paraId:9,tocIndex:3},{value:" 点精灵是特殊的点图层，始终面向相机，且大小受到设备的限制。",paraId:9,tocIndex:3},{value:"layer.shape('dot');\n",paraId:10,tocIndex:3},{value:"绘制文字，第一个参数为数值中的字段，第二个参数固定为 ",paraId:11,tocIndex:4},{value:"text",paraId:11,tocIndex:4},{value:"。",paraId:11,tocIndex:4},{value:"const point = new PointLayer()\n  .source([{ lng: 120, lat: 30, name: 'test' }], {\n    parser: 'json',\n    x: 'lng',\n    y: 'lat',\n  })\n  .shape('test', 'text');\n",paraId:12,tocIndex:4},{value:"shape",paraId:13,tocIndex:5},{value:" 的值为 ",paraId:13,tocIndex:5},{value:"scene.addImage",paraId:13,tocIndex:5},{value:" 全局添加的图片资源的名称。",paraId:13,tocIndex:5},{value:"scene.addImage(\n  '00',\n  'https://gw.alipayobjects.com/zos/basement_prod/604b5e7f-309e-40db-b95b-4fac746c5153.svg',\n);\nscene.addImage(\n  '01',\n  'https://gw.alipayobjects.com/zos/basement_prod/30580bc9-506f-4438-8c1a-744e082054ec.svg',\n);\nscene.addImage(\n  '02',\n  'https://gw.alipayobjects.com/zos/basement_prod/7aa1f460-9f9f-499f-afdf-13424aa26bbf.svg',\n);\nconst imageLayer = new PointLayer()\n  .source(\n    [\n      {\n        longitude: 120,\n        latitude: 30,\n        name: 'name',\n      },\n    ],\n    {\n      parser: {\n        type: 'json',\n        x: 'longitude',\n        y: 'latitude',\n      },\n    },\n  )\n  .shape('name', ['00', '01', '02']) // shape 支持映射写法\n  .size(25);\nscene.addLayer(imageLayer);\n\nconst imageLayer2 = new PointLayer()\n  .source(\n    [\n      {\n        longitude: 122,\n        latitude: 30,\n        name: 'name',\n      },\n    ],\n    {\n      parser: {\n        type: 'json',\n        x: 'longitude',\n        y: 'latitude',\n      },\n    },\n  )\n  .shape('00') // shape 直接传值\n  .size(25);\nscene.addLayer(imageLayer2);\n",paraId:14,tocIndex:5},{value:"const layer = new PointLayer()\n  .source(\n    [\n      {\n        lng: 120,\n        lat: 30,\n      },\n    ],\n    {\n      parser: {\n        type: 'json',\n        x: 'lng',\n        y: 'lat',\n      },\n    },\n  )\n  .size(25)\n  .color('#f00')\n  .shape('radar')\n  .animate(true);\n",paraId:15,tocIndex:6},{value:"🌟 雷达图需要设置 ",paraId:16,tocIndex:6},{value:"animate",paraId:16,tocIndex:6},{value:" 为 ",paraId:16,tocIndex:6},{value:"true",paraId:16,tocIndex:6}]},18444:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(18476);const d=[{value:"size",paraId:0},{value:" 方法用于设置点图层图形的大小。",paraId:0},{value:"size 类型为 number 则表示 point 的半径",paraId:1,tocIndex:0},{value:"size 类型可以为 [number, number]｜[number, number, number] 表示柱子的半径和高度",paraId:1,tocIndex:0},{value:"pointLayer.size(1);\npointLayer.size([2, 10]); // 柱子半径为 2x2.高为 10\npointLayer.size([2, 4, 10]); // 柱子半径为 2x4，高为 10\n",paraId:2,tocIndex:0},{value:"点图层可以直接设置半径。图层中所有的点使用一个宽度。",paraId:3,tocIndex:1},{value:"layer.size(2);\n",paraId:4,tocIndex:1},{value:"点图层的宽度可以根据图层接受的数据值进行映射，接受传入数据的字段作为参数。",paraId:5,tocIndex:2},{value:"layer.source([\n  {\n    lng: 120,\n    lat: 30,\n    r: 2,\n  },\n]);\nlayer.size('r');\n",paraId:6,tocIndex:2},{value:"size",paraId:7,tocIndex:3},{value:" 方法支持简单的值映射，将根据 ",paraId:7,tocIndex:3},{value:"field",paraId:7,tocIndex:3},{value:" 从传入图层的数据中提取的值映射到 ",paraId:7,tocIndex:3},{value:"domain",paraId:7,tocIndex:3},{value:" 值域中。",paraId:7,tocIndex:3},{value:"layer.size('type', [1, 2, 3]);\n",paraId:8,tocIndex:3},{value:"size",paraId:9,tocIndex:4},{value:" 方法支持回调函数的写法，将根据 ",paraId:9,tocIndex:4},{value:"field",paraId:9,tocIndex:4},{value:" 作为 ",paraId:9,tocIndex:4},{value:"callback",paraId:9,tocIndex:4},{value:" 方法的参数，",paraId:9,tocIndex:4},{value:"callback",paraId:9,tocIndex:4},{value:" 方法的返回值作为点图层实际的半径。",paraId:9,tocIndex:4},{value:"layer.size('type', (value) => {\n  switch (value) {\n    case 'path':\n      return 1;\n    case 'road':\n      return 2;\n  }\n});\n",paraId:10,tocIndex:4}]},63537:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(60526);const d=[{value:"图层数据使用经纬度格式，数据源支持 JSON、GeoJSON、CSV 三种数据格式。",paraId:0},{value:"GeoJSON",paraId:1},{value:"CSV",paraId:2},{value:"JSON",paraId:3},{value:"🌟 通常每种数据都需要相应的 parser 解析数据",paraId:4},{value:"// 传入 GeoJSON 类型数据 *** L7 默认支持，不需要 parser 解析\nvar data = {\n      type: 'FeatureCollection',\n      features: [\n        {\n          type: 'Feature',\n          properties: {},\n          geometry: {\n            type: 'Polygon',\n            coordinates: [\n              [120, 30],\n              ...\n            ]\n          },\n        },\n      ],\n    };\n\nvar layer = new PointLayer()\n.source(data)\n",paraId:5,tocIndex:0},{value:"// 传入 txt 类型数据\nvar data = `from,to,value,type,lng1,lat1,lng2,lat2\n鎷夎惃,娴疯タ,6.91,move_out,91.111891,29.662557,97.342625,37.373799\n鎷夎惃,鎴愰兘,4.79,move_out,91.111891,29.662557,104.067923,30.679943\n鎷夎惃,閲嶅簡,2.41,move_out,91.111891,29.662557,106.530635,29.544606\n鎷夎惃,鍖椾含,2.05,move_out,91.111891,29.662557,116.395645,39.929986\n...`;\n\nvar layer = new PointLayer().source(data, {\n  parser: {\n    type: 'csv',\n    x: 'lng1',\n    y: 'lat1',\n  },\n});\n",paraId:6,tocIndex:1},{value:"// 传入 JSON 类型的数据\nvar data = [\n  {\n    lng: 120,\n    lat: 30\n  },\n  ...\n]\n\nvar layer = new PointLayer()\n.source(data, {\n  parser: {\n    type: 'json',\n    x: 'lng',\n    y: 'lat',\n  }\n})\n",paraId:7,tocIndex:2}]},454:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(13234);const d=[{value:"style",paraId:0},{value:" 方法用于配制图层的样式，相同图层拥有不同的 ",paraId:0},{value:"shape",paraId:0},{value:" 图形，不同 ",paraId:0},{value:"shape",paraId:0},{value:" 的图层 ",paraId:0},{value:"style",paraId:0},{value:" 方法接受不同的参数。",paraId:0},{value:"layer.style({\n  opacity: 0.5,\n});\n",paraId:1},{value:"通用 ",paraId:2,tocIndex:0},{value:"style",paraId:2,tocIndex:0},{value:" 参数，所有图形都支持的参数。",paraId:2,tocIndex:0},{value:"style",paraId:3,tocIndex:0},{value:"类型",paraId:3,tocIndex:0},{value:"描述",paraId:3,tocIndex:0},{value:"默认值",paraId:3,tocIndex:0},{value:"opacity",paraId:3,tocIndex:0},{value:"number",paraId:3,tocIndex:0},{value:"图形的透明度",paraId:3,tocIndex:0},{value:"1",paraId:3,tocIndex:0},{value:"默认样式配置为常量值，某些配置也支持数据映射，映射定义同 color、size参数一致。",paraId:4,tocIndex:1},{value:"field: 映射字段",paraId:5,tocIndex:1},{value:"value： 映射区间或者自定义回调函数",paraId:5,tocIndex:1},{value:"如：",paraId:6,tocIndex:1},{value:"layer.style({\n    opacity:{\n        field:'name'\n        value:[0.1,0.5,1],\n\n    }\n})\n",paraId:7,tocIndex:1},{value:"shape",paraId:8,tocIndex:2},{value:" 为平面图形、如三角形、正方等。",paraId:8,tocIndex:2},{value:"IFillShape",paraId:9,tocIndex:2},{value:"style",paraId:10,tocIndex:2},{value:"类型",paraId:10,tocIndex:2},{value:"是否支持数据映射",paraId:10,tocIndex:2},{value:"描述",paraId:10,tocIndex:2},{value:"默认值",paraId:10,tocIndex:2},{value:"stroke",paraId:10,tocIndex:2},{value:"string",paraId:10,tocIndex:2},{value:"是",paraId:10,tocIndex:2},{value:"图形边框颜色",paraId:10,tocIndex:2},{value:"#fff",paraId:10,tocIndex:2},{value:"strokeWidth",paraId:10,tocIndex:2},{value:"number",paraId:10,tocIndex:2},{value:"否",paraId:10,tocIndex:2},{value:"图形边框宽度",paraId:10,tocIndex:2},{value:"0",paraId:10,tocIndex:2},{value:"strokeOpacity",paraId:10,tocIndex:2},{value:"number",paraId:10,tocIndex:2},{value:"否",paraId:10,tocIndex:2},{value:"图形边框透明度",paraId:10,tocIndex:2},{value:"1",paraId:10,tocIndex:2},{value:"blur",paraId:10,tocIndex:2},{value:"number",paraId:10,tocIndex:2},{value:"否",paraId:10,tocIndex:2},{value:"图形模糊半径",paraId:10,tocIndex:2},{value:"0",paraId:10,tocIndex:2},{value:"offsets",paraId:10,tocIndex:2},{value:"[number, number]",paraId:10,tocIndex:2},{value:"是",paraId:10,tocIndex:2},{value:"点偏移",paraId:10,tocIndex:2},{value:"[0, 0]",paraId:10,tocIndex:2},{value:"rotation",paraId:10,tocIndex:2},{value:"number",paraId:10,tocIndex:2},{value:"是",paraId:10,tocIndex:2},{value:"旋转角度",paraId:10,tocIndex:2},{value:"0",paraId:10,tocIndex:2},{value:"raisingHeight",paraId:10,tocIndex:2},{value:"number",paraId:10,tocIndex:2},{value:"否",paraId:10,tocIndex:2},{value:"抬升高度",paraId:10,tocIndex:2},{value:"0",paraId:10,tocIndex:2},{value:"heightfixed",paraId:10,tocIndex:2},{value:"boolean",paraId:10,tocIndex:2},{value:"否",paraId:10,tocIndex:2},{value:"点大小单位",paraId:10,tocIndex:2},{value:"pixel",paraId:10,tocIndex:2},{value:"pixel 默认值",paraId:11,tocIndex:3},{value:"meter 单位为米",paraId:11,tocIndex:3},{value:"type IUnit = 'pixel' | 'meter';\n",paraId:12,tocIndex:3},{value:"点图层支持等面积点，点大小的单位是米，同样通过 size 方法设置大小",paraId:13,tocIndex:3},{value:"import { PointLayer } from '@antv/l7';\n\nconst layer = PointLayer().source(data).shape('circle').size(100).color('#f00').style({\n  unit: 'meter',\n});\n",paraId:14,tocIndex:3},{value:"🌟 从 v2.7.9 版本开始支持高德地图、高德地图 2.0、Mapbox 地图",paraId:15,tocIndex:3},{value:"shape",paraId:16,tocIndex:4},{value:" 为 3D 柱图。",paraId:16,tocIndex:4},{value:"IColumn",paraId:17,tocIndex:4},{value:"style",paraId:18,tocIndex:4},{value:"类型",paraId:18,tocIndex:4},{value:"描述",paraId:18,tocIndex:4},{value:"默认值",paraId:18,tocIndex:4},{value:"depth",paraId:18,tocIndex:4},{value:"boolean",paraId:18,tocIndex:4},{value:"图形是否开启深度检测",paraId:18,tocIndex:4},{value:"true",paraId:18,tocIndex:4},{value:"pickLight",paraId:18,tocIndex:4},{value:"boolean",paraId:18,tocIndex:4},{value:"拾取高亮是否计算光照",paraId:18,tocIndex:4},{value:"false",paraId:18,tocIndex:4},{value:"lightEnable",paraId:18,tocIndex:4},{value:"boolean",paraId:18,tocIndex:4},{value:"颜色是否参与光照计算",paraId:18,tocIndex:4},{value:"true",paraId:18,tocIndex:4},{value:"heightfixed",paraId:18,tocIndex:4},{value:"boolean",paraId:18,tocIndex:4},{value:"是否是固定高度",paraId:18,tocIndex:4},{value:"false",paraId:18,tocIndex:4},{value:"柱图支持配置渐变色，在配置渐变效果后会覆盖 ",paraId:19,tocIndex:5},{value:"layer.color",paraId:19,tocIndex:5},{value:" 方法设置的颜色。",paraId:19,tocIndex:5},{value:"style",paraId:20,tocIndex:5},{value:"类型",paraId:20,tocIndex:5},{value:"描述",paraId:20,tocIndex:5},{value:"默认值",paraId:20,tocIndex:5},{value:"sourceColor",paraId:20,tocIndex:5},{value:"color",paraId:20,tocIndex:5},{value:"柱子底部颜色",paraId:20,tocIndex:5},{value:"/",paraId:20,tocIndex:5},{value:"targetColor",paraId:20,tocIndex:5},{value:"color",paraId:20,tocIndex:5},{value:"柱子顶部颜色",paraId:20,tocIndex:5},{value:"/",paraId:20,tocIndex:5},{value:"opacityLinear",paraId:20,tocIndex:5},{value:"IOpcityLinear",paraId:20,tocIndex:5},{value:"柱子的透明度渐变",paraId:20,tocIndex:5},{value:"/",paraId:20,tocIndex:5},{value:"const color = `rgb(200, 100, 50)`;\nconst color2 = '#ff0';\n",paraId:21,tocIndex:6},{value:"type IDir = 'up' | 'down';\ninterface IOpcityLinear = {\n  enable: boolean;\n  dir: IDir;\n}\n",paraId:22,tocIndex:7},{value:"shape",paraId:23,tocIndex:8},{value:" 为文字。",paraId:23,tocIndex:8},{value:"text",paraId:24,tocIndex:8},{value:"style",paraId:25,tocIndex:8},{value:"类型",paraId:25,tocIndex:8},{value:"描述",paraId:25,tocIndex:8},{value:"是否支持数据映射",paraId:25,tocIndex:8},{value:"默认值",paraId:25,tocIndex:8},{value:"opacity",paraId:25,tocIndex:8},{value:"number",paraId:25,tocIndex:8},{value:"透明度",paraId:25,tocIndex:8},{value:"是",paraId:25,tocIndex:8},{value:"#fff",paraId:25,tocIndex:8},{value:"stroke",paraId:25,tocIndex:8},{value:"string",paraId:25,tocIndex:8},{value:"图形边框颜色",paraId:25,tocIndex:8},{value:"是",paraId:25,tocIndex:8},{value:"#fff",paraId:25,tocIndex:8},{value:"strokeWidth",paraId:25,tocIndex:8},{value:"number",paraId:25,tocIndex:8},{value:"图形边框颜色",paraId:25,tocIndex:8},{value:"否",paraId:25,tocIndex:8},{value:"0",paraId:25,tocIndex:8},{value:"textOffset",paraId:25,tocIndex:8},{value:"[number, number]",paraId:25,tocIndex:8},{value:"文字的偏移",paraId:25,tocIndex:8},{value:"是",paraId:25,tocIndex:8},{value:"[0, 0]",paraId:25,tocIndex:8},{value:"textAnchor",paraId:25,tocIndex:8},{value:"anchorType",paraId:26,tocIndex:8},{value:"文字对齐锚点 ",paraId:25,tocIndex:8},{value:"text",paraId:25,tocIndex:8},{value:"是",paraId:25,tocIndex:8},{value:"center",paraId:25,tocIndex:8},{value:"spacing",paraId:25,tocIndex:8},{value:"number",paraId:25,tocIndex:8},{value:"文字间隔",paraId:25,tocIndex:8},{value:"否",paraId:25,tocIndex:8},{value:"2",paraId:25,tocIndex:8},{value:"rotation",paraId:25,tocIndex:8},{value:"number",paraId:25,tocIndex:8},{value:"旋转角度",paraId:25,tocIndex:8},{value:"是",paraId:25,tocIndex:8},{value:"0",paraId:25,tocIndex:8},{value:"padding",paraId:25,tocIndex:8},{value:"number",paraId:25,tocIndex:8},{value:"文字内边框宽度",paraId:25,tocIndex:8},{value:"否",paraId:25,tocIndex:8},{value:"2",paraId:25,tocIndex:8},{value:"halo",paraId:25,tocIndex:8},{value:"number",paraId:25,tocIndex:8},{value:"文字边缘光晕宽度",paraId:25,tocIndex:8},{value:"否",paraId:25,tocIndex:8},{value:"0.5",paraId:25,tocIndex:8},{value:"gamma",paraId:25,tocIndex:8},{value:"number",paraId:25,tocIndex:8},{value:"文字的颜色参数",paraId:25,tocIndex:8},{value:"否",paraId:25,tocIndex:8},{value:"2",paraId:25,tocIndex:8},{value:"fontWeight",paraId:25,tocIndex:8},{value:"string",paraId:25,tocIndex:8},{value:"文字的大小",paraId:25,tocIndex:8},{value:"否",paraId:25,tocIndex:8},{value:"400",paraId:25,tocIndex:8},{value:"fontFamily",paraId:25,tocIndex:8},{value:"font",paraId:27,tocIndex:8},{value:"字体",paraId:25,tocIndex:8},{value:"否",paraId:25,tocIndex:8},{value:"sans-serif",paraId:25,tocIndex:8},{value:"textAllowOverlap",paraId:25,tocIndex:8},{value:"boolean",paraId:25,tocIndex:8},{value:"文字是否允许覆盖",paraId:25,tocIndex:8},{value:"否",paraId:25,tocIndex:8},{value:"false",paraId:25,tocIndex:8},{value:"raisingHeight",paraId:25,tocIndex:8},{value:"number",paraId:25,tocIndex:8},{value:"抬升高度",paraId:25,tocIndex:8},{value:"否",paraId:25,tocIndex:8},{value:"0",paraId:25,tocIndex:8},{value:"heightfixed",paraId:25,tocIndex:8},{value:"boolean",paraId:25,tocIndex:8},{value:"抬升高度是否随 ",paraId:25,tocIndex:8},{value:"zoom",paraId:25,tocIndex:8},{value:" 变化",paraId:25,tocIndex:8},{value:"否",paraId:25,tocIndex:8},{value:"false",paraId:25,tocIndex:8},{value:"文字对齐锚点",paraId:28,tocIndex:9},{value:"export enum anchorType {\n  'CENTER' = 'center',\n  'TOP' = 'top',\n  'TOP-LEFT' = 'top-left',\n  'TOP-RIGHT' = 'top-right',\n  'BOTTOM' = 'bottom',\n  'BOTTOM-LEFT' = 'bottom-left',\n  'LEFT' = 'left',\n  'RIGHT' = 'right',\n}\n",paraId:29,tocIndex:9},{value:"css fontFamily。",paraId:30,tocIndex:10},{value:"const font = 'sans-serif';\nconst font2 = 'Times New Roman';\n",paraId:31,tocIndex:10},{value:"shape",paraId:32,tocIndex:11},{value:" 为简单点图形（精灵)。",paraId:32,tocIndex:11},{value:"simple",paraId:33,tocIndex:11},{value:"style",paraId:34,tocIndex:11},{value:"类型",paraId:34,tocIndex:11},{value:"描述",paraId:34,tocIndex:11},{value:"默认值",paraId:34,tocIndex:11},{value:"stroke",paraId:34,tocIndex:11},{value:"string",paraId:34,tocIndex:11},{value:"图形边框颜色",paraId:34,tocIndex:11},{value:"#fff",paraId:34,tocIndex:11},{value:"strokeWidth",paraId:34,tocIndex:11},{value:"number",paraId:34,tocIndex:11},{value:"图形边框颜色",paraId:34,tocIndex:11},{value:"0",paraId:34,tocIndex:11},{value:"strokeOpacity",paraId:34,tocIndex:11},{value:"number",paraId:34,tocIndex:11},{value:"图形边框宽度",paraId:34,tocIndex:11},{value:"1",paraId:34,tocIndex:11},{value:"offsets",paraId:34,tocIndex:11},{value:"[number, number]",paraId:34,tocIndex:11},{value:"点偏移",paraId:34,tocIndex:11},{value:"[0, 0]",paraId:34,tocIndex:11},{value:"shape",paraId:35,tocIndex:12},{value:" 为图标类型。",paraId:35,tocIndex:12},{value:"icon",paraId:36,tocIndex:12},{value:"style",paraId:37,tocIndex:12},{value:"类型",paraId:37,tocIndex:12},{value:"描述",paraId:37,tocIndex:12},{value:"数据映射",paraId:37,tocIndex:12},{value:"默认值",paraId:37,tocIndex:12},{value:"offsets",paraId:37,tocIndex:12},{value:"[number, number]",paraId:37,tocIndex:12},{value:"点偏移",paraId:37,tocIndex:12},{value:"否",paraId:37,tocIndex:12},{value:"[0, 0]",paraId:37,tocIndex:12},{value:"raisingHeight",paraId:37,tocIndex:12},{value:"number",paraId:37,tocIndex:12},{value:"抬升高度",paraId:37,tocIndex:12},{value:"否",paraId:37,tocIndex:12},{value:"0",paraId:37,tocIndex:12},{value:"heightfixed",paraId:37,tocIndex:12},{value:"boolean",paraId:37,tocIndex:12},{value:"抬升高度是否随 ",paraId:37,tocIndex:12},{value:"zoom",paraId:37,tocIndex:12},{value:" 变化",paraId:37,tocIndex:12},{value:"否",paraId:37,tocIndex:12},{value:"false",paraId:37,tocIndex:12},{value:"rotation",paraId:37,tocIndex:12},{value:"number",paraId:37,tocIndex:12},{value:"旋转角度",paraId:37,tocIndex:12},{value:"是",paraId:37,tocIndex:12},{value:"0",paraId:37,tocIndex:12},{value:"图标的旋转角度。",paraId:38,tocIndex:13},{value:"const imageLayer = new PointLayer({ layerType: 'fillImage' })\n  .source(data)\n  .shape('wind', (wind) => {\n    if (wind === 'up') {\n      return 'arrBlue';\n    }\n    return 'arrRed';\n  })\n  .size(15)\n  .style({\n    rotation: 0,\n  });\n",paraId:39,tocIndex:13},{value:"shape",paraId:40,tocIndex:14},{value:" 为雷达图。",paraId:40,tocIndex:14},{value:"radar",paraId:41,tocIndex:14},{value:"style",paraId:42,tocIndex:14},{value:"类型",paraId:42,tocIndex:14},{value:"描述",paraId:42,tocIndex:14},{value:"默认值",paraId:42,tocIndex:14},{value:"speed",paraId:42,tocIndex:14},{value:"number",paraId:42,tocIndex:14},{value:"雷达图旋转的速度",paraId:42,tocIndex:14},{value:"1",paraId:42,tocIndex:14}]},33590:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(69493);const d=[{value:"几何体图层在 ",paraId:0},{value:"shape",paraId:0},{value:" 为 ",paraId:0},{value:"water",paraId:0},{value:" 或 ",paraId:0},{value:"ocean",paraId:0},{value:" 的时候会得到流动的水面，此时我们需要使用 ",paraId:0},{value:"animate",paraId:0},{value:" 方法开启动画。",paraId:0},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"animate",paraId:2,tocIndex:0},{value:" 方法支持布尔值和对象传值。",paraId:2,tocIndex:0},{value:"layer.animate(true);\n\nlayer.animate({\n  enable: true,\n});\n",paraId:3,tocIndex:0}]},80447:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(38636);const d=[{value:"color",paraId:0},{value:" 方法用于设置图形的颜色。",paraId:0},{value:"color",paraId:1,tocIndex:0},{value:" 类型的字符串。",paraId:1,tocIndex:0},{value:"color 类型可以为 rgb 的写法 ",paraId:2,tocIndex:0},{value:"rgb(200, 100, 100)",paraId:2,tocIndex:0},{value:"、",paraId:2,tocIndex:0},{value:"rgba(255, 0, 0, 1)",paraId:2,tocIndex:0},{value:"color 类型可以为十六进制的写法 ",paraId:2,tocIndex:0},{value:"#ffffff",paraId:2,tocIndex:0},{value:"、",paraId:2,tocIndex:0},{value:"#000",paraId:2,tocIndex:0},{value:"color 类型可以是颜色名称的写法 ",paraId:2,tocIndex:0},{value:"red",paraId:2,tocIndex:0},{value:"、",paraId:2,tocIndex:0},{value:"yellow",paraId:2,tocIndex:0},{value:"图层可以直接设置颜色值。",paraId:3,tocIndex:1},{value:"layer.color('#f00');\n",paraId:4,tocIndex:1},{value:"图层的颜色可以根据图层接受的数据值进行映射，接受传入数据的字段作为参数。",paraId:5,tocIndex:2},{value:"layer.source([\n  {\n    lng: 120,\n    lat: 30,\n    c: '#f00',\n  },\n]);\nlayer.color('c');\n",paraId:6,tocIndex:2},{value:"color",paraId:7,tocIndex:3},{value:" 方法支持简单的值映射，将根据 ",paraId:7,tocIndex:3},{value:"field",paraId:7,tocIndex:3},{value:" 从传入图层的数据中提取的值映射到 ",paraId:7,tocIndex:3},{value:"domain",paraId:7,tocIndex:3},{value:" 值域中。",paraId:7,tocIndex:3},{value:"layer.color('type', ['#f00', '#0f0', '#00f']);\n",paraId:8,tocIndex:3},{value:"color",paraId:9,tocIndex:4},{value:" 方法支持回调函数的写法，将根据 ",paraId:9,tocIndex:4},{value:"field",paraId:9,tocIndex:4},{value:" 作为 ",paraId:9,tocIndex:4},{value:"callback",paraId:9,tocIndex:4},{value:" 方法的参数，",paraId:9,tocIndex:4},{value:"callback",paraId:9,tocIndex:4},{value:" 方法的返回值作为图层实际的颜色。",paraId:9,tocIndex:4},{value:"layer.color('type', (value) => {\n  switch (value) {\n    case 'water':\n      return '#f00';\n    case 'wood':\n      return '#0f0';\n  }\n});\n",paraId:10,tocIndex:4}]},68230:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(68598);const d=[{value:" ",paraId:0,tocIndex:0},{value:"string",paraId:0,tocIndex:0},{value:" ",paraId:0,tocIndex:0},{value:"optional",paraId:0,tocIndex:0},{value:" ",paraId:0,tocIndex:0},{value:"default:",paraId:0,tocIndex:0},{value:" 自动数字编号",paraId:0,tocIndex:0},{value:"设置图层名称,可根据 name 获取 layer",paraId:1,tocIndex:0},{value:"scene.getLayerByName(name);\n",paraId:2,tocIndex:0},{value:" ",paraId:3,tocIndex:1},{value:"bool",paraId:3,tocIndex:1},{value:" ",paraId:3,tocIndex:1},{value:"optional",paraId:3,tocIndex:1},{value:" ",paraId:3,tocIndex:1},{value:"default:",paraId:3,tocIndex:1},{value:" true",paraId:3,tocIndex:1},{value:"图层是否可见",paraId:4,tocIndex:1},{value:" ",paraId:5,tocIndex:2},{value:"int",paraId:5,tocIndex:2},{value:" ",paraId:5,tocIndex:2},{value:"optional",paraId:5,tocIndex:2},{value:" ",paraId:5,tocIndex:2},{value:"default:",paraId:5,tocIndex:2},{value:" 0",paraId:5,tocIndex:2},{value:"图层绘制顺序，数值大绘制在上层，可以控制图层绘制的上下层级",paraId:6,tocIndex:2},{value:"L7 采用队列渲染的机制，所有的图层在内部保存在一个数组中，每一帧的渲染会将图层数组按照 zIndex 的值进行排序，然后遍历数组，将符合条件的图层渲染到场景中",paraId:7,tocIndex:2},{value:" ",paraId:8,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:" ",paraId:8,tocIndex:3},{value:"optional",paraId:8,tocIndex:3},{value:" ",paraId:8,tocIndex:3},{value:"default:",paraId:8,tocIndex:3},{value:" Mapbox （0-24） 高德 （2-19)",paraId:8,tocIndex:3},{value:"图层显示最小缩放等级",paraId:9,tocIndex:3},{value:" ",paraId:10,tocIndex:4},{value:"number",paraId:10,tocIndex:4},{value:" ",paraId:10,tocIndex:4},{value:"optional",paraId:10,tocIndex:4},{value:" ",paraId:10,tocIndex:4},{value:"default:",paraId:10,tocIndex:4},{value:" Mapbox （0-24） 高德 （2-19)",paraId:10,tocIndex:4},{value:"图层显示最大缩放等级",paraId:11,tocIndex:4},{value:" ",paraId:12,tocIndex:5},{value:"bool",paraId:12,tocIndex:5},{value:" ",paraId:12,tocIndex:5},{value:"optional",paraId:12,tocIndex:5},{value:" ",paraId:12,tocIndex:5},{value:"default:",paraId:12,tocIndex:5},{value:" false",paraId:12,tocIndex:5},{value:"layer 初始化完成之后，地图是否自动缩放到图层范围",paraId:13,tocIndex:5},{value:" ",paraId:14,tocIndex:6},{value:"bool",paraId:14,tocIndex:6},{value:" ",paraId:14,tocIndex:6},{value:"optional",paraId:14,tocIndex:6},{value:" ",paraId:14,tocIndex:6},{value:"default:",paraId:14,tocIndex:6},{value:" 0",paraId:14,tocIndex:6},{value:"图层拾取缓存机制，如 1px 宽度的线鼠标很难拾取(点击)到, 通过设置该参数可扩大拾取的范围（放大图层对象的尺寸）",paraId:15,tocIndex:6},{value:" ",paraId:16,tocIndex:7},{value:"string",paraId:16,tocIndex:7},{value:" ",paraId:16,tocIndex:7},{value:"optional",paraId:16,tocIndex:7},{value:" ",paraId:16,tocIndex:7},{value:"default:",paraId:16,tocIndex:7},{value:" 'normal'",paraId:16,tocIndex:7},{value:"图层元素混合效果",paraId:17,tocIndex:7},{value:"normal 正常效果 默认 发生遮挡的时候，只会显示前面的图层的颜色",paraId:18,tocIndex:7},{value:"additive 叠加模式 发生遮挡的时候，显示前后图层颜色的叠加",paraId:18,tocIndex:7},{value:"subtractive 相减模式 发生遮挡的时候，显示前后图层颜色的相减",paraId:18,tocIndex:7},{value:"max 最大值 发生遮挡的时候，显示图层颜色 rgb 的最大值",paraId:18,tocIndex:7},{value:" ",paraId:19,tocIndex:8},{value:"boolean",paraId:19,tocIndex:8},{value:" ",paraId:19,tocIndex:8},{value:"optional",paraId:19,tocIndex:8},{value:" ",paraId:19,tocIndex:8},{value:"default:",paraId:19,tocIndex:8},{value:" 'false'",paraId:19,tocIndex:8},{value:"\n图层事件，默认只响应最上层图层，设置为true 将允许事件透传",paraId:19,tocIndex:8},{value:"⚠️ mask、maskfence 不推荐使用，一下配置 2.14.x 之后版本生效",paraId:20,tocIndex:8},{value:"模板图层：用做模板的图层，PointLayer、LineLayer、PolygonLayer 都可以作为模板\n掩模图层：被模板切割的图层",paraId:21,tocIndex:8},{value:"掩模图层生效",paraId:22,tocIndex:9},{value:" ",paraId:23,tocIndex:9},{value:"array Layer",paraId:23,tocIndex:9},{value:" ",paraId:23,tocIndex:9},{value:"optional",paraId:23,tocIndex:9},{value:" ",paraId:23,tocIndex:9},{value:"default:",paraId:23,tocIndex:9},{value:" []",paraId:23,tocIndex:9},{value:"掩模图层生效",paraId:24,tocIndex:10},{value:"是否开启掩模，默认开启 maskLayers 不为空时生效",paraId:25,tocIndex:10},{value:" ",paraId:26,tocIndex:10},{value:"bool",paraId:26,tocIndex:10},{value:" ",paraId:26,tocIndex:10},{value:"optional",paraId:26,tocIndex:10},{value:" ",paraId:26,tocIndex:10},{value:"default:",paraId:26,tocIndex:10},{value:" true",paraId:26,tocIndex:10},{value:"掩模图层生效\n",paraId:27,tocIndex:11},{value:" ",paraId:28,tocIndex:11},{value:"boolean",paraId:28,tocIndex:11},{value:" ",paraId:28,tocIndex:11},{value:"optional",paraId:28,tocIndex:11},{value:" ",paraId:28,tocIndex:11},{value:"default:",paraId:28,tocIndex:11},{value:" true",paraId:28,tocIndex:11},{value:"用来描述当前图层的内容与掩模边界显示。",paraId:29,tocIndex:11},{value:"true",paraId:30,tocIndex:11},{value:" 在掩模内部显示",paraId:30,tocIndex:11},{value:"false",paraId:30,tocIndex:11},{value:" 在掩模外部显示",paraId:30,tocIndex:11},{value:"模板图层生效\n",paraId:31,tocIndex:12},{value:" ",paraId:31,tocIndex:12},{value:"枚举",paraId:31,tocIndex:12},{value:" ",paraId:31,tocIndex:12},{value:"optional",paraId:31,tocIndex:12},{value:" ",paraId:31,tocIndex:12},{value:"default:",paraId:31,tocIndex:12},{value:" and",paraId:31,tocIndex:12},{value:"\nmaskLayers 为多个时失效，需要在模板图层设置",paraId:31,tocIndex:12},{value:"or 交集",paraId:32,tocIndex:12},{value:"and 并集",paraId:32,tocIndex:12},{value:"使用示例",paraId:33,tocIndex:12},{value:"const polygonLayer = new Polygon();\nconst rasterLayer = new Raster({\n  // 栅格图层使用polygon 掩模\n  maskLayers: [polygonLayer],\n  enableMask: true,\n  maskInside: true,\n});\n",paraId:34,tocIndex:12}]},21758:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(79474);const d=[{value:"绘制 2D 多边形以及沿 Z 轴拉伸后的 3D 图形。",paraId:0,tocIndex:0},{value:"import { PolygonLayer } from '@antv/l7';\nconst layer = new PolygonLayer()\n  .source({\n    type: 'FeatureCollection',\n    features: [\n      {\n        type: 'Feature',\n        properties: {},\n        geometry: {\n          type: 'Polygon',\n          coordinates: [\n            [\n              [104.4140625, 35.460669951495305],\n              [98.7890625, 24.206889622398023],\n              [111.796875, 27.371767300523047],\n              [104.4140625, 35.460669951495305],\n            ],\n          ],\n        },\n      },\n    ],\n  })\n  .shape('fill')\n  .color('#f00')\n  .style({\n    opacity: 0.6,\n  });\n",paraId:1,tocIndex:1}]},83053:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(44134);const d=[{value:"scale",paraId:0},{value:" 方法设置数据字段映射方法，用于设将地图数据值（数字、日期、类别等数据）转成视觉值（颜色、大小、形状）。尺度 Scale 是数据可视化的基本组成部分，因为它们决定了视觉编码的性质。",paraId:0},{value:"field",paraId:1,tocIndex:0},{value:" 指定 source 中传入的数据中用于映射的字段名",paraId:1,tocIndex:0},{value:"scaleConfig",paraId:1,tocIndex:0},{value:" 列定义配置，对象类型",paraId:1,tocIndex:0},{value:"interface IScaleConfig {\n  type: ScaleTypeName;\n  domain?: any[];\n  ...\n}\n\nlayer.color('id', ['#f00', '#ff0'])\n.size('mag', [1, 80])\n.scale('mag', {\n  type: 'linear',\n  domain: [ 1, 50]\n})；\n",paraId:2,tocIndex:0},{value:"scale",paraId:3,tocIndex:1},{value:" 的类型可以分为 ",paraId:3,tocIndex:1},{value:"3",paraId:3,tocIndex:1},{value:" 类 ",paraId:3,tocIndex:1},{value:"11",paraId:3,tocIndex:1},{value:" 种，不同 ",paraId:3,tocIndex:1},{value:"Scale",paraId:3,tocIndex:1},{value:" 的差异在于 ",paraId:3,tocIndex:1},{value:"domain->range",paraId:3,tocIndex:1},{value:" 的转换方法的不同。",paraId:3,tocIndex:1},{value:"range",paraId:3,tocIndex:1},{value:" 和 ",paraId:3,tocIndex:1},{value:"domain",paraId:3,tocIndex:1},{value:" 是 ",paraId:3,tocIndex:1},{value:"Scale",paraId:3,tocIndex:1},{value:" 中非常重要的两个参数。",paraId:3,tocIndex:1},{value:"domain: 地图数据值的定义区间",paraId:4,tocIndex:1},{value:"range：视觉值的区间定义",paraId:4,tocIndex:1},{value:"数据类型",paraId:5,tocIndex:1},{value:"度量类型",paraId:5,tocIndex:1},{value:"连续",paraId:5,tocIndex:1},{value:"linear、log、pow、time、sequential、quantize、quantile、threshold",paraId:5,tocIndex:1},{value:"分类",paraId:5,tocIndex:1},{value:"cat、time",paraId:5,tocIndex:1},{value:"常量",paraId:5,tocIndex:1},{value:"identity",paraId:5,tocIndex:1},{value:"Cat 指枚举类型，用于展示分类数据，比如农作物种植区分布图，水稻、玉米、大豆等不同类别需要映射为不同的颜色。",paraId:6,tocIndex:2},{value:"// 三种作物会分别转成对应的颜色\n// domain = ['corn','rice', 'soybean'];\n// range = ['red','white','blue'];\nconst data = [\n  { lng: 120, lat: 30, t: 'corn' },\n  { lng: 121, lat: 30, t: 'rice' },\n  { lng: 122, lat: 30, t: 'soybean' },\n];\nlayer.source(data, {\n  parser: {\n    type: 'type',\n    x: 'lng',\n    y: 'lat',\n  },\n});\nlayer.scale('t', { type: 'cat' });\nlayer.color('t', ['red', 'white', 'blue']);\n",paraId:7,tocIndex:2},{value:"常量度量 某个字段是不变的常量。",paraId:8,tocIndex:3},{value:"线性是连续数据的映射方法，数据和视觉值是通过线性方法换算的。如数据值 1-100 线性映射到红到蓝的线下渐变色每个数字对应一个颜色",paraId:9,tocIndex:4},{value:"相等间隔会将属性值的范围划分为若干个大小相等的子范围。相等间隔最适用于常见的数据范围，如百分比和温度。这种方法强调的是某个属性值相对于其他值的量",paraId:10,tocIndex:5},{value:"每个类都含有相等数量的要素。分位数分类非常适用于呈线性分布的数据。分位数为每个类分配数量相等的数据值。不存在空类，也不存在值过多或过少的类。\n由于使用“分位数”分类将要素以同等数量分组到每个类中，因此得到的地图往往具有误导性。可能会将相似的要素置于相邻的类中，或将值差异较大的要素置于相同类中。可通过增加类的数量将这种失真降至最低。",paraId:11,tocIndex:6},{value:"他允许将域的任意子集（非统一段）映射到范围内的离散值。输入域仍然是连续的，并根据提供给域属性的一组阈值划分为多个切片。 range 属性必须有 N+1 个元素，其中 N 是域中提供的阈值边界数",paraId:12,tocIndex:7},{value:"手动设置间隔 Manual interval 手动设置分级分类区间，某些数据会有相应的业界标准，或者需要进行某种特殊的显示。如空气质量数据有严格数据分段标准",paraId:13,tocIndex:7},{value:'-1   => "red"\n0    => "white"\n0.5  => "white"\n1.0  => "blue"\n1000 => "blue\n\n',paraId:14,tocIndex:7},{value:"用于返回给定的颜色数组的统一非有理 B-spline 插值器函数，该数组将转换为RGB颜色。",paraId:15,tocIndex:8},{value:"const scaleColors = d3interpolate.interpolateRgbBasis(colors);\n",paraId:16,tocIndex:8},{value:"interface IScaleConfig {\n  type: ScaleTypeName;\n  domain?: any[];\n  range?: any[];\n  neutral?: number;\n  field?: string;\n  unknown?: string;\n  ticks?: any[];\n  nice?: boolean;\n  clamp?: boolean;\n  format?: () => any;\n}\n",paraId:17,tocIndex:9}]},89395:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(27600);const d=[{value:"shape",paraId:0},{value:" 方法用于指定面图层绘制图形的类型，如填充图，填充线，挤出集合体等。",paraId:0},{value:"shape",paraId:1,tocIndex:0},{value:" 为 ",paraId:1,tocIndex:0},{value:"fill",paraId:1,tocIndex:0},{value:" 几何图层用于绘制平面的几何图形。",paraId:1,tocIndex:0},{value:"layer.shape('fill');\n",paraId:2,tocIndex:0},{value:"shape",paraId:3,tocIndex:1},{value:" 为 ",paraId:3,tocIndex:1},{value:"extrude",paraId:3,tocIndex:1},{value:" 几何图层用于绘制 3D 的几何体。",paraId:3,tocIndex:1},{value:"layer.shape('extrude');\n",paraId:4,tocIndex:1},{value:"extrude 图层的升级版, 支持 extrusionBase（基础高度）数据映射",paraId:5,tocIndex:2},{value:"layer.shape('extrusion');\n",paraId:6,tocIndex:2},{value:"shape",paraId:7,tocIndex:3},{value:" 为 ",paraId:7,tocIndex:3},{value:"water",paraId:7,tocIndex:3},{value:" 几何图层用于绘制平面水体。",paraId:7,tocIndex:3},{value:"layer.shape('water');\n",paraId:8,tocIndex:3},{value:"shape",paraId:9,tocIndex:4},{value:" 为 ",paraId:9,tocIndex:4},{value:"ocean",paraId:9,tocIndex:4},{value:" 几何图层用于绘制平面海洋水体。",paraId:9,tocIndex:4},{value:"layer.shape('ocean');\n",paraId:10,tocIndex:4},{value:"shape",paraId:11,tocIndex:5},{value:" 为 ",paraId:11,tocIndex:5},{value:"line",paraId:11,tocIndex:5},{value:" 几何图层用于绘制线。",paraId:11,tocIndex:5},{value:"layer.shape('line');\n",paraId:12,tocIndex:5},{value:"shape",paraId:13,tocIndex:6},{value:" 为 ",paraId:13,tocIndex:6},{value:"point_fill",paraId:13,tocIndex:6},{value:" 几何图层用于绘制填充点。",paraId:13,tocIndex:6},{value:"layer.shape('point_fill');\n",paraId:14,tocIndex:6},{value:"shape",paraId:15,tocIndex:7},{value:" 为 ",paraId:15,tocIndex:7},{value:"point_image",paraId:15,tocIndex:7},{value:" 几何图层用于绘制点图标。",paraId:15,tocIndex:7},{value:"layer.shape('point_image');\n",paraId:16,tocIndex:7},{value:"shape",paraId:17,tocIndex:8},{value:" 为 ",paraId:17,tocIndex:8},{value:"point_extrude",paraId:17,tocIndex:8},{value:" 几何图层用于绘制柱子。",paraId:17,tocIndex:8},{value:"layer.shape('point_extrude');\n",paraId:18,tocIndex:8},{value:"shape",paraId:19,tocIndex:9},{value:" 为 ",paraId:19,tocIndex:9},{value:"text",paraId:19,tocIndex:9},{value:" 几何图层用于绘制文字。",paraId:19,tocIndex:9},{value:"layer.shape('text');\n",paraId:20,tocIndex:9}]},89249:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(48769);const d=[{value:"size",paraId:0},{value:" 方法用于设置 Polygon 的高度",paraId:0},{value:"size 类型为 number 则表示 Polygon 的高度",paraId:1,tocIndex:0},{value:"pointLayer.size(1);\n",paraId:2,tocIndex:0},{value:"面图层可以直接设置半径。图层中所有的点使用一个高度。",paraId:3,tocIndex:1},{value:"layer.size(2);\n",paraId:4,tocIndex:1},{value:"面图层的高度可以根据图层接受的数据值进行映射，接受传入数据的字段作为参数。",paraId:5,tocIndex:2},{value:"layer.source([\n  {\n    lng: 120,\n    lat: 30,\n    r: 2,\n  },\n]);\nlayer.size('r');\n",paraId:6,tocIndex:2},{value:"size",paraId:7,tocIndex:3},{value:" 方法支持简单的值映射，将根据 ",paraId:7,tocIndex:3},{value:"field",paraId:7,tocIndex:3},{value:" 从传入图层的数据中提取的值映射到 ",paraId:7,tocIndex:3},{value:"domain",paraId:7,tocIndex:3},{value:" 值域中。",paraId:7,tocIndex:3},{value:"layer.size('type', [1, 2, 3]);\n",paraId:8,tocIndex:3},{value:"size",paraId:9,tocIndex:4},{value:" 方法支持回调函数的写法，将根据 ",paraId:9,tocIndex:4},{value:"field",paraId:9,tocIndex:4},{value:" 作为 ",paraId:9,tocIndex:4},{value:"callback",paraId:9,tocIndex:4},{value:" 方法的参数，",paraId:9,tocIndex:4},{value:"callback",paraId:9,tocIndex:4},{value:" 方法的返回值作为面图层实际高度。",paraId:9,tocIndex:4},{value:"layer.size('type', (value) => {\n  switch (value) {\n    case 'path':\n      return 1;\n    case 'road':\n      return 2;\n  }\n});\n",paraId:10,tocIndex:4}]},63316:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(28205);const d=[{value:"几何体图层数据推荐使用 GeoJSON 格式的数据。",paraId:0},{value:"GeoJSON",paraId:1},{value:"// 传入 GeoJSON 类型数据 *** L7 默认支持，不需要 parser 解析\nconst data = {\n  type: 'FeatureCollection',\n  features: [\n    {\n      type: 'Feature',\n      properties: {},\n      geometry: {\n        type: 'Polygon',\n        coordinates: [\n          [\n            [104.4140625, 35.460669951495305],\n            [98.7890625, 24.206889622398023],\n            [111.796875, 27.371767300523047],\n            [104.4140625, 35.460669951495305],\n          ],\n        ],\n      },\n    },\n  ],\n};\n\nconst layer = new PolygonLayer().source(data);\n",paraId:2,tocIndex:0}]},4695:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(32233);const d=[{value:"style",paraId:0},{value:" 方法用于配制图层的样式，相同图层拥有不同的 ",paraId:0},{value:"shape",paraId:0},{value:" 图形，不同 ",paraId:0},{value:"shape",paraId:0},{value:" 的图层 ",paraId:0},{value:"style",paraId:0},{value:" 方法接受不同的参数。",paraId:0},{value:"layer.style({\n  opacity: 0.5,\n});\n",paraId:1},{value:"通用 ",paraId:2,tocIndex:0},{value:"style",paraId:2,tocIndex:0},{value:" 参数，所有图形都支持的参数。",paraId:2,tocIndex:0},{value:"style",paraId:3,tocIndex:0},{value:"类型",paraId:3,tocIndex:0},{value:"描述",paraId:3,tocIndex:0},{value:"默认值",paraId:3,tocIndex:0},{value:"opacity",paraId:3,tocIndex:0},{value:"number",paraId:3,tocIndex:0},{value:"图形的透明度",paraId:3,tocIndex:0},{value:"1",paraId:3,tocIndex:0},{value:"shape",paraId:4,tocIndex:1},{value:" 为平面填充几何体。",paraId:4,tocIndex:1},{value:"fill",paraId:5,tocIndex:1},{value:"style",paraId:6,tocIndex:1},{value:"类型",paraId:6,tocIndex:1},{value:"描述",paraId:6,tocIndex:1},{value:"默认值",paraId:6,tocIndex:1},{value:"raisingHeight",paraId:6,tocIndex:1},{value:"number",paraId:6,tocIndex:1},{value:"抬升高度",paraId:6,tocIndex:1},{value:"0",paraId:6,tocIndex:1},{value:"opacityLinear",paraId:6,tocIndex:1},{value:"IOpacityLinear",paraId:6,tocIndex:1},{value:"透明渐变",paraId:6,tocIndex:1},{value:"/",paraId:6,tocIndex:1},{value:"type IDir = 'in' | 'out';\n\ninterface IOpacityLinear {\n  enable: false;\n  dir: IDir;\n}\n",paraId:7,tocIndex:2},{value:"shape",paraId:8,tocIndex:3},{value:" 为挤出几何体。",paraId:8,tocIndex:3},{value:"extrude",paraId:9,tocIndex:3},{value:"style",paraId:10,tocIndex:3},{value:"类型",paraId:10,tocIndex:3},{value:"描述",paraId:10,tocIndex:3},{value:"默认值",paraId:10,tocIndex:3},{value:"raisingHeight",paraId:10,tocIndex:3},{value:"number",paraId:10,tocIndex:3},{value:"抬升高度",paraId:10,tocIndex:3},{value:"0",paraId:10,tocIndex:3},{value:"heightfixed",paraId:10,tocIndex:3},{value:"boolean",paraId:10,tocIndex:3},{value:"抬升高度是否随 ",paraId:10,tocIndex:3},{value:"zoom",paraId:10,tocIndex:3},{value:" 变化",paraId:10,tocIndex:3},{value:"false",paraId:10,tocIndex:3},{value:"topsurface",paraId:10,tocIndex:3},{value:"boolean",paraId:10,tocIndex:3},{value:"顶部是否显示",paraId:10,tocIndex:3},{value:"true",paraId:10,tocIndex:3},{value:"sidesurface",paraId:10,tocIndex:3},{value:"boolean",paraId:10,tocIndex:3},{value:"侧面是否显示",paraId:10,tocIndex:3},{value:"true",paraId:10,tocIndex:3},{value:"sourceColor",paraId:10,tocIndex:3},{value:"IColor",paraId:10,tocIndex:3},{value:"侧面底部颜色",paraId:10,tocIndex:3},{value:"/",paraId:10,tocIndex:3},{value:"targetColor",paraId:10,tocIndex:3},{value:"IColor",paraId:10,tocIndex:3},{value:"侧面顶部颜色",paraId:10,tocIndex:3},{value:"/",paraId:10,tocIndex:3},{value:"shape",paraId:11,tocIndex:4},{value:" 为挤出几何体。",paraId:11,tocIndex:4},{value:"extrusion",paraId:12,tocIndex:4},{value:"style",paraId:13,tocIndex:4},{value:"类型",paraId:13,tocIndex:4},{value:"描述",paraId:13,tocIndex:4},{value:"是否支持数据映射",paraId:13,tocIndex:4},{value:"默认值",paraId:13,tocIndex:4},{value:"extrusionBase",paraId:13,tocIndex:4},{value:"number",paraId:13,tocIndex:4},{value:"基础高度，单位米",paraId:13,tocIndex:4},{value:"支持",paraId:13,tocIndex:4},{value:"0",paraId:13,tocIndex:4},{value:"几何体图层支持配置渐变效果（sourceColor、targetColor），在配置渐变效果后会覆盖 ",paraId:14,tocIndex:5},{value:"layer.color",paraId:14,tocIndex:5},{value:" 方法设置的颜色。",paraId:14,tocIndex:5},{value:"shape",paraId:15,tocIndex:6},{value:" 为水体表面几何体。",paraId:15,tocIndex:6},{value:"water",paraId:16,tocIndex:6},{value:"style",paraId:17,tocIndex:6},{value:"类型",paraId:17,tocIndex:6},{value:"描述",paraId:17,tocIndex:6},{value:"默认值",paraId:17,tocIndex:6},{value:"speed",paraId:17,tocIndex:6},{value:"number",paraId:17,tocIndex:6},{value:"水波速度",paraId:17,tocIndex:6},{value:"0.5",paraId:17,tocIndex:6},{value:"waterTexture",paraId:17,tocIndex:6},{value:"string",paraId:17,tocIndex:6},{value:"水面贴图",paraId:17,tocIndex:6},{value:"0",paraId:17,tocIndex:6},{value:"waterTexture",paraId:18,tocIndex:6},{value:" 默认值为 '",paraId:18,tocIndex:6},{value:"https://gw.alipayobjects.com/mdn/rms_816329/afts/img/A*EojwT4VzSiYAAAAAAAAAAAAAARQnAQ",paraId:18,tocIndex:6},{value:"'",paraId:18,tocIndex:6},{value:"shape",paraId:19,tocIndex:7},{value:" 为海洋表面几何体。",paraId:19,tocIndex:7},{value:"ocean",paraId:20,tocIndex:7},{value:"style",paraId:21,tocIndex:7},{value:"类型",paraId:21,tocIndex:7},{value:"描述",paraId:21,tocIndex:7},{value:"默认值",paraId:21,tocIndex:7},{value:"watercolor",paraId:21,tocIndex:7},{value:"IColor",paraId:21,tocIndex:7},{value:"水面颜色",paraId:21,tocIndex:7},{value:"#6D99A8",paraId:21,tocIndex:7},{value:"watercolor2",paraId:21,tocIndex:7},{value:"IColor",paraId:21,tocIndex:7},{value:"水面颜色",paraId:21,tocIndex:7},{value:"#0F121C",paraId:21,tocIndex:7},{value:"几何体图层支持的其他 ",paraId:22,tocIndex:8},{value:"shape",paraId:22,tocIndex:8},{value:" 都有对应的图层，可以参考对应图层的样式参数。",paraId:22,tocIndex:8}]},55728:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(25694);const d=[{value:" ",paraId:0,tocIndex:0},{value:"string",paraId:0,tocIndex:0},{value:" ",paraId:0,tocIndex:0},{value:"optional",paraId:0,tocIndex:0},{value:" ",paraId:0,tocIndex:0},{value:"default:",paraId:0,tocIndex:0},{value:" 自动数字编号",paraId:0,tocIndex:0},{value:"设置图层名称,可根据 name 获取 layer",paraId:1,tocIndex:0},{value:"scene.getLayerByName(name);\n",paraId:2,tocIndex:0},{value:" ",paraId:3,tocIndex:1},{value:"bool",paraId:3,tocIndex:1},{value:" ",paraId:3,tocIndex:1},{value:"optional",paraId:3,tocIndex:1},{value:" ",paraId:3,tocIndex:1},{value:"default:",paraId:3,tocIndex:1},{value:" true",paraId:3,tocIndex:1},{value:"图层是否可见",paraId:4,tocIndex:1},{value:" ",paraId:5,tocIndex:2},{value:"int",paraId:5,tocIndex:2},{value:" ",paraId:5,tocIndex:2},{value:"optional",paraId:5,tocIndex:2},{value:" ",paraId:5,tocIndex:2},{value:"default:",paraId:5,tocIndex:2},{value:" 0",paraId:5,tocIndex:2},{value:"图层绘制顺序，数值大绘制在上层，可以控制图层绘制的上下层级",paraId:6,tocIndex:2},{value:"L7 采用队列渲染的机制，所有的图层在内部保存在一个数组中，每一帧的渲染会将图层数组按照 zIndex 的值进行排序，然后遍历数组，将符合条件的图层渲染到场景中",paraId:7,tocIndex:2},{value:" ",paraId:8,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:" ",paraId:8,tocIndex:3},{value:"optional",paraId:8,tocIndex:3},{value:" ",paraId:8,tocIndex:3},{value:"default:",paraId:8,tocIndex:3},{value:" Mapbox （0-24） 高德 （2-19)",paraId:8,tocIndex:3},{value:"图层显示最小缩放等级",paraId:9,tocIndex:3},{value:" ",paraId:10,tocIndex:4},{value:"number",paraId:10,tocIndex:4},{value:" ",paraId:10,tocIndex:4},{value:"optional",paraId:10,tocIndex:4},{value:" ",paraId:10,tocIndex:4},{value:"default:",paraId:10,tocIndex:4},{value:" Mapbox （0-24） 高德 （2-19)",paraId:10,tocIndex:4},{value:"图层显示最大缩放等级",paraId:11,tocIndex:4},{value:" ",paraId:12,tocIndex:5},{value:"bool",paraId:12,tocIndex:5},{value:" ",paraId:12,tocIndex:5},{value:"optional",paraId:12,tocIndex:5},{value:" ",paraId:12,tocIndex:5},{value:"default:",paraId:12,tocIndex:5},{value:" false",paraId:12,tocIndex:5},{value:"layer 初始化完成之后，地图是否自动缩放到图层范围",paraId:13,tocIndex:5},{value:" ",paraId:14,tocIndex:6},{value:"bool",paraId:14,tocIndex:6},{value:" ",paraId:14,tocIndex:6},{value:"optional",paraId:14,tocIndex:6},{value:" ",paraId:14,tocIndex:6},{value:"default:",paraId:14,tocIndex:6},{value:" 0",paraId:14,tocIndex:6},{value:"图层拾取缓存机制，如 1px 宽度的线鼠标很难拾取(点击)到, 通过设置该参数可扩大拾取的范围（放大图层对象的尺寸）",paraId:15,tocIndex:6},{value:" ",paraId:16,tocIndex:7},{value:"string",paraId:16,tocIndex:7},{value:" ",paraId:16,tocIndex:7},{value:"optional",paraId:16,tocIndex:7},{value:" ",paraId:16,tocIndex:7},{value:"default:",paraId:16,tocIndex:7},{value:" 'normal'",paraId:16,tocIndex:7},{value:"图层元素混合效果",paraId:17,tocIndex:7},{value:"normal 正常效果 默认 发生遮挡的时候，只会显示前面的图层的颜色",paraId:18,tocIndex:7},{value:"additive 叠加模式 发生遮挡的时候，显示前后图层颜色的叠加",paraId:18,tocIndex:7},{value:"subtractive 相减模式 发生遮挡的时候，显示前后图层颜色的相减",paraId:18,tocIndex:7},{value:"max 最大值 发生遮挡的时候，显示图层颜色 rgb 的最大值",paraId:18,tocIndex:7},{value:" ",paraId:19,tocIndex:8},{value:"boolean",paraId:19,tocIndex:8},{value:" ",paraId:19,tocIndex:8},{value:"optional",paraId:19,tocIndex:8},{value:" ",paraId:19,tocIndex:8},{value:"default:",paraId:19,tocIndex:8},{value:" 'false'",paraId:19,tocIndex:8},{value:"\n图层事件，默认只响应最上层图层，设置为true 将允许事件透传",paraId:19,tocIndex:8},{value:"⚠️ mask、maskfence 不推荐使用，一下配置 2.14.x 之后版本生效",paraId:20,tocIndex:8},{value:"模板图层：用做模板的图层，PointLayer、LineLayer、PolygonLayer 都可以作为模板\n掩模图层：被模板切割的图层",paraId:21,tocIndex:8},{value:"掩模图层生效",paraId:22,tocIndex:9},{value:" ",paraId:23,tocIndex:9},{value:"array Layer",paraId:23,tocIndex:9},{value:" ",paraId:23,tocIndex:9},{value:"optional",paraId:23,tocIndex:9},{value:" ",paraId:23,tocIndex:9},{value:"default:",paraId:23,tocIndex:9},{value:" []",paraId:23,tocIndex:9},{value:"掩模图层生效",paraId:24,tocIndex:10},{value:"是否开启掩模，默认开启 maskLayers 不为空时生效",paraId:25,tocIndex:10},{value:" ",paraId:26,tocIndex:10},{value:"bool",paraId:26,tocIndex:10},{value:" ",paraId:26,tocIndex:10},{value:"optional",paraId:26,tocIndex:10},{value:" ",paraId:26,tocIndex:10},{value:"default:",paraId:26,tocIndex:10},{value:" true",paraId:26,tocIndex:10},{value:"掩模图层生效\n",paraId:27,tocIndex:11},{value:" ",paraId:28,tocIndex:11},{value:"boolean",paraId:28,tocIndex:11},{value:" ",paraId:28,tocIndex:11},{value:"optional",paraId:28,tocIndex:11},{value:" ",paraId:28,tocIndex:11},{value:"default:",paraId:28,tocIndex:11},{value:" true",paraId:28,tocIndex:11},{value:"用来描述当前图层的内容与掩模边界显示。",paraId:29,tocIndex:11},{value:"true",paraId:30,tocIndex:11},{value:" 在掩模内部显示",paraId:30,tocIndex:11},{value:"false",paraId:30,tocIndex:11},{value:" 在掩模外部显示",paraId:30,tocIndex:11},{value:"模板图层生效\n",paraId:31,tocIndex:12},{value:" ",paraId:31,tocIndex:12},{value:"枚举",paraId:31,tocIndex:12},{value:" ",paraId:31,tocIndex:12},{value:"optional",paraId:31,tocIndex:12},{value:" ",paraId:31,tocIndex:12},{value:"default:",paraId:31,tocIndex:12},{value:" and",paraId:31,tocIndex:12},{value:"\nmaskLayers 为多个时失效，需要在模板图层设置",paraId:31,tocIndex:12},{value:"or 交集",paraId:32,tocIndex:12},{value:"and 并集",paraId:32,tocIndex:12},{value:"使用示例",paraId:33,tocIndex:12},{value:"const polygonLayer = new Polygon();\nconst rasterLayer = new Raster({\n  // 栅格图层使用polygon 掩模\n  maskLayers: [polygonLayer],\n  enableMask: true,\n  maskInside: true,\n});\n",paraId:34,tocIndex:12}]},19175:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(96474);const d=[{value:"RasterLayer",paraId:0,tocIndex:0},{value:" 图层主要实现栅格数据的可视化，栅格数据主要来源是卫星遥感数据，如数字高程图，植被分布图，夜光图。",paraId:0,tocIndex:0},{value:"单波段，根据栅格数据值，映射为颜色",paraId:1,tocIndex:1},{value:"多波段，不同不波段映射为 R/G/B 三通道可视化展示",paraId:2,tocIndex:2},{value:"多波段，提供两个波段，进行归一化指数计算 ",paraId:3,tocIndex:3},{value:"(b-a)/(b+a)",paraId:3,tocIndex:3}]},17034:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(74238);const d=[{value:"单波段栅格数据渲染、根据栅格数据进行可视化着色",paraId:0,tocIndex:0},{value:"Raster data 数据栅格的可视化，栅格数据主要来源是卫星遥感数据，如数字高程图、植被分布图和夜光图。",paraId:1,tocIndex:1},{value:"data 数据",paraId:2,tocIndex:1},{value:"option 配置项\n",paraId:2,tocIndex:1},{value:"parser 数据解析参数",paraId:3,tocIndex:1},{value:"data 解析后的数据，为数组",paraId:4,tocIndex:2},{value:"type RasterDataType =\n  | Uint8Array\n  | Int8Array\n  | Uint16Array\n  | Int16Array\n  | Uint32Array\n  | Int32Array\n  | Float32Array\n  | Float64Array;\n",paraId:5,tocIndex:2},{value:"以 geotiff 为例需要先将数据解析出来，作为 data 输入给 source",paraId:6,tocIndex:2},{value:"import * as GeoTIFF from 'geotiff';\n\nasync function getTiffData() {\n  async function getTiffData() {\n    const response = await fetch(\n      'https://gw.alipayobjects.com/zos/antvdemo/assets/light_clip/lightF182013.tiff',\n    );\n    const arrayBuffer = await response.arrayBuffer();\n    const tiff = await GeoTIFF.fromArrayBuffer(arrayBuffer);\n    const image = await tiff.getImage();\n    const width = image.getWidth();\n    const height = image.getHeight();\n    const values = await image.readRasters();\n    return {\n      data: values[0],\n      width,\n      height,\n    };\n  }\n}\nconst tiffdata = await getTiffData();\nlayer.source(tiffdata.data, {\n  parser: {\n    type: 'raster',\n    width: tiffdata.width,\n    height: tiffdata.height,\n    extent: [73.4821902409999979, 3.8150178409999995, 135.1066187319999869, 57.6300459959999998],\n  },\n});\n",paraId:7,tocIndex:2},{value:"type: raster",paraId:8,tocIndex:3},{value:"extent: 栅格的经纬度范围 [minlng, minlat,maxLng, maxLat]",paraId:8,tocIndex:3},{value:"width 数据宽度",paraId:8,tocIndex:3},{value:"height 数据高度",paraId:8,tocIndex:3},{value:"根据栅格数据的经纬度范围，将其添加到地图上。",paraId:9,tocIndex:3},{value:"layer.source(rasterData, {\n  parser: {\n    type: 'raster',\n    extent: [121.168, 30.2828, 121.384, 30.4219],\n  },\n});\n",paraId:10,tocIndex:3},{value:"Raster ndi",paraId:11},{value:"style",paraId:12,tocIndex:5},{value:" 方法用于配制图层的样式，",paraId:12,tocIndex:5},{value:"单通道 绘制结果由是单一的数值控制，如灰度图，数值对应的颜色可以通过表示配置 ",paraId:13,tocIndex:5},{value:"rampColors",paraId:13,tocIndex:5},{value:" 色带控制。",paraId:13,tocIndex:5},{value:"layer.style({\n  opacity: 0.5,\n});\n",paraId:14,tocIndex:5},{value:"style",paraId:15,tocIndex:6},{value:"类型",paraId:15,tocIndex:6},{value:"描述",paraId:15,tocIndex:6},{value:"默认值",paraId:15,tocIndex:6},{value:"opacity",paraId:15,tocIndex:6},{value:"number",paraId:15,tocIndex:6},{value:"图形的透明度",paraId:15,tocIndex:6},{value:"1",paraId:15,tocIndex:6},{value:"clampLow",paraId:15,tocIndex:6},{value:"boolean",paraId:15,tocIndex:6},{value:"设置为 ",paraId:15,tocIndex:6},{value:"true",paraId:15,tocIndex:6},{value:"，低于 ",paraId:15,tocIndex:6},{value:"domain",paraId:15,tocIndex:6},{value:" 的数据将不显示",paraId:15,tocIndex:6},{value:"false",paraId:15,tocIndex:6},{value:"clampHigh",paraId:15,tocIndex:6},{value:"boolean",paraId:15,tocIndex:6},{value:"设置为 ",paraId:15,tocIndex:6},{value:"true",paraId:15,tocIndex:6},{value:"，高于 ",paraId:15,tocIndex:6},{value:"domain",paraId:15,tocIndex:6},{value:" 的数据将不显示",paraId:15,tocIndex:6},{value:"false",paraId:15,tocIndex:6},{value:"domain",paraId:15,tocIndex:6},{value:"[number, number]",paraId:15,tocIndex:6},{value:"数据映射区间",paraId:15,tocIndex:6},{value:"[ 0, 8000 ]",paraId:15,tocIndex:6},{value:"noDataValue",paraId:15,tocIndex:6},{value:"number",paraId:15,tocIndex:6},{value:"不会显示的值",paraId:15,tocIndex:6},{value:"-9999999",paraId:15,tocIndex:6},{value:"rampColors",paraId:15,tocIndex:6},{value:"IRampColors",paraId:15,tocIndex:6},{value:"值域映射颜色的色带",paraId:15,tocIndex:6},{value:"/",paraId:15,tocIndex:6},{value:"type 类型 支持 `linear','quantize','custom','cat'",paraId:16,tocIndex:7},{value:"colors  颜色数组",paraId:16,tocIndex:7},{value:"positions 数据分段区间，可选，quantize 不需要设置 position，position 为原始数据值",paraId:16,tocIndex:7},{value:"⚠️ 2.13 新增特性",paraId:17,tocIndex:7},{value:"枚举类型色带只支持 0 -255 的整数类型，positions 用来设置枚举",paraId:18,tocIndex:8},{value:"{\n  type:'cat',\n  colors:['#e41a1c','#377eb8','#4daf4a','#984ea3','#ff7f00'],\n  positions:[1,20,101,102,200],\n}\n",paraId:19,tocIndex:8},{value:"等间距只根据数据的区间 domain 进行均匀分段，如 domain [0,10000]，如果分 5 段，每段间距 2000。\n等间距不需要设置 positions，只需要设置colors，根据colors 的长度设置分段数",paraId:20,tocIndex:9},{value:"rampColors: {\n  type:'quantize',\n  colors: ['#f0f9e8','#bae4bc','#7bccc4','#43a2ca','#0868ac']\n}\n",paraId:21,tocIndex:9},{value:"linear 为现有连续类型的加强版，positions 支持设置源数据，不需要转换成 0-1",paraId:22,tocIndex:10},{value:"rampColors: {\n  type:'linear',\n  colors: ['#f0f9e8','#bae4bc','#7bccc4','#43a2ca','#0868ac'],\n  positions [0,200,1000,4000,8000]\n}\n\n⚠️ 兼容 2.13.0 之前版本，未设置type 时，position 值域为 0-1。\n\n\n\n",paraId:23,tocIndex:10},{value:"自定义分段色带区别等间距色带，用户自定义分段间隔。\n自定义 positions 的长度需要比 colors 的长度多1个，同时poisitions",paraId:24,tocIndex:11},{value:"rampColors: {\n  type:'custom',\n  colors: ['#f0f9e8','#bae4bc','#7bccc4','#43a2ca','#0868ac'],\n  positions: [0,200,1000,4000,8000,10000]\n}\n",paraId:25,tocIndex:11}]},81414:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(1902);const d=[{value:"Raster NDI",paraId:0,tocIndex:0},{value:" Normalized Difference Indices 归一化指数计算，提供另个波段，进行归一化计算",paraId:0,tocIndex:0},{value:"raster-ndi(Normalized Difference Indices) source 是将多波段数据进行归一化指数计算，比如计算NDVI/NDWI 等指数，",paraId:1,tocIndex:1},{value:"data 数据",paraId:2,tocIndex:1},{value:"option 配置项\n",paraId:2,tocIndex:1},{value:"parser 数据解析参数\n",paraId:3,tocIndex:1},{value:"type 解析类型 ",paraId:4,tocIndex:1},{value:"ndi",paraId:4,tocIndex:1},{value:"layer.source(bandsValues, {\n  parser: {\n    type: 'ndi',\n    width: bandsValues.width,\n    height: bandsValues.height,\n    bands: [4, 3], // 从零开始\n    extent: [130.39565357746957, 46.905730725742366, 130.73364094187343, 47.10217234153133],\n  },\n});\n",paraId:5,tocIndex:1},{value:"type RasterDataType =\n  | Uint8Array\n  | Int8Array\n  | Uint16Array\n  | Int16Array\n  | Uint32Array\n  | Int32Array\n  | Float32Array\n  | Float64Array;\n",paraId:6,tocIndex:2},{value:"data 为数组类型 ",paraId:7,tocIndex:2},{value:"RasterDataType[]",paraId:7,tocIndex:2},{value:"如果是多波段 Tiff 可以直接使用geotiff,js 读取所有波段，",paraId:8,tocIndex:2},{value:"如果是单文件单波段数据，需要单独读取并合并成一个数据。",paraId:8,tocIndex:2},{value:"单文件多波段读取示例",paraId:9,tocIndex:2},{value:"async function getTiffData(url: string) {\n  const response = await fetch(url);\n  const arrayBuffer = await response.arrayBuffer();\n  const tiff = await GeoTIFF.fromArrayBuffer(arrayBuffer);\n  const image1 = await tiff.getImage();\n  const bandsValues = await image1.readRasters();\n  return bandsValues;\n}\n",paraId:10,tocIndex:2},{value:"type 解析类型 'rgb' ",paraId:11,tocIndex:3},{value:"必选",paraId:11,tocIndex:3},{value:"bands ",paraId:12,tocIndex:3},{value:"[number,number] 指定需要归一化的波段,data 数组长度需要大于等于 2  ",paraId:12,tocIndex:3},{value:"必选`",paraId:12,tocIndex:3},{value:"注：bands 序号从零开始（landsat 8 里的 5，4, 波段这样要设置为 4,3）",paraId:13,tocIndex:3},{value:"width 长度 ",paraId:14,tocIndex:3},{value:"必选",paraId:14,tocIndex:3},{value:"height 宽度 ",paraId:15,tocIndex:3},{value:"必选",paraId:15,tocIndex:3},{value:"Raster ndi",paraId:16},{value:"style",paraId:17,tocIndex:5},{value:" 方法用于配制图层的样式，",paraId:17,tocIndex:5},{value:"单通道 绘制结果由是单一的数值控制，如灰度图，数值对应的颜色可以通过表示配置 ",paraId:18,tocIndex:5},{value:"rampColors",paraId:18,tocIndex:5},{value:" 色带控制。",paraId:18,tocIndex:5},{value:"layer.style({\n  opacity: 0.5,\n});\n",paraId:19,tocIndex:5},{value:"style",paraId:20,tocIndex:6},{value:"类型",paraId:20,tocIndex:6},{value:"描述",paraId:20,tocIndex:6},{value:"默认值",paraId:20,tocIndex:6},{value:"opacity",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"图形的透明度",paraId:20,tocIndex:6},{value:"1",paraId:20,tocIndex:6},{value:"clampLow",paraId:20,tocIndex:6},{value:"boolean",paraId:20,tocIndex:6},{value:"设置为 ",paraId:20,tocIndex:6},{value:"true",paraId:20,tocIndex:6},{value:"，低于 ",paraId:20,tocIndex:6},{value:"domain",paraId:20,tocIndex:6},{value:" 的数据将不显示",paraId:20,tocIndex:6},{value:"false",paraId:20,tocIndex:6},{value:"clampHigh",paraId:20,tocIndex:6},{value:"boolean",paraId:20,tocIndex:6},{value:"设置为 ",paraId:20,tocIndex:6},{value:"true",paraId:20,tocIndex:6},{value:"，高于 ",paraId:20,tocIndex:6},{value:"domain",paraId:20,tocIndex:6},{value:" 的数据将不显示",paraId:20,tocIndex:6},{value:"false",paraId:20,tocIndex:6},{value:"domain",paraId:20,tocIndex:6},{value:"[number, number]",paraId:20,tocIndex:6},{value:"数据映射区间",paraId:20,tocIndex:6},{value:"[ 0, 8000 ]",paraId:20,tocIndex:6},{value:"noDataValue",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"不会显示的值",paraId:20,tocIndex:6},{value:"-9999999",paraId:20,tocIndex:6},{value:"rampColors",paraId:20,tocIndex:6},{value:"IRampColors",paraId:20,tocIndex:6},{value:"值域映射颜色的色带",paraId:20,tocIndex:6},{value:"/",paraId:20,tocIndex:6},{value:"type 类型 支持 `linear','quantize','custom','cat'",paraId:21,tocIndex:7},{value:"colors  颜色数组",paraId:21,tocIndex:7},{value:"positions 数据分段区间，可选，quantize 不需要设置 position，position 为原始数据值",paraId:21,tocIndex:7},{value:"⚠️ 2.13 新增特性",paraId:22,tocIndex:7},{value:"枚举类型色带只支持 0 -255 的整数类型，positions 用来设置枚举",paraId:23,tocIndex:8},{value:"{\n  type:'cat',\n  colors:['#e41a1c','#377eb8','#4daf4a','#984ea3','#ff7f00'],\n  positions:[1,20,101,102,200],\n}\n",paraId:24,tocIndex:8},{value:"等间距只根据数据的区间 domain 进行均匀分段，如 domain [0,10000]，如果分 5 段，每段间距 2000。\n等间距不需要设置 positions，只需要设置colors，根据colors 的长度设置分段数",paraId:25,tocIndex:9},{value:"rampColors: {\n  type:'quantize',\n  colors: ['#f0f9e8','#bae4bc','#7bccc4','#43a2ca','#0868ac']\n}\n",paraId:26,tocIndex:9},{value:"linear 为现有连续类型的加强版，positions 支持设置源数据，不需要转换成 0-1",paraId:27,tocIndex:10},{value:"rampColors: {\n  type:'linear',\n  colors: ['#f0f9e8','#bae4bc','#7bccc4','#43a2ca','#0868ac'],\n  positions [0,200,1000,4000,8000]\n}\n\n⚠️ 兼容 2.13.0 之前版本，未设置type 时，position 值域为 0-1。\n\n\n\n",paraId:28,tocIndex:10},{value:"自定义分段色带区别等间距色带，用户自定义分段间隔。\n自定义 positions 的长度需要比 colors 的长度多1个，同时poisitions",paraId:29,tocIndex:11},{value:"rampColors: {\n  type:'custom',\n  colors: ['#f0f9e8','#bae4bc','#7bccc4','#43a2ca','#0868ac'],\n  positions: [0,200,1000,4000,8000,10000]\n}\n",paraId:30,tocIndex:11}]},87794:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(5119);const d=[{value:"Raster RGB ",paraId:0,tocIndex:0},{value:" 波段组合可视化，不同波段映射到 R/G/B 通道可视化",paraId:0,tocIndex:0},{value:"raster-rgb source 是将多波段数据合成 RGB数据进行展示，如对 LandSat8 数据我们可以按照 5,4,3 或者 4,3,2 波段进行RGB组合显示",paraId:1,tocIndex:1},{value:"data 数据",paraId:2,tocIndex:1},{value:"option 配置项\n",paraId:2,tocIndex:1},{value:"parser 数据解析参数\n",paraId:3,tocIndex:1},{value:"type 解析类型 ",paraId:4,tocIndex:1},{value:"rgb",paraId:4,tocIndex:1},{value:"layer.source(bandsValues, {\n  parser: {\n    type: 'rgb',\n    width: bandsValues.width,\n    height: bandsValues.height,\n    bands: [4, 3, 2], // 从零开始\n    extent: [130.39565357746957, 46.905730725742366, 130.73364094187343, 47.10217234153133],\n  },\n});\n",paraId:5,tocIndex:1},{value:"type RasterDataType =\n  | Uint8Array\n  | Int8Array\n  | Uint16Array\n  | Int16Array\n  | Uint32Array\n  | Int32Array\n  | Float32Array\n  | Float64Array;\n",paraId:6,tocIndex:2},{value:"data 为数组类型 ",paraId:7,tocIndex:2},{value:"RasterDataType[]",paraId:7,tocIndex:2},{value:"如果是多波段 Tiff 可以直接使用geotiff,js 读取所有波段，",paraId:8,tocIndex:2},{value:"如果是单文件单波段数据，需要单独读取并合并成一个数据。",paraId:8,tocIndex:2},{value:"单文件多波段读取示例",paraId:9,tocIndex:2},{value:"async function getTiffData(url: string) {\n  const response = await fetch(url);\n  const arrayBuffer = await response.arrayBuffer();\n  const tiff = await GeoTIFF.fromArrayBuffer(arrayBuffer);\n  const image1 = await tiff.getImage();\n  const bandsValues = await image1.readRasters();\n  return bandsValues;\n}\n",paraId:10,tocIndex:2},{value:"type 解析类型 'rgb' ",paraId:11,tocIndex:3},{value:"必选",paraId:11,tocIndex:3},{value:"bands ",paraId:12,tocIndex:3},{value:"[number,number,number] 指定 R/G/B 通道对应的数据索引,data 数组长度需要大于等于 3  ",paraId:12,tocIndex:3},{value:"必选`",paraId:12,tocIndex:3},{value:"注：bands 序号从零开始（landsat 8 里的 5，4,3 波段这样要设置为 4,3, 2）",paraId:13,tocIndex:3},{value:"width 长度 ",paraId:14,tocIndex:3},{value:"必选",paraId:14,tocIndex:3},{value:"height 宽度 ",paraId:15,tocIndex:3},{value:"必选",paraId:15,tocIndex:3},{value:"countCut 颜色拉伸参数 ",paraId:16,tocIndex:3},{value:"[number,number]",paraId:16,tocIndex:3},{value:" 数值为百分比，默认值 ",paraId:16,tocIndex:3},{value:"[2,98]",paraId:16,tocIndex:3},{value:" ",paraId:16,tocIndex:3},{value:"可选",paraId:16,tocIndex:3},{value:"Raster RGB",paraId:17},{value:"layer.style({\n  opacity: 0.5,\n});\n",paraId:18,tocIndex:6}]},60081:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(92053);const d=[{value:"LarkMap 为 L7 react 地图组件库提供地图容器组件，相关地图组件与 Hooks 需放到容器组件内部才能使用，容器组件可通过属性配置不同的地图，支持 Mapbox、Gaode、Baidu、Tencent 及 L7Map 作为底图，其中 Baidu 和 Tencent 仍为实验特性。",paraId:0,tocIndex:0},{value:"import type { LarkMapProps } from '@antv/larkmap';\nimport { LarkMap } from '@antv/larkmap';\nimport React from 'react';\n\nconst config: LarkMapProps = {\n  mapType: 'Gaode',\n  mapOptions: {\n    style: 'light',\n    center: [120.210792, 30.246026],\n    zoom: 9,\n    // token: '你申请的 Key',\n  },\n};\n\nexport default () => (\n  <LarkMap {...config} style={{ height: '300px' }}>\n    <h2 style={{ position: 'absolute', left: '10px' }}>LarkMap</h2>\n  </LarkMap>\n);\n",paraId:1,tocIndex:0},{value:"L7 React 组件库",paraId:2,tocIndex:0}]},90586:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(39156);const d=[{value:"场景对象 ",paraId:0,tocIndex:0},{value:"scene",paraId:0,tocIndex:0},{value:" 是包含地图、地图控件、组件、加载资源的全局对象，通过 ",paraId:0,tocIndex:0},{value:"scene",paraId:0,tocIndex:0},{value:" 场景对象，我们可以获取到操作地图需要的所有内容。",paraId:0,tocIndex:0},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:" ",paraId:2,tocIndex:2},{value:"string | HTMLElement",paraId:2,tocIndex:2},{value:" ",paraId:2,tocIndex:2},{value:"必选",paraId:2,tocIndex:2},{value:" ",paraId:2,tocIndex:2},{value:"需传入 dom 容器或者容器 id。",paraId:3,tocIndex:2},{value:" MapInstance ",paraId:4,tocIndex:3},{value:"必选",paraId:4,tocIndex:3},{value:" ",paraId:4,tocIndex:3},{value:"可以通过 scene map 属性获取 map 实例。",paraId:5,tocIndex:3},{value:"const map = scene.map;\n",paraId:6,tocIndex:3},{value:"为了统一不同底图之前的接口差异 ",paraId:7,tocIndex:3},{value:"L7",paraId:7,tocIndex:3},{value:" 在 ",paraId:7,tocIndex:3},{value:"Scene",paraId:7,tocIndex:3},{value:" 层对 ",paraId:7,tocIndex:3},{value:"map",paraId:7,tocIndex:3},{value:" 的方法做了统一，因此一些地图的操作方法可以通过 ",paraId:7,tocIndex:3},{value:"Scene",paraId:7,tocIndex:3},{value:" 调用，这样，切换不同底图时可以保证表现一致。",paraId:7,tocIndex:3},{value:"示例代码",paraId:8,tocIndex:3},{value:"const scene = new L7.Scene({\n  id: 'map',\n  map: new L7.GaodeMap({\n    style: 'dark',\n    center: [110.770672, 34.159869],\n    pitch: 45,\n  }),\n});\n",paraId:9,tocIndex:3},{value:" ",paraId:10,tocIndex:4},{value:"bottomleft",paraId:10,tocIndex:4},{value:" ",paraId:10,tocIndex:4},{value:"可选",paraId:10,tocIndex:4},{value:" ",paraId:10,tocIndex:4},{value:"L7",paraId:11,tocIndex:4},{value:" 默认提供的 ",paraId:11,tocIndex:4},{value:"Logo",paraId:11,tocIndex:4},{value:" 可以配置显示位置，默认在左下角。",paraId:11,tocIndex:4},{value:"bottomright",paraId:12,tocIndex:4},{value:"topright",paraId:12,tocIndex:4},{value:"bottomleft",paraId:12,tocIndex:4},{value:"topleft",paraId:12,tocIndex:4},{value:"topcenter",paraId:12,tocIndex:4},{value:"bottomcenter",paraId:12,tocIndex:4},{value:"leftcenter",paraId:12,tocIndex:4},{value:"rightcenter",paraId:12,tocIndex:4},{value:" ",paraId:13,tocIndex:5},{value:"bottomleft",paraId:13,tocIndex:5},{value:" ",paraId:13,tocIndex:5},{value:"可选",paraId:13,tocIndex:5},{value:" ",paraId:13,tocIndex:5},{value:"default: true",paraId:13,tocIndex:5},{value:" ",paraId:13,tocIndex:5},{value:"配置 ",paraId:14,tocIndex:5},{value:"L7",paraId:14,tocIndex:5},{value:" 的 ",paraId:14,tocIndex:5},{value:"Logo",paraId:14,tocIndex:5},{value:" 是否显示，默认显示。",paraId:14,tocIndex:5},{value:" ",paraId:15,tocIndex:6},{value:"boolean",paraId:15,tocIndex:6},{value:" ",paraId:15,tocIndex:6},{value:"可选",paraId:15,tocIndex:6},{value:" ",paraId:15,tocIndex:6},{value:"default: true",paraId:15,tocIndex:6},{value:" ",paraId:15,tocIndex:6},{value:"是否开始前抗锯齿。",paraId:16,tocIndex:6},{value:" ",paraId:17,tocIndex:7},{value:"boolean",paraId:17,tocIndex:7},{value:" ",paraId:17,tocIndex:7},{value:"可选",paraId:17,tocIndex:7},{value:" ",paraId:17,tocIndex:7},{value:"default: false",paraId:17,tocIndex:7},{value:" ",paraId:17,tocIndex:7},{value:"是否开始开启裁剪。",paraId:18,tocIndex:7},{value:"🌟 从 v2.7.2 版本开始支持， 图层 ",paraId:19,tocIndex:7},{value:"Mask",paraId:19,tocIndex:7},{value:" 掩模能力以及矢量瓦片需要开始该配置。",paraId:19,tocIndex:7},{value:" ",paraId:20,tocIndex:8},{value:"boolean",paraId:20,tocIndex:8},{value:" ",paraId:20,tocIndex:8},{value:"可选",paraId:20,tocIndex:8},{value:" ",paraId:20,tocIndex:8},{value:"default: false",paraId:20,tocIndex:8},{value:" ",paraId:20,tocIndex:8},{value:"是否保留缓冲区数据 ",paraId:21,tocIndex:8},{value:"boolean",paraId:21,tocIndex:8},{value:" ",paraId:21,tocIndex:8},{value:"false",paraId:21,tocIndex:8},{value:"。",paraId:21,tocIndex:8},{value:"把图层添加到 ",paraId:22,tocIndex:10},{value:"Scene",paraId:22,tocIndex:10},{value:" 场景中。",paraId:22,tocIndex:10},{value:"参数 :",paraId:23,tocIndex:10},{value:"layer",paraId:24,tocIndex:10},{value:" 图层对象",paraId:24,tocIndex:10},{value:"scene.addLayer(layer);\n",paraId:25,tocIndex:10},{value:"获取对应的图层。",paraId:26,tocIndex:11},{value:"scene.getLayer('layerID');\n",paraId:27,tocIndex:11},{value:"获取所有的地图图层。",paraId:28,tocIndex:12},{value:"scene.getLayers();\n",paraId:29,tocIndex:12},{value:"根据图层名称获取图层。",paraId:30,tocIndex:13},{value:"name",paraId:31,tocIndex:13},{value:" 图层在初始化的时候配置图层的 ",paraId:31,tocIndex:13},{value:"name",paraId:31,tocIndex:13},{value:"。",paraId:31,tocIndex:13},{value:"scene.getLayerByName(name);\n",paraId:32,tocIndex:13},{value:"移除 ",paraId:33,tocIndex:14},{value:"layer",paraId:33,tocIndex:14},{value:" 图层。",paraId:33,tocIndex:14},{value:"scene.removeLayer(layer);\n",paraId:34,tocIndex:14},{value:"🌟 移除的同时会将图层进行销毁。",paraId:35,tocIndex:14},{value:"移除所有的图层对象。",paraId:36,tocIndex:15},{value:"scene.removeAllLayer();\n",paraId:37,tocIndex:15},{value:"🌟 移除的同时会将图层进行销毁。",paraId:38,tocIndex:15},{value:"添加组件控件。",paraId:39,tocIndex:17},{value:"crl",paraId:40,tocIndex:17},{value:" 用户创建的控件对象。",paraId:40,tocIndex:17},{value:"scene.addControl(ctl);\n",paraId:41,tocIndex:17},{value:"移除用户添加的组件控件。",paraId:42,tocIndex:18},{value:"ctl",paraId:43,tocIndex:18},{value:" 用户创建的控件对象。",paraId:43,tocIndex:18},{value:"scene.removeControl(ctl);\n",paraId:44,tocIndex:18},{value:"根据控件的名称来获取控件。",paraId:45,tocIndex:19},{value:"const zoomControl = new Zoom({\n  // zoom 控件\n  name: 'z1', // 用户传入的控件名称（也可以不传入，该控件默认名称为 zoom）\n  position: 'topright',\n});\n\nscene.getControlByName('z1');\n",paraId:46,tocIndex:19},{value:"往场景中添加气泡对象，气泡用于展示用户自定义信息。",paraId:47,tocIndex:21},{value:"scene.addPopup(popup);\n",paraId:48,tocIndex:21},{value:"往场景中移除气泡对象",paraId:49,tocIndex:22},{value:"scene.removePopup(popup);\n",paraId:50,tocIndex:22},{value:"往场景中添加标记对象，",paraId:51,tocIndex:24},{value:"Marker",paraId:51,tocIndex:24},{value:" 实例是用户自由控制的 ",paraId:51,tocIndex:24},{value:"DOM",paraId:51,tocIndex:24},{value:"。",paraId:51,tocIndex:24},{value:"maker",paraId:52,tocIndex:24},{value:" 用户创建的 ",paraId:52,tocIndex:24},{value:"Marker",paraId:52,tocIndex:24},{value:" 实例。",paraId:52,tocIndex:24},{value:"const marker = new Marker({\n  element: el,\n}).setLnglat({ lng: nodes[i].x * 1, lat: nodes[i].y });\nscene.addMarker(marker);\n",paraId:53,tocIndex:24},{value:"当用户需要添加许多个 ",paraId:54,tocIndex:25},{value:"Marker",paraId:54,tocIndex:25},{value:" 实例时，为了方便管理可以使用 ",paraId:54,tocIndex:25},{value:"MarkerLayer",paraId:54,tocIndex:25},{value:" 对象统一管理。",paraId:54,tocIndex:25},{value:"layer",paraId:55,tocIndex:25},{value:" 标记图层对象。",paraId:55,tocIndex:25},{value:"const markerLayer = new MarkerLayer();\nscene.addMarkerLayer(markerLayer);\n",paraId:56,tocIndex:25},{value:"移除标签图层。",paraId:57,tocIndex:26},{value:"layer",paraId:58,tocIndex:26},{value:" 标记图层对象。",paraId:58,tocIndex:26},{value:"scene.removeMarkerLayer(markerLayer);\n",paraId:59,tocIndex:26},{value:"移除场景中所有的标签对象。",paraId:60,tocIndex:27},{value:"scene.removeAllMarkers();\n",paraId:61,tocIndex:27},{value:"静态方法通过 Scene 类去调用，不是 scene 实例",paraId:62,tocIndex:28},{value:"添加自定义数据协议，设置一个自定义加载瓦片函数，当使用以自定义 URL 模式开头的数据时，该函数将被调用。",paraId:63,tocIndex:29},{value:"protocol 协议名称",paraId:64,tocIndex:29},{value:"handler 数据处理回调函数\n",paraId:64,tocIndex:29},{value:"requestParameters: RequestParameters,\n",paraId:65,tocIndex:29},{value:"url 瓦片 URL，携带瓦片行列号 x,y,z",paraId:66,tocIndex:29},{value:"callback: ResponseCallback",paraId:65,tocIndex:29},{value:") => Cancelable\n",paraId:65,tocIndex:29},{value:"Cancelable： {\ncancel: () => void;\n};",paraId:67,tocIndex:29},{value:"Scene.addProtocol('custom', (params, callback) => {\n  fetch(`https://${params.url.split('://')[1]}`)\n    .then((t) => {\n      if (t.status == 200) {\n        t.arrayBuffer().then((arr) => {\n          callback(null, arr, null, null);\n        });\n      } else {\n        callback(new Error(`Tile fetch error: ${t.statusText}`));\n      }\n    })\n    .catch((e) => {\n      callback(new Error(e));\n    });\n  return { cancel: () => {} };\n});\n// the following is an example of a way to return an error when trying to load a tile\nScene.addProtocol('custom2', (params, callback) => {\n  callback(new Error('someErrorMessage'));\n  return { cancel: () => {} };\n});\n",paraId:68,tocIndex:30},{value:"import * as pmtiles from 'pmtiles';\nconst protocol = new pmtiles.Protocol();\nconst scene = new Scene({\n  id: 'map',\n  map: new Map({\n    center: [11.2438, 43.7799],\n    zoom: 12,\n  }),\n});\n\nscene.addProtocol('pmtiles', protocol.tile);\nconst source = new Source(\n  'pmtiles://https://mdn.alipayobjects.com/afts/file/A*HYvHSZ-wQmIAAAAAAAAAAAAADrd2AQ/protomaps(vector)ODbL_firenze.bin',\n  {\n    parser: {\n      type: 'mvt',\n      tileSize: 256,\n      maxZoom: 14,\n      extent: [-180, -85.051129, 179, 85.051129],\n    },\n  },\n);\n",paraId:69,tocIndex:31},{value:"删除之前添加的协议",paraId:70,tocIndex:32},{value:"name: 协议名称",paraId:71,tocIndex:32},{value:"scene.removeProtocol('pmtiles', protocol.tile);\n",paraId:72,tocIndex:32},{value:"获取当前缩放等级。",paraId:73,tocIndex:34},{value:"scene.getZoom();\n",paraId:74,tocIndex:34},{value:"获取地图中心点",paraId:75,tocIndex:35},{value:"interface ILngLat {\n  lng: number;\n  lat: number;\n}\n\nscene.getCenter();\n",paraId:76,tocIndex:35},{value:"获取地图容器大小，width、height。",paraId:77,tocIndex:36},{value:"scene.getSize();\n",paraId:78,tocIndex:36},{value:"获取地图俯仰角。",paraId:79,tocIndex:37},{value:"scene.getPitch();\n",paraId:80,tocIndex:37},{value:"获取地图容器。",paraId:81,tocIndex:38},{value:"scene.getContainer();\n",paraId:82,tocIndex:38},{value:"参数 ",paraId:83,tocIndex:39},{value:"style",paraId:83,tocIndex:39},{value:" 参数是字符串，可以选择内置的地图样式 具体样式格式和各底图设置方法一致。",paraId:83,tocIndex:39},{value:"L7",paraId:84,tocIndex:39},{value:" 内置了三种地图样式，",paraId:84,tocIndex:39},{value:"AMAP",paraId:84,tocIndex:39},{value:" 和 ",paraId:84,tocIndex:39},{value:"MapBox",paraId:84,tocIndex:39},{value:" 都适用。",paraId:84,tocIndex:39},{value:"light",paraId:85,tocIndex:39},{value:"dark",paraId:85,tocIndex:39},{value:"normal",paraId:85,tocIndex:39},{value:"设置地图底图样式的方法。",paraId:86,tocIndex:39},{value:"// 快捷名称设置\nscene.setMapStyle('light');\n\n// mapbox 主题设置\nscene.setMapStyle('mapbox://styles/mapbox/streets-v11');\n\n// AMap\nscene.setMapStyle('amap://styles/2a09079c3daac9420ee53b67307a8006?isPublic=true');\n",paraId:87,tocIndex:39},{value:"设置地图中心点坐标。",paraId:88,tocIndex:40},{value:"L7",paraId:88,tocIndex:40},{value:" 提供了 ",paraId:88,tocIndex:40},{value:"setCenter",paraId:88,tocIndex:40},{value:" 方法，允许用户动态的设置地图的中心点位，同时允许通过可选的 ",paraId:88,tocIndex:40},{value:"options",paraId:88,tocIndex:40},{value:" 属性设置偏移。",paraId:88,tocIndex:40},{value:"type ICenter = [number, number];\ninterface ICameraOptions {\n  padding:\n    | number\n    | [number, number, number, number]\n    | {\n        top?: number,\n        bottom?: number,\n        right?: number,\n        left?: number,\n      };\n}\n\nscene.setCenter([lng, lat]);\nscene.setCenter([lng, lat], {\n  padding: {\n    top: 100,\n  },\n});\n",paraId:89,tocIndex:40},{value:"🌟 ",paraId:90,tocIndex:40},{value:"padding",paraId:90,tocIndex:40},{value:" 参数支持如下的三种传值方式，数值的单位是 ",paraId:90,tocIndex:40},{value:"px",paraId:90,tocIndex:40},{value:"，表示地图中心点距离容器边缘的偏移距离。",paraId:90,tocIndex:40},{value:"export interface ICameraOptions {\n  padding:\n    | number\n    | [number, number, number, number]\n    | {\n        top?: number,\n        bottom?: number,\n        right?: number,\n        left?: number,\n      };\n}\n",paraId:91,tocIndex:40},{value:"在线案例",paraId:92},{value:"设置地图等级和中心。",paraId:93,tocIndex:41},{value:"type ICenter = [number, number];\nscene.setZoomAndCenter(zoom, center);\n",paraId:94,tocIndex:41},{value:"设置地图缩放等级",paraId:95,tocIndex:42},{value:"scene.setZoom(10);\n",paraId:96,tocIndex:42},{value:"设置地图顺时针旋转角度，旋转原点为地图容器中心点，取值范围 [0-360]。",paraId:97,tocIndex:43},{value:"scene.setRotation(rotation);\n",paraId:98,tocIndex:43},{value:"地图放大一级。",paraId:99,tocIndex:44},{value:"scene.zoomIn();\n",paraId:100,tocIndex:44},{value:"地图缩小一级。",paraId:101,tocIndex:45},{value:"scene.zoomOut();\n",paraId:102,tocIndex:45},{value:"地图平移到指定的经纬度位置。",paraId:103,tocIndex:46},{value:"type ILngLat = [number, number];\nscene.panTo(LngLat);\n",paraId:104,tocIndex:46},{value:"以像素为单位沿 X 方向和 Y 方向移动地图。",paraId:105,tocIndex:47},{value:"x",paraId:106,tocIndex:47},{value:" 水平方向移动像素 向右为正方向。",paraId:106,tocIndex:47},{value:"y",paraId:106,tocIndex:47},{value:" 垂直方向移动像素 向下为正方向。",paraId:106,tocIndex:47},{value:"scene.panBy(x, y);\n",paraId:107,tocIndex:47},{value:"设置地图仰俯角度。",paraId:108,tocIndex:48},{value:"scene.setPitch(pitch);\n",paraId:109,tocIndex:48},{value:"用来设置地图的一些交互配置。",paraId:110,tocIndex:49},{value:"interface IStatusOptions {\n  showIndoorMap: boolean;\n  resizeEnable: boolean;\n  dragEnable: boolean;\n  keyboardEnable: boolean;\n  doubleClickZoom: boolean;\n  zoomEnable: boolean;\n  rotateEnable: boolean;\n}\n\nscene.setMapStatus({ dragEnable: false });\n",paraId:111,tocIndex:49},{value:"地图缩放到某个范围内。",paraId:112,tocIndex:50},{value:"bound",paraId:113,tocIndex:50},{value:" 表示经纬度范围 [[minlng,minlat],[maxlng,maxlat]]。",paraId:113,tocIndex:50},{value:"options",paraId:113,tocIndex:50},{value:" 用户传入，覆盖 ",paraId:113,tocIndex:50},{value:"animate",paraId:113,tocIndex:50},{value:" 直接配置，覆盖 ",paraId:113,tocIndex:50},{value:"Scene",paraId:113,tocIndex:50},{value:" 传入的配置项。",paraId:113,tocIndex:50},{value:"type IBounds = [[number, number], [number, number]];\ninterface IOptions {\n  [key]: any;\n  animate: boolean;\n}\n\nscene.fitBounds([\n  [112, 32],\n  [114, 35],\n]);\n",paraId:114,tocIndex:50},{value:"将画布坐标转经纬度坐标",paraId:115,tocIndex:51},{value:"type IPoint = [number, number];\ninterface ILngLat {\n  lng: number;\n  lat: number;\n}\n\nscene.pixelToLngLat([10, 10]);\n",paraId:116,tocIndex:51},{value:"经纬度坐标转画布坐标。",paraId:117,tocIndex:52},{value:"type ILngLat = [number, number];\ninterface IPoint {\n  x: number;\n  y: number;\n}\n\nscene.lngLatToPixel([120, 10]);\n",paraId:118,tocIndex:52},{value:"地图像素坐标转经纬度坐标，像素坐标地图上某点距离容器左上角的位置。",paraId:119,tocIndex:53},{value:"type IPoint = [number, number];\ninterface ILngLat {\n  lng: number;\n  lat: number;\n}\nscene.pixelToLngLat([10, 10]);\n",paraId:120,tocIndex:53},{value:"经纬度坐标转像素坐标。",paraId:121,tocIndex:54},{value:"type ILngLat = [number, number];\ninterface IPoint {\n  x: number;\n  y: number;\n}\nscene.lngLatToPixel([120, 10]);\n",paraId:122,tocIndex:54},{value:"导出地图，目前仅支持导出可视化层，不支持底图导出。",paraId:123,tocIndex:55},{value:"type IImage = 'png' | 'jpg';\nscene.exportMap('png');\n",paraId:124,tocIndex:55},{value:"scene",paraId:125,tocIndex:56},{value:" 销毁方法，离开页面，不需要使用地图的时候调用，调用后 ",paraId:125,tocIndex:56},{value:"scene",paraId:125,tocIndex:56},{value:" 中的资源和都会被销毁。",paraId:125,tocIndex:56},{value:"scene.destroy();\n",paraId:126,tocIndex:56},{value:"支持对用户传入的数据进行 ",paraId:127,tocIndex:58},{value:"unicode",paraId:127,tocIndex:58},{value:" 的映射，在内部维护一组名称和对应 ",paraId:127,tocIndex:58},{value:"key",paraId:127,tocIndex:58},{value:" 的键值对。",paraId:127,tocIndex:58},{value:"scene.addIconFont('icon1', '&#xe64b;');\nscene.addIconFont('icon2', '&#xe64c;');\nscene.addFontFace(fontFamily, fontPath);\nconst pointIconFontLayer = new PointLayer({})\n  .source(\n    [\n      {\n        j: 140,\n        w: 34,\n        m: 'icon1',\n      },\n      {\n        j: 140,\n        w: 36,\n        m: 'icon2',\n      },\n    ],\n    {\n      parser: {\n        type: 'json',\n        x: 'j',\n        y: 'w',\n      },\n    },\n  )\n  .shape('m', 'text')\n  .size(12)\n  .color('w', ['#f00', '#f00', '#0f0'])\n  .style({\n    fontFamily,\n    iconfont: true,\n    textAllowOverlap: true,\n  });\n",paraId:128,tocIndex:58},{value:"同时传入多组 ",paraId:129,tocIndex:59},{value:"name - unicode",paraId:129,tocIndex:59},{value:" 的键值对。",paraId:129,tocIndex:59},{value:"type IKeyValue = [name: string, unicode: string];\ntype IOption = Array<IKeyValue>;\n\nscene.addIconFonts([\n  ['icon1', '&#xe64b;'],\n  ['icon2', '&#xe64c;'],\n]);\n",paraId:130,tocIndex:59},{value:"在 ",paraId:131,tocIndex:61},{value:"scene",paraId:131,tocIndex:61},{value:" 全局中添加 ",paraId:131,tocIndex:61},{value:"L7",paraId:131,tocIndex:61},{value:" 的图层对象可以使用的图片资源在。",paraId:131,tocIndex:61},{value:"type IImage = HTMLImageElement | string | File；\n\nscene.addImage( '02','https://gw.alipayobjects.com/zos/bmw-prod/ce83fc30-701f-415b-9750-4b146f4b3dd6.svg');\n",paraId:132,tocIndex:61},{value:"示例地址",paraId:133},{value:"判断是否已经在全局添加过相应的图片资源。",paraId:134,tocIndex:62},{value:"scene.hasImage('imageID');\n",paraId:135,tocIndex:62},{value:"从全局删除对应的图片资源。",paraId:136,tocIndex:63},{value:"scene.removeImage('imageID');\n",paraId:137,tocIndex:63},{value:"添加 ",paraId:138,tocIndex:64},{value:"iconfont",paraId:138,tocIndex:64},{value:" 字体文件。",paraId:138,tocIndex:64},{value:"fontFamily",paraId:139,tocIndex:64},{value:" 用户为自己定义的字体名称",paraId:139,tocIndex:64},{value:"fontPath",paraId:139,tocIndex:64},{value:" 导入的文件地址",paraId:139,tocIndex:64},{value:"let fontFamily = 'iconfont';\nlet fontPath = '//at.alicdn.com/t/font_2534097_iiet9d3nekn.woff2?t=1620444089776';\nscene.addFontFace(fontFamily, fontPath);\n",paraId:140,tocIndex:64},{value:"获取当前设备支持绘制的 ",paraId:141,tocIndex:66},{value:"WebGL",paraId:141,tocIndex:66},{value:" 点精灵的大小。",paraId:141,tocIndex:66},{value:"在 ",paraId:142,tocIndex:68},{value:"scene",paraId:142,tocIndex:68},{value:" 上绑定事件监听。",paraId:142,tocIndex:68},{value:"eventName",paraId:143,tocIndex:68},{value:" 事件名。",paraId:143,tocIndex:68},{value:"handler",paraId:143,tocIndex:68},{value:" 事件回调函数。",paraId:143,tocIndex:68},{value:"移除在 ",paraId:144,tocIndex:69},{value:"scene",paraId:144,tocIndex:69},{value:" 上绑定的事件监听。",paraId:144,tocIndex:69},{value:"eventName",paraId:145,tocIndex:69},{value:" 事件名。",paraId:145,tocIndex:69},{value:"handler",paraId:145,tocIndex:69},{value:" 事件回调函数。",paraId:145,tocIndex:69},{value:"scene",paraId:146,tocIndex:70},{value:" 会触发一些常见的场景事件，用户在需要的时候可以进行监听。",paraId:146,tocIndex:70},{value:"scene",paraId:147,tocIndex:71},{value:" 初始化完成事件，我们经常在 ",paraId:147,tocIndex:71},{value:"scene",paraId:147,tocIndex:71},{value:" 初始化完成后添加 ",paraId:147,tocIndex:71},{value:"Layer",paraId:147,tocIndex:71},{value:"。",paraId:147,tocIndex:71},{value:"scene.on('loaded', () => {\n  scene.addLayer(layer);\n});\n",paraId:148,tocIndex:71},{value:"地图容器变化事件",paraId:149,tocIndex:72},{value:"scene.on('resize', () => {}); // 地图容器大小改变事件\n",paraId:150,tocIndex:72},{value:"默认 L7 按需重绘，通过启动动画开启实时渲染，便于 SpectorJS 插件捕捉帧渲染。",paraId:151,tocIndex:73},{value:"调试时使用，停止实时渲染",paraId:152,tocIndex:74},{value:"scene.on('loaded', () => {}); //地图加载完成触发\nscene.on('mapmove', () => {}); // 地图平移时触发事件\nscene.on('movestart', () => {}); // 地图平移开始时触发\nscene.on('moveend', () => {}); // 地图移动结束后触发，包括平移，以及中心点变化的缩放。如地图有拖拽缓动效果，则在缓动结束后触发\nscene.on('zoomchange', () => {}); // 地图缩放级别更改后触发\nscene.on('zoomstart', () => {}); // 缩放开始时触发\nscene.on('zoomend', () => {}); // 缩放停止时触发\n",paraId:153,tocIndex:75},{value:"其他地图事件可以查看相应底图的事件文档,地图事件也可以通过 ",paraId:154,tocIndex:75},{value:"Scene.map",paraId:154,tocIndex:75},{value:" 进行设置。",paraId:154,tocIndex:75},{value:"Mapbox",paraId:155,tocIndex:75},{value:"高德",paraId:155,tocIndex:75},{value:"scene.on('click', (ev) => {}); // 鼠标左键点击事件\nscene.on('dblclick', (ev) => {}); // 鼠标左键双击事件\nscene.on('mousemove', (ev) => {}); // 鼠标在地图上移动时触发\nscene.on('mousewheel', (ev) => {}); // 鼠标滚轮开始缩放地图时触发\nscene.on('mouseover', (ev) => {}); // 鼠标移入地图容器内时触发\nscene.on('mouseout', (ev) => {}); // 鼠标移出地图容器时触发\nscene.on('mouseup', (ev) => {}); // 鼠标在地图上单击抬起时触发\nscene.on('mousedown', (ev) => {}); // 鼠标在地图上单击按下时触发\nscene.on('contextmenu', (ev) => {}); // 鼠标右键单击事件\nscene.on('dragstart', (ev) => {}); //开始拖拽地图时触发\nscene.on('dragging', (ev) => {}); // 拖拽地图过程中触发\nscene.on('dragend', (ev) => {}); //停止拖拽地图时触发。如地图有拖拽缓动效果，则在拽停止，缓动开始前触发\n\nscene.on('webglcontextlost', () => {}); // webgl 上下文丢失\n",paraId:156,tocIndex:76},{value:"实验参数可能会废弃。",paraId:157,tocIndex:77},{value:"高德地图适用，是否关闭偏移坐标系， 默认为 ",paraId:158,tocIndex:78},{value:"true",paraId:158,tocIndex:78},{value:"。",paraId:158,tocIndex:78},{value:"const scene = new Scene({\n  offsetCoordinate: true,\n});\n",paraId:159,tocIndex:78}]},75300:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(39906);const d=[{value:"L7 支持 CSV 以逗号分隔的 CSV 数据加载。",paraId:0},{value:"CSV 是文本数据结构，很难表达复杂的地理数据结构，因此 CSV 仅支持两种数据结构",paraId:1},{value:"点数据：需要指定经度、纬度坐标",paraId:2},{value:"线段、弧线数据：需要指定 ",paraId:2},{value:"起止点",paraId:2},{value:" 的经度、纬度坐标",paraId:2},{value:"type string 必选 json",paraId:3,tocIndex:0},{value:"x string 点数据表示 经度",paraId:3,tocIndex:0},{value:"y string 点数据表示 纬度",paraId:3,tocIndex:0},{value:"x1 string 经度",paraId:3,tocIndex:0},{value:"x2 string 纬度",paraId:3,tocIndex:0},{value:"layer.source(data, {\n  parser: {\n    type: 'csv',\n    x: 'lng',\n    y: 'lat',\n  },\n});\n",paraId:4,tocIndex:1},{value:"CSV 数据 demo 示例",paraId:5},{value:"layer.source(data, {\n  parser: {\n    type: 'csv',\n    x: 'lng1',\n    y: 'lat1',\n    x1: 'lng1',\n    y1: 'lat2',\n  },\n});\n",paraId:6,tocIndex:2},{value:"CSV 线段数据 demo 示例",paraId:7}]},89189:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(67255);const d=[{value:"GeoJSON 是一种对各种地理数据结构进行编码的格式。GeoJSON 对象可以表示几何、特征或者特征集合。GeoJSON 支持下面几何类型：点、线、面、多点、多线、多面和几何集合。GeoJSON 里的特征包含一个几何对象和其他属性，特征集合表示一系列特征。\n",paraId:0,tocIndex:0},{value:"The GeoJSON Format",paraId:0,tocIndex:0},{value:"L7 数据 source 支持   传入 Geometry 集合 FeatureCollection",paraId:1,tocIndex:0},{value:"一个 feature Colletion 由对个 feature 组成",paraId:2,tocIndex:1},{value:'{\n  "type": "FeatureCollection",\n  "features": [\n    {\n      "type": "Feature",\n      "properties": {\n        "name": "tom"\n      },\n      "geometry": {\n        "type": "Polygon",\n        "coordinates": [\n          [\n            [-2.8125, 34.59704151614417],\n            [65.390625, 34.59704151614417],\n            [65.390625, 61.10078883158897],\n            [-2.8125, 61.10078883158897],\n            [-2.8125, 34.59704151614417]\n          ]\n        ]\n      }\n    }\n  ]\n}\n',paraId:3,tocIndex:1},{value:"一个 feature 有 geometry 空间信息，properties 属性信息，其中 geometry 是必须字段",paraId:4,tocIndex:2},{value:'{\n  "type": "Feature",\n  "properties": {},\n  "geometry": {}\n}\n',paraId:5,tocIndex:2},{value:"支持 Gemetry Object 类型",paraId:6,tocIndex:3},{value:'{\n  "type": "Point",\n  "coordinates": [100.0, 0.0]\n}\n',paraId:7,tocIndex:4},{value:'{\n  "type": "MultiPoint",\n  "coordinates": [\n    [100.0, 0.0],\n    [101.0, 1.0]\n  ]\n}\n',paraId:8,tocIndex:5},{value:"Line",paraId:9,tocIndex:5},{value:'{\n  "type": "LineString",\n  "coordinates": [\n    [100.0, 0.0],\n    [101.0, 1.0]\n  ]\n}\n',paraId:10,tocIndex:6},{value:'{\n  "type": "MultiLineString",\n  "coordinates": [\n    [\n      [100.0, 0.0],\n      [101.0, 1.0]\n    ],\n    [\n      [102.0, 2.0],\n      [103.0, 3.0]\n    ]\n  ]\n}\n',paraId:11,tocIndex:7},{value:"Polygon",paraId:12,tocIndex:7},{value:'{\n  "type": "Polygon",\n  "coordinates": [\n    [\n      [100.0, 0.0],\n      [101.0, 0.0],\n      [101.0, 1.0],\n      [100.0, 1.0],\n      [100.0, 0.0]\n    ]\n  ]\n}\n',paraId:13,tocIndex:8},{value:"With holes:",paraId:14,tocIndex:8},{value:'{\n  "type": "Polygon",\n  "coordinates": [\n    [\n      [-170.0, 10.0],\n      [170.0, 10.0],\n      [170.0, -10.0],\n      [-170.0, -10.0],\n      [-170.0, 10.0]\n    ],\n    [\n      [175.0, 5.0],\n      [-175.0, 5.0],\n      [-175.0, -5.0],\n      [175.0, -5.0],\n      [175.0, 5.0]\n    ]\n  ]\n}\n',paraId:15,tocIndex:8},{value:'{\n  "type": "MultiPolygon",\n  "coordinates": [\n    [\n      [\n        [102.0, 2.0],\n        [103.0, 2.0],\n        [103.0, 3.0],\n        [102.0, 3.0],\n        [102.0, 2.0]\n      ]\n    ],\n    [\n      [\n        [100.0, 0.0],\n        [101.0, 0.0],\n        [101.0, 1.0],\n        [100.0, 1.0],\n        [100.0, 0.0]\n      ],\n      [\n        [100.2, 0.2],\n        [100.8, 0.2],\n        [100.8, 0.8],\n        [100.2, 0.8],\n        [100.2, 0.2]\n      ]\n    ]\n  ]\n}\n',paraId:16,tocIndex:9},{value:"geojson 详细文档",paraId:17},{value:"turfjs",paraId:18,tocIndex:11},{value:":   地理数据计算，处理，统计，分析的 JavaScript 库",paraId:18,tocIndex:11},{value:"http://geojson.io/",paraId:19,tocIndex:12},{value:"     可以在线查看，绘制，修改 GeoJSON 数据",paraId:19,tocIndex:12},{value:"https://mapshaper.org/",paraId:20,tocIndex:12},{value:" 可以查看较大的 geojson，还能够简化 GeoJSON 数据",paraId:20,tocIndex:12}]},58998:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(66170);const d=[{value:"Image 数据主要用于在地图上根据经纬度范围添加图片，比如一幅纸制地图扫描版需要显示在地图上。",paraId:0},{value:"type: image",paraId:1,tocIndex:0},{value:"extent: 图像的经纬度范围 ",paraId:2,tocIndex:0},{value:"[minlng, minlat,maxLng, maxLat]",paraId:2,tocIndex:0},{value:" 可选",paraId:2,tocIndex:0},{value:"coordinates: ",paraId:3,tocIndex:0},{value:"[[number,number],[number,number],[number,number],[number,number]]",paraId:3,tocIndex:0},{value:"; 可选",paraId:3,tocIndex:0},{value:"四个地理坐标，表示为经度和纬度数字的数组，定义图像的角点。 坐标从图像的左上角开始并按顺时针顺序进行。 它们不必代表矩形。",paraId:4,tocIndex:0},{value:"layer.source('https://gw.alipayobjects.com/zos/rmsportal/FnHFeFklTzKDdUESRNDv.jpg', {\n  parser: {\n    type: 'image',\n    extent: [121.168, 30.2828, 121.384, 30.4219],\n  },\n});\n",paraId:5,tocIndex:0},{value:"倾斜图片",paraId:6,tocIndex:0},{value:"layer.source(\n  'https://mdn.alipayobjects.com/huamei_gjo0cl/afts/img/A*vm_9S64uA0UAAAAAAAAAAAAADjDHAQ/original',\n\n  {\n    parser: {\n      type: 'image',\n      coordinates: [\n        [100.959388, 41.619522],\n        [101.229887, 41.572654],\n        [101.16971, 41.377836],\n        [100.900015, 41.424628],\n      ],\n    },\n  },\n);\n",paraId:7,tocIndex:0}]},40086:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(72676);const d=[{value:"GeoJSON 虽然是通用的的地理数据格式，在具体使用场景中，数据服务人员可能并不熟悉 GeoJSON,或者没有生成 GeoJSON 的工具，\b 因此 L7 对数据定义了 Parser 的概念，你的数据可以是任何格式，使用指定数据对应的地理信息字段即可。",paraId:0},{value:"⚠️ json 不是标准的地理数据结构，因此在使用时务必要设置 Parser",paraId:1,tocIndex:0},{value:"json 数据解析使用对应 JSON parser",paraId:2,tocIndex:0},{value:"支持两种解析方式",paraId:3,tocIndex:1},{value:"该方式只支持解析的点数据，或者只有两个点的线段，或者弧线数据",paraId:4,tocIndex:2},{value:"type ",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" 必选 ",paraId:5,tocIndex:2},{value:"json",paraId:5,tocIndex:2},{value:"x ",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" 点数据表示 经度",paraId:5,tocIndex:2},{value:"y ",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" 点数据表示 纬度",paraId:5,tocIndex:2},{value:"x1 ",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" 经度",paraId:5,tocIndex:2},{value:"x2 ",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" 纬度",paraId:5,tocIndex:2},{value:"如果数据是点数据，只需要设置 x,y 字段即可",paraId:6,tocIndex:2},{value:"如果是线段、弧线数据，需要知道起止点坐标，x,y,x1,y1",paraId:7,tocIndex:2},{value:"layer.source(data, {\n  parser: {\n    type: 'json',\n    x: 'lng',\n    y: 'lat',\n  },\n});\n",paraId:8,tocIndex:2},{value:"JOSN 数据 demo 示例",paraId:9},{value:"可也解析任意复杂的点，线面",paraId:10,tocIndex:3},{value:"type ",paraId:11,tocIndex:3},{value:"string",paraId:11,tocIndex:3},{value:" 必选 ",paraId:11,tocIndex:3},{value:"json",paraId:11,tocIndex:3},{value:"coordinates ",paraId:11,tocIndex:3},{value:"array",paraId:11,tocIndex:3},{value:" 必选，主要用于表达比较复杂的格式，等同于 geojson coordinates 属性",paraId:11,tocIndex:3},{value:"layer.source(data, {\n  parser: {\n    type: 'json',\n    coordinates: 'coord',\n  },\n});\n",paraId:12,tocIndex:3},{value:"type json",paraId:13,tocIndex:6},{value:"x: 经度字段",paraId:13,tocIndex:6},{value:"y: 纬度字段",paraId:13,tocIndex:6},{value:"const data = [\n  {\n    lng: 112.345,\n    lat: 30.455,\n    value: 10,\n  },\n  {\n    lng: 114.345,\n    lat: 31.455,\n    value: 10,\n  },\n];\n\nlayer.source(data, {\n  parser: {\n    type: 'json',\n    x: 'lng',\n    y: 'lat',\n  },\n});\n",paraId:14,tocIndex:6},{value:" 点 coodinates 数据格式",paraId:15},{value:"const data = [\n  {\n    coord: [112.345, 30.455],\n    value: 10,\n  },\n  {\n    coord: [114.345, 32.455],\n    value: 10,\n  },\n];\n\nlayer.source(data, {\n  parser: {\n    type: 'json',\n    coordinates: 'coord',\n  },\n});\n",paraId:16},{value:"type: json",paraId:17,tocIndex:9},{value:"x ",paraId:17,tocIndex:9},{value:"string",paraId:17,tocIndex:9},{value:" 经度",paraId:17,tocIndex:9},{value:"y ",paraId:17,tocIndex:9},{value:"string",paraId:17,tocIndex:9},{value:" 纬度",paraId:17,tocIndex:9},{value:"x1 ",paraId:17,tocIndex:9},{value:"string",paraId:17,tocIndex:9},{value:" 经度",paraId:17,tocIndex:9},{value:"x2 ",paraId:17,tocIndex:9},{value:"string",paraId:17,tocIndex:9},{value:" 纬度",paraId:17,tocIndex:9},{value:"简易解析只支持两个点组成的线段，主要再绘制弧线的时候比较常用，只需指定线段的起止点坐标",paraId:18,tocIndex:9},{value:"const data = [\n  {\n    lng1: 112.345,\n    lat1: 30.455,\n    lng2: 112.345,\n    lat2: 30.455,\n    value: 10,\n  },\n  {\n    lng1: 114.345,\n    lat1: 31.455,\n    lng2: 112.345,\n    lat2: 30.455,\n    value: 10,\n  },\n];\n\nlayer.source(data, {\n  parser: {\n    type: 'json',\n    x: 'lng1',\n    y: 'lat1',\n    x1: 'lng1',\n    y1: 'lat2',\n  },\n});\n",paraId:19,tocIndex:9},{value:"绘制线段、弧线也支持使用 coordinates 组织数据",paraId:20,tocIndex:10},{value:"coordinates 包含两个坐标，\n第一个坐标 对应 x, y\n第二个坐标 对应 x1, y1",paraId:21,tocIndex:10},{value:"const data = [\n  {\n    id: '1',\n    coord: [\n      [101.953125, 50.51342652633956],\n      [119.17968749999999, 33.137551192346145],\n    ],\n  },\n];\nlayer.source(data, {\n  parser: {\n    type: 'json',\n    coordinates: 'coord',\n  },\n});\n",paraId:22,tocIndex:10},{value:"如果需要使用绘制轨迹数据，需要通过 coodinates 指定线的点序列。",paraId:23,tocIndex:10},{value:"coordinate 格式 geojson 的 coordinate 字段 支持 LineString, MultiLineString",paraId:24,tocIndex:10},{value:" 线 coodinates 数据格式",paraId:25},{value:"const data = [\n  {\n    name: 'path1',\n    path: [\n      [58.00781249999999, 32.84267363195431],\n      [85.78125, 25.16517336866393],\n      [101.953125, 41.77131167976407],\n      [114.9609375, 39.639537564366684],\n      [117.42187500000001, 28.613459424004414],\n    ],\n  },\n];\n",paraId:26},{value:"使用时通过 coordinates 指定",paraId:27},{value:"layer.source(data, {\n  parser: {\n    type: 'json',\n    coordinates: 'path',\n  },\n});\n",paraId:28},{value:"面数据 coordinates 字段比较复杂不支持简易的解析方式",paraId:29,tocIndex:11},{value:"需要指定 coordinates 字段, 格式同 GeoJSON 的 coordinates 字段",paraId:30,tocIndex:12},{value:"面 coodinates 数据格式",paraId:31},{value:"注意面数据 coord  是三层数据结构",paraId:32},{value:"[\n  {\n    type: 'Polygon',\n    geometryCoord: [\n      [\n        [115.1806640625, 30.637912028341123],\n        [114.9609375, 29.152161283318915],\n        [117.79541015625001, 27.430289738862594],\n        [118.740234375, 29.420460341013133],\n        [117.46582031249999, 31.50362930577303],\n        [115.1806640625, 30.637912028341123],\n      ],\n    ],\n  },\n];\n\nlayer.source(data, {\n  parser: {\n    type: 'json',\n    coordinates: 'geometryCoord',\n  },\n});\n",paraId:33}]},10870:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(53767);const d=[{value:"L7 加载矢量瓦片地图的时候需要在 ",paraId:0},{value:"source",paraId:0},{value:" 中对瓦片服务进行解析，同时配置瓦片服务的请求参数。",paraId:0},{value:" ",paraId:1,tocIndex:1},{value:"string",paraId:1,tocIndex:1},{value:" ",paraId:1,tocIndex:1},{value:"必选",paraId:1,tocIndex:1},{value:" ",paraId:1,tocIndex:1},{value:"default:",paraId:1,tocIndex:1},{value:" mvt",paraId:1,tocIndex:1},{value:"number",paraId:2},{value:" ",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:" ",paraId:3,tocIndex:2},{value:"可选",paraId:3,tocIndex:2},{value:" ",paraId:3,tocIndex:2},{value:"default:",paraId:3,tocIndex:2},{value:" 256",paraId:3,tocIndex:2},{value:"\n请求瓦片的大小",paraId:3,tocIndex:2},{value:" number ",paraId:4,tocIndex:3},{value:"可选",paraId:4,tocIndex:3},{value:" ",paraId:4,tocIndex:3},{value:"default:",paraId:4,tocIndex:3},{value:" 0",paraId:4,tocIndex:3},{value:"\n瓦片请求瓦片层级的偏移",paraId:4,tocIndex:3},{value:" ",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:" ",paraId:5,tocIndex:4},{value:"可选",paraId:5,tocIndex:4},{value:" ",paraId:5,tocIndex:4},{value:"default:",paraId:5,tocIndex:4},{value:" 0",paraId:5,tocIndex:4},{value:"\n瓦片最大缩放等级 ",paraId:5,tocIndex:4},{value:"20",paraId:5,tocIndex:4},{value:" ",paraId:6,tocIndex:5},{value:"number",paraId:6,tocIndex:5},{value:" ",paraId:6,tocIndex:5},{value:"可选",paraId:6,tocIndex:5},{value:" ",paraId:6,tocIndex:5},{value:"default:",paraId:6,tocIndex:5},{value:" 2-",paraId:6,tocIndex:5},{value:"\n瓦片最小缩放等",paraId:6,tocIndex:5},{value:"[number, number, number, number]",paraId:2},{value:" ",paraId:7,tocIndex:6},{value:"number[]",paraId:7,tocIndex:6},{value:" ",paraId:7,tocIndex:6},{value:"可选",paraId:7,tocIndex:6},{value:" 不限制:_ ",paraId:7,tocIndex:6},{value:"\n地图显示范围",paraId:7,tocIndex:6},{value:"(tile: { x: number, y: number, z: number }, callback: (err: any, data: any) => void) => void,",paraId:2},{value:" __ ",paraId:8,tocIndex:7},{value:"可选",paraId:8,tocIndex:7},{value:"callback 参数",paraId:9,tocIndex:7},{value:"err 数据返回时",paraId:10,tocIndex:7},{value:"data arrarybuffer 类型， pbf",paraId:10,tocIndex:7},{value:"自定义瓦片数据获取方法,试用业务场景需要数据鉴权，或者特殊处理的场景",paraId:11,tocIndex:7},{value:"瓦片数据集，可以获取当前视野内的瓦片信息, 瓦片状态",paraId:12,tocIndex:9},{value:"const source = layer1.getSource();\nconst tileSet = source.tileset;\n",paraId:13,tocIndex:9},{value:"瓦片是否加载完成",paraId:14,tocIndex:11},{value:"当前瓦片对象",paraId:15,tocIndex:12},{value:"当前瓦片层级；这里的曾经和map 的缩放层级不相等",paraId:16,tocIndex:13},{value:"地图拖动，需要加载新的瓦片时触发",paraId:17,tocIndex:15},{value:"tileSet.on('tiles-load-start', () => {\n  console.log('tile start');\n});\n",paraId:18,tocIndex:15},{value:"所有需要加载的瓦片资源加载完成后触发",paraId:19,tocIndex:16},{value:"tileSet.on('tiles-load-finished', () => {\n  console.log('tile finished');\n});\n",paraId:20,tocIndex:16},{value:"重新加载瓦片，会重新请求数据，适用与动态瓦片场景，如瓦片数据发生了更新，或者瓦片Join 的数据发生了更新",paraId:21,tocIndex:18},{value:"source.reloadAllTile();\n",paraId:22,tocIndex:18},{value:"重新加载特定瓦片的",paraId:23,tocIndex:19},{value:"参数",paraId:24,tocIndex:19},{value:"z 缩放等级",paraId:25,tocIndex:19},{value:"x 瓦片 x 坐标",paraId:25,tocIndex:19},{value:"y 瓦片 y 坐标",paraId:25,tocIndex:19},{value:"source.reloadTileById(z, x, y);\n",paraId:26,tocIndex:19},{value:"根据经纬度范围更新瓦片",paraId:27,tocIndex:20},{value:"参数",paraId:28,tocIndex:20},{value:"extent: 经纬范围 [minLng, minLat, maxLng, maxLat]",paraId:29,tocIndex:20},{value:"zoom: 缩放等级",paraId:29,tocIndex:20},{value:"根据经纬度更新瓦片，经纬度坐标转换成瓦片坐标更新",paraId:30,tocIndex:21},{value:"lng 经度",paraId:31,tocIndex:21},{value:"lat 纬度",paraId:31,tocIndex:21},{value:"zoom 缩放等级",paraId:31,tocIndex:21},{value:"source.reloadTileByLnglat(112, 30, 10);\n",paraId:32,tocIndex:21},{value:"const tileSource = new Source('http://localhost:3000/zhejiang.mbtiles/{z}/{x}/{y}.pbf', {\n  parser: {\n    type: 'mvt',\n    tileSize: 256,\n    zoomOffset: 0,\n    maxZoom: 9,\n    extent: [-180, -85.051129, 179, 85.051129],\n  },\n});\n",paraId:33,tocIndex:23},{value:"const source = new Source('https://gridwise.alibaba-inc.com/tile/test?z={z}&x={x}&y={y}', {\n  parser: {\n    type: 'mvt',\n    tileSize: 256,\n    getCustomData: (tile, cb) => {\n      const url = `https://gridwise.alibaba-inc.com/tile/test?z=${tile.z}&x=${tile.x}&y=${tile.y}`;\n      fetch(url)\n        .then((res) => res.arrayBuffer())\n        .then((data) => {\n          cb(null, data);\n        });\n    },\n  },\n});\n",paraId:34,tocIndex:24}]},13951:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(3650);const d=[{value:"Raster data 数据栅格的可视化，栅格数据主要来源是卫星遥感数据，如数字高程图、植被分布图和夜光图。",paraId:0},{value:"data 数据",paraId:1},{value:"option 配置项\n",paraId:1},{value:"parser 数据解析参数",paraId:2},{value:"data 解析后的数据，为数组",paraId:3,tocIndex:0},{value:"type RasterDataType =\n  | Uint8Array\n  | Int8Array\n  | Uint16Array\n  | Int16Array\n  | Uint32Array\n  | Int32Array\n  | Float32Array\n  | Float64Array;\n",paraId:4,tocIndex:0},{value:"以 geotiff 为例需要先将数据解析出来，作为 data 输入给 source",paraId:5,tocIndex:0},{value:"import * as GeoTIFF from 'geotiff';\n\nasync function getTiffData() {\n  async function getTiffData() {\n    const response = await fetch(\n      'https://gw.alipayobjects.com/zos/antvdemo/assets/light_clip/lightF182013.tiff',\n    );\n    const arrayBuffer = await response.arrayBuffer();\n    const tiff = await GeoTIFF.fromArrayBuffer(arrayBuffer);\n    const image = await tiff.getImage();\n    const width = image.getWidth();\n    const height = image.getHeight();\n    const values = await image.readRasters();\n    return {\n      data: values[0],\n      width,\n      height,\n    };\n  }\n}\nconst tiffdata = await getTiffData();\nlayer.source(tiffdata.data, {\n  parser: {\n    type: 'raster',\n    width: tiffdata.width,\n    height: tiffdata.height,\n    extent: [73.4821902409999979, 3.8150178409999995, 135.1066187319999869, 57.6300459959999998],\n  },\n});\n",paraId:6,tocIndex:0},{value:"type: raster",paraId:7,tocIndex:1},{value:"extent: 栅格的经纬度范围 [minlng, minlat,maxLng, maxLat]",paraId:7,tocIndex:1},{value:"width 数据宽度",paraId:7,tocIndex:1},{value:"height 数据高度",paraId:7,tocIndex:1},{value:"根据栅格数据的经纬度范围，将其添加到地图上。",paraId:8,tocIndex:1},{value:"layer.source(rasterData, {\n  parser: {\n    type: 'raster',\n    extent: [121.168, 30.2828, 121.384, 30.4219],\n  },\n});\n",paraId:9,tocIndex:1},{value:"Raster ndi",paraId:10}]},69485:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(14438);const d=[{value:"raster-ndi(Normalized Difference Indices) source 是将多波段数据进行归一化指数计算，比如计算NDVI/NDWI 等指数，",paraId:0},{value:"data 数据",paraId:1},{value:"option 配置项\n",paraId:1},{value:"parser 数据解析参数\n",paraId:2},{value:"type 解析类型 ",paraId:3},{value:"ndi",paraId:3},{value:"layer.source(bandsValues, {\n  parser: {\n    type: 'ndi',\n    width: bandsValues.width,\n    height: bandsValues.height,\n    bands: [4, 3], // 从零开始\n    extent: [130.39565357746957, 46.905730725742366, 130.73364094187343, 47.10217234153133],\n  },\n});\n",paraId:4},{value:"type RasterDataType =\n  | Uint8Array\n  | Int8Array\n  | Uint16Array\n  | Int16Array\n  | Uint32Array\n  | Int32Array\n  | Float32Array\n  | Float64Array;\n",paraId:5,tocIndex:0},{value:"data 为数组类型 ",paraId:6,tocIndex:0},{value:"RasterDataType[]",paraId:6,tocIndex:0},{value:"如果是多波段 Tiff 可以直接使用geotiff,js 读取所有波段，",paraId:7,tocIndex:0},{value:"如果是单文件单波段数据，需要单独读取并合并成一个数据。",paraId:7,tocIndex:0},{value:"单文件多波段读取示例",paraId:8,tocIndex:0},{value:"async function getTiffData(url: string) {\n  const response = await fetch(url);\n  const arrayBuffer = await response.arrayBuffer();\n  const tiff = await GeoTIFF.fromArrayBuffer(arrayBuffer);\n  const image1 = await tiff.getImage();\n  const bandsValues = await image1.readRasters();\n  return bandsValues;\n}\n",paraId:9,tocIndex:0},{value:"type 解析类型 'rgb' ",paraId:10,tocIndex:1},{value:"必选",paraId:10,tocIndex:1},{value:"bands ",paraId:11,tocIndex:1},{value:"[number,number] 指定需要归一化的波段,data 数组长度需要大于等于 2  ",paraId:11,tocIndex:1},{value:"必选`",paraId:11,tocIndex:1},{value:"注：bands 序号从零开始（landsat 8 里的 5，4, 波段这样要设置为 4,3）",paraId:12,tocIndex:1},{value:"width 长度 ",paraId:13,tocIndex:1},{value:"必选",paraId:13,tocIndex:1},{value:"height 宽度 ",paraId:14,tocIndex:1},{value:"必选",paraId:14,tocIndex:1},{value:"Raster ndi",paraId:15}]},4950:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(17970);const d=[{value:"raster-rgb source 是将多波段数据合成 RGB数据进行展示，如对 LandSat8 数据我们可以按照 5,4,3 或者 4,3,2 波段进行RGB组合显示",paraId:0},{value:"data 数据",paraId:1},{value:"option 配置项\n",paraId:1},{value:"parser 数据解析参数\n",paraId:2},{value:"type 解析类型 ",paraId:3},{value:"rgb",paraId:3},{value:"layer.source(bandsValues, {\n  parser: {\n    type: 'rgb',\n    width: bandsValues.width,\n    height: bandsValues.height,\n    bands: [4, 3, 2], // 从零开始\n    extent: [130.39565357746957, 46.905730725742366, 130.73364094187343, 47.10217234153133],\n  },\n});\n",paraId:4},{value:"type RasterDataType =\n  | Uint8Array\n  | Int8Array\n  | Uint16Array\n  | Int16Array\n  | Uint32Array\n  | Int32Array\n  | Float32Array\n  | Float64Array;\n",paraId:5,tocIndex:0},{value:"data 为数组类型 ",paraId:6,tocIndex:0},{value:"RasterDataType[]",paraId:6,tocIndex:0},{value:"如果是多波段 Tiff 可以直接使用geotiff,js 读取所有波段，",paraId:7,tocIndex:0},{value:"如果是单文件单波段数据，需要单独读取并合并成一个数据。",paraId:7,tocIndex:0},{value:"单文件多波段读取示例",paraId:8,tocIndex:0},{value:"async function getTiffData(url: string) {\n  const response = await fetch(url);\n  const arrayBuffer = await response.arrayBuffer();\n  const tiff = await GeoTIFF.fromArrayBuffer(arrayBuffer);\n  const image1 = await tiff.getImage();\n  const bandsValues = await image1.readRasters();\n  return bandsValues;\n}\n",paraId:9,tocIndex:0},{value:"type 解析类型 'rgb' ",paraId:10,tocIndex:1},{value:"必选",paraId:10,tocIndex:1},{value:"bands ",paraId:11,tocIndex:1},{value:"[number,number,number] 指定 R/G/B 通道对应的数据索引,data 数组长度需要大于等于 3  ",paraId:11,tocIndex:1},{value:"必选`",paraId:11,tocIndex:1},{value:"注：bands 序号从零开始（landsat 8 里的 5，4,3 波段这样要设置为 4,3, 2）",paraId:12,tocIndex:1},{value:"width 长度 ",paraId:13,tocIndex:1},{value:"必选",paraId:13,tocIndex:1},{value:"height 宽度 ",paraId:14,tocIndex:1},{value:"必选",paraId:14,tocIndex:1},{value:"countCut 颜色拉伸参数 ",paraId:15,tocIndex:1},{value:"[number,number]",paraId:15,tocIndex:1},{value:" 数值为百分比，默认值 ",paraId:15,tocIndex:1},{value:"[2,98]",paraId:15,tocIndex:1},{value:" ",paraId:15,tocIndex:1},{value:"可选",paraId:15,tocIndex:1},{value:"Raster RGB",paraId:16}]},28628:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(18847);const d=[{value:"L7 加载栅格瓦片地图的时候需要在 ",paraId:0},{value:"source",paraId:0},{value:" 中对瓦片服务进行解析，同时配置瓦片服务的请求参数。",paraId:0},{value:"瓦片 URL,仅支持 EPSG 3857 的坐标系，支持 TMS、WMS、WMTS 协议",paraId:1,tocIndex:0},{value:"通过 url 模板传参，参与需要使用 ",paraId:2,tocIndex:1},{value:"{}",paraId:2,tocIndex:1},{value:"1-4 服务器编码 {1-4}",paraId:3,tocIndex:1},{value:"z 缩放等级",paraId:3,tocIndex:1},{value:"x 瓦片 x 坐标",paraId:3,tocIndex:1},{value:"y 瓦片 y 坐标",paraId:3,tocIndex:1},{value:"const url = 'http://webst0{1-4}.is.autonavi.com/appmaptile?style=6&x={x}&y={y}&z={z}';\n",paraId:4,tocIndex:1},{value:"url 模板参数",paraId:5,tocIndex:2},{value:"1-x 服务器编码 {1-4}",paraId:6,tocIndex:2},{value:"bbox 瓦片范围模板 BBOXSR 只支持 4326,IMAGESR 只支持 3857",paraId:6,tocIndex:2},{value:"示例",paraId:7,tocIndex:2},{value:"const url =\n  'https://pnr.sz.gov.cn/d-suplicmap/dynamap_1/rest/services/LAND_CERTAIN/MapServer/export?F=image&FORMAT=PNG32&TRANSPARENT=true&layers=show:1&SIZE=256,256&BBOX={bbox}&BBOXSR=4326&IMAGESR=3857&DPI=90';\n",paraId:8,tocIndex:2},{value:"url 模板参数",paraId:9,tocIndex:3},{value:"1-4 服务器编码 {1-4}",paraId:10,tocIndex:3},{value:"WMTS 两种方式",paraId:11,tocIndex:3},{value:"使用方式和 TMS 相似，可以拼接 url 字符串",paraId:12,tocIndex:3},{value:"通过 parser 参数 wmtsOptions 设置服务参数",paraId:12,tocIndex:3},{value:"const url1 = 'https://t0.tianditu.gov.cn/img_w/wmts?tk=b72aa81ac2b3cae941d1eb213499e15e&';\nconst layer1 = new RasterLayer({\n  zIndex: 1,\n}).source(url1, {\n  parser: {\n    type: 'rasterTile',\n    tileSize: 256,\n    wmtsOptions: {\n      layer: 'img',\n      tileMatrixset: 'w',\n      format: 'tiles',\n    },\n  },\n});\n",paraId:13,tocIndex:3},{value:" ",paraId:14,tocIndex:5},{value:"string",paraId:14,tocIndex:5},{value:" ",paraId:14,tocIndex:5},{value:"必选",paraId:14,tocIndex:5},{value:" ",paraId:14,tocIndex:5},{value:"default:",paraId:14,tocIndex:5},{value:" rasterTile",paraId:14,tocIndex:5},{value:"\n固定值为 ",paraId:14,tocIndex:5},{value:"rasterTile",paraId:14,tocIndex:5},{value:"number",paraId:15},{value:" ",paraId:16,tocIndex:6},{value:"number",paraId:16,tocIndex:6},{value:" ",paraId:16,tocIndex:6},{value:"可选",paraId:16,tocIndex:6},{value:" ",paraId:16,tocIndex:6},{value:"default:",paraId:16,tocIndex:6},{value:" 256",paraId:16,tocIndex:6},{value:"\n请求瓦片的大小 optional",paraId:16,tocIndex:6},{value:" number ",paraId:17,tocIndex:7},{value:"可选",paraId:17,tocIndex:7},{value:" ",paraId:17,tocIndex:7},{value:"default:",paraId:17,tocIndex:7},{value:" 0",paraId:17,tocIndex:7},{value:"\n瓦片请求瓦片层级的偏移",paraId:17,tocIndex:7},{value:" ",paraId:18,tocIndex:8},{value:"number",paraId:18,tocIndex:8},{value:" ",paraId:18,tocIndex:8},{value:"可选",paraId:18,tocIndex:8},{value:" ",paraId:18,tocIndex:8},{value:"default:",paraId:18,tocIndex:8},{value:" 0",paraId:18,tocIndex:8},{value:"瓦片最大缩放等级 ",paraId:19,tocIndex:8},{value:"20",paraId:19,tocIndex:8},{value:" ",paraId:20,tocIndex:9},{value:"number",paraId:20,tocIndex:9},{value:" ",paraId:20,tocIndex:9},{value:"可选",paraId:20,tocIndex:9},{value:" ",paraId:20,tocIndex:9},{value:"default:",paraId:20,tocIndex:9},{value:" 2-",paraId:20,tocIndex:9},{value:"[number, number, number, number]",paraId:15},{value:" ",paraId:21,tocIndex:10},{value:"number[]",paraId:21,tocIndex:10},{value:" ",paraId:21,tocIndex:10},{value:"可选",paraId:21,tocIndex:10},{value:" 不限制:_ ",paraId:21,tocIndex:10},{value:" ",paraId:22,tocIndex:11},{value:"string",paraId:22,tocIndex:11},{value:" ",paraId:22,tocIndex:11},{value:"可选",paraId:22,tocIndex:11},{value:" ",paraId:22,tocIndex:11},{value:"default:",paraId:22,tocIndex:11},{value:" image",paraId:22,tocIndex:11},{value:"瓦片数据类型",paraId:23,tocIndex:11},{value:"image 图像类型",paraId:24,tocIndex:11},{value:"arraybuffer 数据类型如 geotiff",paraId:24,tocIndex:11},{value:" ",paraId:25,tocIndex:12},{value:"func",paraId:25,tocIndex:12},{value:" ",paraId:25,tocIndex:12},{value:"可选",paraId:25,tocIndex:12},{value:" _default:",paraId:25,tocIndex:12},{value:"数据栅格时使用,用于将栅格数据格式化为标准数据,自定义数据处理函数",paraId:26,tocIndex:12},{value:" ",paraId:27,tocIndex:13},{value:"Object",paraId:27,tocIndex:13},{value:" ",paraId:27,tocIndex:13},{value:"可选",paraId:27,tocIndex:13},{value:" ",paraId:27,tocIndex:13},{value:"default:",paraId:27,tocIndex:13},{value:" null",paraId:27,tocIndex:13},{value:" ",paraId:28,tocIndex:14},{value:"string",paraId:28,tocIndex:14},{value:" ",paraId:28,tocIndex:14},{value:"必选",paraId:28,tocIndex:14},{value:" ",paraId:28,tocIndex:14},{value:"default:",paraId:28,tocIndex:14},{value:" img",paraId:28,tocIndex:14},{value:"\n图层",paraId:28,tocIndex:14},{value:" ",paraId:29,tocIndex:15},{value:"string",paraId:29,tocIndex:15},{value:" ",paraId:29,tocIndex:15},{value:"必选",paraId:29,tocIndex:15},{value:" ",paraId:29,tocIndex:15},{value:"default:",paraId:29,tocIndex:15},{value:" w",paraId:29,tocIndex:15},{value:" ",paraId:30,tocIndex:16},{value:"string",paraId:30,tocIndex:16},{value:" ",paraId:30,tocIndex:16},{value:"必选",paraId:30,tocIndex:16},{value:" ",paraId:30,tocIndex:16},{value:"default:",paraId:30,tocIndex:16},{value:" tiles",paraId:30,tocIndex:16},{value:"\n服务类型",paraId:30,tocIndex:16},{value:"const rasterSource = new Source(\n  'http://webst01.is.autonavi.com/appmaptile?style=6&x={x}&y={y}&z={z}',\n  {\n    parser: {\n      type: 'rasterTile',\n      tileSize: 256,\n      zoomOffset: 0,\n      extent: [-180, -85.051129, 179, 85.051129],\n    },\n  },\n);\n",paraId:31,tocIndex:16},{value:"瓦片数据集，可以获取当前视野内的瓦片信息, 瓦片状态",paraId:32,tocIndex:18},{value:"const source = layer1.getSource();\nconst tileSet = source.tileset;\n",paraId:33,tocIndex:18},{value:"瓦片是否加载完成",paraId:34,tocIndex:20},{value:"当前瓦片对象",paraId:35,tocIndex:21},{value:"当前瓦片层级；这里的曾经和map 的缩放层级不相等",paraId:36,tocIndex:22},{value:"地图拖动，需要加载新的瓦片时触发",paraId:37,tocIndex:24},{value:"tileSet.on('tiles-load-start', () => {\n  console.log('tile start');\n});\n",paraId:38,tocIndex:24},{value:"所有需要加载的瓦片资源加载完成后触发",paraId:39,tocIndex:25},{value:"tileSet.on('tiles-load-finished', () => {\n  console.log('tile finished');\n});\n",paraId:40,tocIndex:25},{value:"重新加载瓦片，会重新请求数据，适用与动态瓦片场景，如瓦片数据发生了更新，或者瓦片Join 的数据发生了更新",paraId:41,tocIndex:27},{value:"source.reloadAllTile();\n",paraId:42,tocIndex:27},{value:"重新加载特定瓦片的",paraId:43,tocIndex:28},{value:"参数",paraId:44,tocIndex:28},{value:"z 缩放等级",paraId:45,tocIndex:28},{value:"x 瓦片 x 坐标",paraId:45,tocIndex:28},{value:"y 瓦片 y 坐标",paraId:45,tocIndex:28},{value:"source.reloadTileById(z, x, y);\n",paraId:46,tocIndex:28},{value:"根据经纬度范围更新瓦片",paraId:47,tocIndex:29},{value:"参数",paraId:48,tocIndex:29},{value:"extent: 经纬范围 [minLng, minLat, maxLng, maxLat]",paraId:49,tocIndex:29},{value:"zoom: 缩放等级",paraId:49,tocIndex:29},{value:"根据经纬度更新瓦片，经纬度坐标转换成瓦片坐标更新",paraId:50,tocIndex:30},{value:"lng 经度",paraId:51,tocIndex:30},{value:"lat 纬度",paraId:51,tocIndex:30},{value:"zoom 缩放等级",paraId:51,tocIndex:30},{value:"source.reloadTileByLnglat(112, 30, 10);\n",paraId:52,tocIndex:30}]},78378:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(93113);const d=[{value:"source 地理数据处理模块，主要包含数据解析（parser）和数据处理（transforms）。",paraId:0,tocIndex:0},{value:"const source = new Source(data, option);\n",paraId:1,tocIndex:0},{value:"data",paraId:2,tocIndex:0},{value:"option\n",paraId:2,tocIndex:0},{value:"cluster ",paraId:3,tocIndex:0},{value:"boolean",paraId:3,tocIndex:0},{value:" 是否聚合",paraId:3,tocIndex:0},{value:"clusterOptions 聚合配置项",paraId:3,tocIndex:0},{value:"parser 数据解析配置",paraId:3,tocIndex:0},{value:"transforms 数据处理配置",paraId:3,tocIndex:0},{value:"不同 parser 类型对应不同 data 类型",paraId:4,tocIndex:1},{value:"瓦片图层 data 为 url 模板，支持 TMS、WMS、WMTS 数据服务",paraId:5,tocIndex:1},{value:"非瓦片图层 data 为数据对象",paraId:5,tocIndex:1},{value:"source",paraId:6,tocIndex:2},{value:" 通过 ",paraId:6,tocIndex:2},{value:"option",paraId:6,tocIndex:2},{value:" 来描述或处理数据， 其中主要包括 ",paraId:6,tocIndex:2},{value:"parser",paraId:6,tocIndex:2},{value:" 和 ",paraId:6,tocIndex:2},{value:"transforms",paraId:6,tocIndex:2},{value:"。",paraId:6,tocIndex:2},{value:"parser 可以将不同类型的空间数据处理成统一数据格式。空间数据分为矢量数据、栅格数据和瓦片服务三大类：",paraId:7,tocIndex:3},{value:"矢量数据 支持 ",paraId:8,tocIndex:3},{value:"GeoJSON",paraId:9,tocIndex:3},{value:"、",paraId:8,tocIndex:3},{value:"CSV",paraId:10,tocIndex:3},{value:"、",paraId:8,tocIndex:3},{value:"JSON",paraId:11,tocIndex:3},{value:" 类型",paraId:8,tocIndex:3},{value:"栅格数据 支持 ",paraId:8,tocIndex:3},{value:"Raster",paraId:12,tocIndex:3},{value:"、",paraId:8,tocIndex:3},{value:"Image",paraId:13,tocIndex:3},{value:" 类型",paraId:8,tocIndex:3},{value:"瓦片服务 支持 ",paraId:8,tocIndex:3},{value:"MVT",paraId:14,tocIndex:3},{value:"、",paraId:8,tocIndex:3},{value:"RasterTile",paraId:15,tocIndex:3},{value:"、GeoJSON VT 类型",paraId:8,tocIndex:3},{value:"type IParserType =\n  | 'csv'\n  | 'json'\n  | 'geojson'\n  | 'image'\n  | 'raster'\n  | 'rasterTile'\n  | 'mvt'\n  | 'geojsonvt';\n\ninterface IParser {\n  type: IParserType;\n  x?: string;\n  y?: string;\n  x1?: string;\n  y1?: string;\n  coordinates?: string;\n  geometry?: string;\n  [key: string]: any;\n}\n",paraId:16,tocIndex:3},{value:"geojson",paraId:17,tocIndex:4},{value:" 为默认数据格式，可以不设置 parser 参数",paraId:17,tocIndex:4},{value:"layer.source(data);\n",paraId:18,tocIndex:4},{value:"transforms 处理的是标准化后的数据，可进行数据转换、数据统计、网格布局、数据聚合等数据操作，处理完后返回的也是标准数据。标准化后的数据结构包括 coordinates 地理坐标字段，以及其他属性字段。",paraId:19,tocIndex:5},{value:'[\n  {\n    "coordinates": [[]], // 地理坐标字段\n    "_id": "122", // 标准化之后新增字段\n    "name": "test",\n    "value": 1\n    // ....\n  }\n]\n',paraId:20,tocIndex:5},{value:"目前 grid、hexagon 两种热力图支持使用数据处理方法 transforms 配置项",paraId:21,tocIndex:5},{value:"type 数据处理类型",paraId:22,tocIndex:5},{value:"transforms cfg  数据处理配置项",paraId:22,tocIndex:5},{value:"生成方格网布局，根据数据字段统计，主要在网格热力图中使用",paraId:23,tocIndex:6},{value:"type: 'grid'",paraId:24,tocIndex:6},{value:"size: 网格半径",paraId:24,tocIndex:6},{value:"field: 数据统计字段",paraId:24,tocIndex:6},{value:"method: 聚合方法，有 count、max、min、sum、mean 5 个统计维度",paraId:24,tocIndex:6},{value:"layer.source(data, {\n  transforms: [\n    {\n      type: 'grid',\n      size: 15000,\n      field: 'v',\n      method: 'sum',\n    },\n  ],\n});\n",paraId:25,tocIndex:6},{value:"生成六边形网格布局，根据数据字段统计",paraId:26,tocIndex:7},{value:"type: 'hexagon'",paraId:27,tocIndex:7},{value:"size: 网格半径",paraId:27,tocIndex:7},{value:"field: 数据统计字段",paraId:27,tocIndex:7},{value:"method: 聚合方法，有 count、max、min、sum、mean 5 个统计维度",paraId:27,tocIndex:7},{value:"数据连接，业务中跟多情况是地理数据和业务数据分开的两套数据，我们可与通过 join 方法将地理数据和业务数据进行关联。",paraId:28,tocIndex:8},{value:"配置项",paraId:29,tocIndex:8},{value:"type: join",paraId:30,tocIndex:8},{value:"sourceField: 需要连接的业务数据字段名称",paraId:30,tocIndex:8},{value:"data: 需要连接的数据源，仅支持 json 格式",paraId:30,tocIndex:8},{value:"targetField: 关联的地理数据字段名称",paraId:30,tocIndex:8},{value:"// geoData 是地理数据\nconst geoData = {\n  type: 'FeatureCollection',\n  features: [\n    {\n      type: 'Feature',\n      properties: {\n        city: '北京',\n      },\n      geometry: {},\n    },\n  ],\n};\n\n// customData 属性数据或者业务数据\nconst customData = [\n  {\n    name: '北京',\n    value: 13,\n  },\n  {\n    name: '天津',\n    value: 20,\n  },\n];\n\n// 通过 join 方法我们就可以将两个数据连接到一起\n\nlayer\n  .source(geoData, {\n    transforms: [\n      {\n        type: 'join',\n        sourceField: 'name', //customData 对应字段名\n        targetField: 'city', // geoData 对应字段名，绑定到的地理数据\n        data: customData,\n      },\n    ],\n  })\n  .color('value'); // 可以采用 customData 的 value 字段进行数据到颜色的映射\n",paraId:31,tocIndex:8},{value:"cluster: ",paraId:32,tocIndex:9},{value:"boolean",paraId:32,tocIndex:9},{value:"cluster",paraId:33,tocIndex:9},{value:" 表示是否对数据进行聚合操作， 目前只有点图层支持。",paraId:33,tocIndex:9},{value:"radius: 聚合半径 ",paraId:34,tocIndex:10},{value:"number",paraId:34,tocIndex:10},{value:" default 40",paraId:34,tocIndex:10},{value:"minZoom: 最小聚合缩放等级 ",paraId:34,tocIndex:10},{value:"number",paraId:34,tocIndex:10},{value:" default 0",paraId:34,tocIndex:10},{value:"maxZoom: 最大聚合缩放等级 ",paraId:34,tocIndex:10},{value:"number",paraId:34,tocIndex:10},{value:" default 16",paraId:34,tocIndex:10},{value:"聚合图使用案例",paraId:35},{value:"聚合图使用，获取聚合节点的原始数据",paraId:36,tocIndex:12},{value:"参数：\nid 聚合节点的 cluster_id",paraId:37,tocIndex:12},{value:"layer.on('click', (e) => {\n  console.log(source.getClustersLeaves(e.feature.cluster_id));\n});\n",paraId:38,tocIndex:12},{value:"更新 source 数据",paraId:39,tocIndex:13},{value:"data: 数据同 source 初始化参数",paraId:40,tocIndex:14},{value:"option: 配置项同 source 初始化参数",paraId:40,tocIndex:14},{value:"根据 featureID 获取 feature 要素",paraId:41,tocIndex:15},{value:"id featureId，L7 内部编码的唯一要素 ID",paraId:42,tocIndex:16},{value:"const source = layer.getSource();\nsource.getFeatureById(1);\n",paraId:43,tocIndex:16},{value:"根据 ID 更新 source 的属性数据，会触发从新渲染",paraId:44,tocIndex:17},{value:"id featureId，L7 内部编码的唯一要素 ID",paraId:45,tocIndex:18},{value:"Properties 需要更新属性数据，merge 操作",paraId:45,tocIndex:18},{value:"const source = layer.getSource();\nlayer.on('click', (e) => {\n  source.updateFeaturePropertiesById(e.featureId, {\n    name: Math.random() * 10,\n  });\n});\n",paraId:46,tocIndex:18},{value:"根据属性的 key、value 获取要素 L7 编码 featureId，确保该属性的 value 是唯一值，如存在多个返回第一个。",paraId:47,tocIndex:19},{value:"key: 属性字段",paraId:48,tocIndex:20},{value:"value: 对应的值",paraId:48,tocIndex:20},{value:"const source = layer.getSource();\nsource.getFeatureId('name', '张三');\n",paraId:49,tocIndex:20},{value:"如果数据发生改变，可以需要更新数据。\n可以通过调用 ",paraId:50,tocIndex:21},{value:"layer",paraId:50,tocIndex:21},{value:" 的 ",paraId:50,tocIndex:21},{value:"setData",paraId:50,tocIndex:21},{value:" 方法实现数据的更新。",paraId:50,tocIndex:21},{value:"具体见 ",paraId:51,tocIndex:21},{value:"Layer",paraId:52,tocIndex:21},{value:"layer.setData(data);\n",paraId:53,tocIndex:21},{value:"瓦片数据集，可以获取当前视野内的瓦片信息, 瓦片状态",paraId:54,tocIndex:23},{value:"const source = layer1.getSource();\nconst tileSet = source.tileset;\n",paraId:55,tocIndex:23},{value:"瓦片是否加载完成",paraId:56,tocIndex:25},{value:"当前瓦片对象",paraId:57,tocIndex:26},{value:"当前瓦片层级；这里的曾经和map 的缩放层级不相等",paraId:58,tocIndex:27},{value:"地图拖动，需要加载新的瓦片时触发",paraId:59,tocIndex:29},{value:"tileSet.on('tiles-load-start', () => {\n  console.log('tile start');\n});\n",paraId:60,tocIndex:29},{value:"所有需要加载的瓦片资源加载完成后触发",paraId:61,tocIndex:30},{value:"tileSet.on('tiles-load-finished', () => {\n  console.log('tile finished');\n});\n",paraId:62,tocIndex:30},{value:"重新加载瓦片，会重新请求数据，适用与动态瓦片场景，如瓦片数据发生了更新，或者瓦片Join 的数据发生了更新",paraId:63,tocIndex:32},{value:"source.reloadAllTile();\n",paraId:64,tocIndex:32},{value:"重新加载特定瓦片的",paraId:65,tocIndex:33},{value:"参数",paraId:66,tocIndex:33},{value:"z 缩放等级",paraId:67,tocIndex:33},{value:"x 瓦片 x 坐标",paraId:67,tocIndex:33},{value:"y 瓦片 y 坐标",paraId:67,tocIndex:33},{value:"source.reloadTileById(z, x, y);\n",paraId:68,tocIndex:33},{value:"根据经纬度范围更新瓦片",paraId:69,tocIndex:34},{value:"参数",paraId:70,tocIndex:34},{value:"extent: 经纬范围 [minLng, minLat, maxLng, maxLat]",paraId:71,tocIndex:34},{value:"zoom: 缩放等级",paraId:71,tocIndex:34},{value:"根据经纬度更新瓦片，经纬度坐标转换成瓦片坐标更新",paraId:72,tocIndex:35},{value:"lng 经度",paraId:73,tocIndex:35},{value:"lat 纬度",paraId:73,tocIndex:35},{value:"zoom 缩放等级",paraId:73,tocIndex:35},{value:"source.reloadTileByLnglat(112, 30, 10);\n",paraId:74,tocIndex:35},{value:"JSON 数据格式解析",paraId:75},{value:"CSV 数据格式解析",paraId:76},{value:"栅格数据类型",paraId:77},{value:"Image 数据格式解析",paraId:78}]},15664:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(90143);const d=[{value:" ",paraId:0,tocIndex:0},{value:"string",paraId:0,tocIndex:0},{value:" ",paraId:0,tocIndex:0},{value:"required",paraId:0,tocIndex:0},{value:" ",paraId:0,tocIndex:0},{value:"只有矢量图层生效，用于设置矢量图层的数据源。",paraId:1,tocIndex:0},{value:"🌟 一般矢量服务返回的数据中存在多个图层的数据，我们需要从中进行选取。",paraId:2,tocIndex:0},{value:"const layer = new PointLayer({\n  sourceLayer: 'city',\n});\n",paraId:3,tocIndex:0},{value:" ",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:" ",paraId:4,tocIndex:1},{value:"optional",paraId:4,tocIndex:1},{value:" ",paraId:4,tocIndex:1},{value:"default:",paraId:4,tocIndex:1},{value:" 自动数字编号",paraId:4,tocIndex:1},{value:"只有矢量图层生效，用于指定矢量图层的编码 ",paraId:5,tocIndex:1},{value:"id",paraId:5,tocIndex:1},{value:"。",paraId:5,tocIndex:1},{value:"🌟 编码 ",paraId:6,tocIndex:1},{value:"id",paraId:6,tocIndex:1},{value:" 用于在图层高亮时使用。",paraId:6,tocIndex:1},{value:"const layer = new PointLayer({\n  featureId: 'id',\n});\n",paraId:7,tocIndex:1}]},2478:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(85138);const d=[{value:"瓦片图层的 ",paraId:0},{value:"style",paraId:0},{value:" 参数和使用的图层相关。如矢量点图层，",paraId:0},{value:"style",paraId:0},{value:" 的参数就是对应点图层的参数。",paraId:0},{value:"设置数据映射的定义域。",paraId:1,tocIndex:1},{value:"\nps：固定值域为 ",paraId:1,tocIndex:1},{value:"[0, 1]",paraId:1,tocIndex:1},{value:"，我们将传入的值（domain） 映射到值域 ",paraId:1,tocIndex:1},{value:"[0, 1]",paraId:1,tocIndex:1},{value:" 后从 ",paraId:1,tocIndex:1},{value:"rampColor",paraId:1,tocIndex:1},{value:" 构建的色带上取颜色，rgb 多通道栅格不支持。",paraId:1,tocIndex:1},{value:"clampLow",paraId:2,tocIndex:2},{value:" 的默认值为 ",paraId:2,tocIndex:2},{value:"false",paraId:2,tocIndex:2},{value:"，设置为 ",paraId:2,tocIndex:2},{value:"true",paraId:2,tocIndex:2},{value:"，低于 ",paraId:2,tocIndex:2},{value:"domain",paraId:2,tocIndex:2},{value:" 的数据将不显示。",paraId:2,tocIndex:2},{value:"clampHigh",paraId:2,tocIndex:2},{value:" 的默认值为 ",paraId:2,tocIndex:2},{value:"false",paraId:2,tocIndex:2},{value:"，设置为 ",paraId:2,tocIndex:2},{value:"true",paraId:2,tocIndex:2},{value:"，高于 ",paraId:2,tocIndex:2},{value:"domain",paraId:2,tocIndex:2},{value:" 的数据将不显示。",paraId:2,tocIndex:2},{value:"ps：rgb 多通道栅格不支持",paraId:3,tocIndex:2},{value:"colors  颜色数组",paraId:4,tocIndex:3},{value:"positions 数据区间",paraId:4,tocIndex:3},{value:"配置值域映射颜色的色带，值域的范围为 ",paraId:5,tocIndex:3},{value:"[0 - 1]",paraId:5,tocIndex:3},{value:", 对应的我们需要为每一个 ",paraId:5,tocIndex:3},{value:"position",paraId:5,tocIndex:3},{value:" 位置设置一个颜色值。",paraId:5,tocIndex:3},{value:"⚠️ colors, positions 的长度要相同",paraId:6,tocIndex:3},{value:"layer.style({\n  rampColors: {\n    colors: ['#FF4818', '#F7B74A', '#FFF598', '#91EABC', '#2EA9A1', '#206C7C'],\n    positions: [0, 0.2, 0.4, 0.6, 0.8, 1.0],\n  },\n});\n",paraId:7,tocIndex:3},{value:"ps：⚠️ color, position 的长度要相同，rgb 多通道栅格不支持",paraId:8,tocIndex:3},{value:"矢量图层的 ",paraId:9,tocIndex:4},{value:"style",paraId:9,tocIndex:4},{value:" 样式和普通图层保持一致。",paraId:9,tocIndex:4},{value:"🌟 数据栅格支持图层事件，目前图片栅格暂时不支持图层事件。",paraId:10,tocIndex:5},{value:"🌟 数据栅格瓦片",paraId:11,tocIndex:6},{value:"// 绑定事件的方式和普通图层保持一致\nlayer.on('click', e => {...})\n",paraId:12,tocIndex:6},{value:"🌟 数据栅格瓦片\n数据栅格瓦片的事件参数相比于普通图层的事件返回了新的参数。",paraId:13,tocIndex:7},{value:"🌟 数据栅格瓦片\n鼠标事件位置的瓦片的实际数值。",paraId:14,tocIndex:8}]},17900:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(4021);const d=[{value:"L7",paraId:0},{value:" 矢量瓦片除了可以时候后端提供的瓦片服务之外，同时提供了 ",paraId:0},{value:"geojson-vt",paraId:0},{value:" 瓦片切分方案，使得前端在没有后端支持的情况下也能使用矢量瓦片。",paraId:0},{value:"import { PolygonLayer } from '@antv/l7';\nfetch('https://gw.alipayobjects.com/os/bmw-prod/2b7aae6e-5f40-437f-8047-100e9a0d2808.json')\n  .then((d) => d.json())\n  .then((data) => {\n    const source = new Source(data, {\n      parser: { type: 'geojsonvt', maxZoom: 9 },\n    });\n    const polygon = new PolygonLayer({ featureId: 'COLOR' }).source(source).color('red');\n  });\n",paraId:1,tocIndex:0},{value:"在使用前端瓦片切分的时候我们不再需要为瓦片图层指定数据源。",paraId:2,tocIndex:1},{value:"在使用前端瓦片切分的矢量瓦片时，",paraId:3,tocIndex:2},{value:"source",paraId:3,tocIndex:2},{value:" 方法接收的不在时数据服务的地址，而是标准的 ",paraId:3,tocIndex:2},{value:"GeoJSON",paraId:3,tocIndex:2},{value:" 数据。",paraId:3,tocIndex:2},{value:"在使用前端瓦片切分的时候我们需要将 ",paraId:4,tocIndex:3},{value:"source parser",paraId:4,tocIndex:3},{value:" 的类型设置为 ",paraId:4,tocIndex:3},{value:"geojsonvt",paraId:4,tocIndex:3},{value:"。",paraId:4,tocIndex:3},{value:"const source = new Source(data, {\n  parser: {\n    type: 'geojsonvt',\n    maxZoom: 9,\n    geojsonvtOptions: {},\n  },\n});\n",paraId:5,tocIndex:3},{value:"geojsonOptions",paraId:6,tocIndex:3},{value:" 支持如下参数:",paraId:6,tocIndex:3},{value:"参数",paraId:7,tocIndex:3},{value:"类型",paraId:7,tocIndex:3},{value:"默认值",paraId:7,tocIndex:3},{value:"描述",paraId:7,tocIndex:3},{value:"maxZoom",paraId:7,tocIndex:3},{value:"number",paraId:7,tocIndex:3},{value:"14",paraId:7,tocIndex:3},{value:"max zoom to preserve detail on",paraId:7,tocIndex:3},{value:"indexMaxZoom",paraId:7,tocIndex:3},{value:"number",paraId:7,tocIndex:3},{value:"5",paraId:7,tocIndex:3},{value:"max zoom in the tile index",paraId:7,tocIndex:3},{value:"indexMaxPoints",paraId:7,tocIndex:3},{value:"number",paraId:7,tocIndex:3},{value:"100000",paraId:7,tocIndex:3},{value:"max number of points per tile in the tile index",paraId:7,tocIndex:3},{value:"tolerance",paraId:7,tocIndex:3},{value:"number",paraId:7,tocIndex:3},{value:"3",paraId:7,tocIndex:3},{value:"simplification tolerance (higher means simpler)",paraId:7,tocIndex:3},{value:"extent",paraId:7,tocIndex:3},{value:"number",paraId:7,tocIndex:3},{value:"4096",paraId:7,tocIndex:3},{value:"tile extent",paraId:7,tocIndex:3},{value:"buffer",paraId:7,tocIndex:3},{value:"number",paraId:7,tocIndex:3},{value:"64",paraId:7,tocIndex:3},{value:"tile buffer on each side",paraId:7,tocIndex:3},{value:"lineMetrics",paraId:7,tocIndex:3},{value:"boolean",paraId:7,tocIndex:3},{value:"false",paraId:7,tocIndex:3},{value:"whether to calculate line metrics",paraId:7,tocIndex:3},{value:"promoteId",paraId:7,tocIndex:3},{value:"string",paraId:7,tocIndex:3},{value:"null",paraId:7,tocIndex:3},{value:"null",paraId:7,tocIndex:3},{value:"name of a feature property to be promoted to feature.id",paraId:7,tocIndex:3},{value:"generateId",paraId:7,tocIndex:3},{value:"boolean",paraId:7,tocIndex:3},{value:"true",paraId:7,tocIndex:3},{value:"whether to generate feature ids. Cannot be used with promoteId",paraId:7,tocIndex:3},{value:"debug",paraId:7,tocIndex:3},{value:"0, 1 or 2",paraId:7,tocIndex:3},{value:"0",paraId:7,tocIndex:3},{value:"logging level (0, 1 or 2)",paraId:7,tocIndex:3}]},85472:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(19576);const d=[{value:"L7",paraId:0},{value:" 的栅格图层支持加载 ",paraId:0},{value:"TMS",paraId:0},{value:"、",paraId:0},{value:"WMS",paraId:0},{value:"、",paraId:0},{value:"WMTS",paraId:0},{value:" 等多种格式的图片瓦片，同时也支持 ",paraId:0},{value:"Tiff",paraId:0},{value:"、",paraId:0},{value:"Lerc",paraId:0},{value:" 等多种格式的数据栅格瓦片。",paraId:0},{value:"分类",paraId:1},{value:"Layer",paraId:1},{value:"parserType",paraId:1},{value:"dataType",paraId:1},{value:"描述",paraId:1},{value:"栅格瓦片",paraId:1},{value:"RasterLayer",paraId:1},{value:"rasterTile",paraId:1},{value:"image",paraId:1},{value:"、",paraId:1},{value:"/",paraId:1},{value:"图片栅格",paraId:1},{value:"栅格瓦片",paraId:1},{value:"RasterLayer",paraId:1},{value:"rasterTile",paraId:1},{value:"arraybuffer",paraId:1},{value:"数据栅格",paraId:1},{value:"栅格瓦片",paraId:1},{value:"RasterLayer",paraId:1},{value:"rasterTile",paraId:1},{value:"rgb",paraId:1},{value:"彩色遥感影像栅格",paraId:1},{value:"🌟 目前只支持 3857 坐标系",paraId:2},{value:"矢量瓦片的数据源需要传入矢量数据的瓦片服务以及对应的配置参数。",paraId:3,tocIndex:0},{value:"数据服务的路径处理支持单服务和多服务的写法，还支持同时请求多文件。",paraId:4,tocIndex:1},{value:"单服务器 向一台服务器请求瓦片数据。",paraId:5,tocIndex:1},{value:"多服务器 向多台服务器请求同一份服务的瓦片数据。",paraId:6,tocIndex:1},{value:"使用大括号的写法请求设置多服务器，如 ",paraId:7,tocIndex:1},{value:"{1-3}",paraId:7,tocIndex:1},{value:"、",paraId:7,tocIndex:1},{value:"{a-c}",paraId:7,tocIndex:1},{value:"。",paraId:7,tocIndex:1},{value:"请求多文件 同时请求多份瓦片服务的瓦片数据。",paraId:8,tocIndex:1},{value:"使用数组的方式设置多服务。",paraId:9,tocIndex:1},{value:"目前请求多文件的格式只有栅格瓦片支持。",paraId:9,tocIndex:1},{value:"import { Source } from '@antv/l7'\n// 单服务器\nconst source = new Source('http://webst01.is.autonavi.com/appmaptile?style=6&x={x}&y={y}&z={z}', {...})\n\n// 多服务器\nconst source = new Source('http://webst0{1-4}.is.autonavi.com/appmaptile?style=6&x={x}&y={y}&z={z}', {...})\n\n// 请求多文件\nconst urls = [\n  'https://ganos.oss-cn-hangzhou.aliyuncs.com/m2/l7/tiff_jx/{z}/{x}/{y}.tiff',\n  'https://ganos.oss-cn-hangzhou.aliyuncs.com/m2/l7/tiff_jx/{z}/{x}/{y}.tiff',\n]\n\nconst urls = [\n  {\n    url: 'https://ganos.oss-cn-hangzhou.aliyuncs.com/m2/l7/tiff_jx/{z}/{x}/{y}.tiff',\n    bands: [0]\n  },\n  {\n    url: 'https://ganos.oss-cn-hangzhou.aliyuncs.com/m2/l7/tiff_jx/{z}/{x}/{y}.tiff'\n  },\n  ...\n]\nconst tileSource = new Source(urls, {...});\n",paraId:10,tocIndex:1},{value:"通过配置 ",paraId:11,tocIndex:2},{value:"parser",paraId:11,tocIndex:2},{value:" 中的参数，我们可以指定不同的瓦片类型以及瓦片服务的参数。",paraId:11,tocIndex:2},{value:"const source = new Source(url, {\n  parser: {...}\n})\n",paraId:12,tocIndex:2},{value:"参数",paraId:13,tocIndex:2},{value:"类型",paraId:13,tocIndex:2},{value:"默认值",paraId:13,tocIndex:2},{value:"描述",paraId:13,tocIndex:2},{value:"type",paraId:13,tocIndex:2},{value:"string",paraId:13,tocIndex:2},{value:"/",paraId:13,tocIndex:2},{value:"描述不同类型的瓦片",paraId:13,tocIndex:2},{value:"tileSize",paraId:13,tocIndex:2},{value:"number",paraId:13,tocIndex:2},{value:"256",paraId:13,tocIndex:2},{value:"请求的瓦片尺寸",paraId:13,tocIndex:2},{value:"minZoom",paraId:13,tocIndex:2},{value:"number",paraId:13,tocIndex:2},{value:"0",paraId:13,tocIndex:2},{value:"请求瓦片的最小层级",paraId:13,tocIndex:2},{value:"maxZoom",paraId:13,tocIndex:2},{value:"number",paraId:13,tocIndex:2},{value:"Infinity",paraId:13,tocIndex:2},{value:"请求瓦片的最大层级",paraId:13,tocIndex:2},{value:"zoomOffset",paraId:13,tocIndex:2},{value:"number",paraId:13,tocIndex:2},{value:"0",paraId:13,tocIndex:2},{value:"请求瓦片层级的偏移量",paraId:13,tocIndex:2},{value:"extent",paraId:13,tocIndex:2},{value:"[number, number, number, number]",paraId:13,tocIndex:2},{value:"[-Infinity,-Infinity,Infinity,Infinity,]",paraId:13,tocIndex:2},{value:"请求瓦片的边界",paraId:13,tocIndex:2},{value:"updateStrategy",paraId:13,tocIndex:2},{value:"UpdateTileStrategy",paraId:13,tocIndex:2},{value:"replace",paraId:13,tocIndex:2},{value:"瓦片的替换策略",paraId:13,tocIndex:2},{value:"type UpdateTileStrategy = 'realtime' | 'overlap' | 'replace';\n",paraId:14,tocIndex:2},{value:"关于不同的栅格瓦片使用不同的 ",paraId:15,tocIndex:2},{value:"parser",paraId:15,tocIndex:2},{value:" 参数。",paraId:15,tocIndex:2},{value:"瓦片类型",paraId:16,tocIndex:2},{value:"type",paraId:16,tocIndex:2},{value:"dataType",paraId:16,tocIndex:2},{value:"描述",paraId:16,tocIndex:2},{value:"TMS",paraId:16,tocIndex:2},{value:"rasterTile",paraId:16,tocIndex:2},{value:"image",paraId:16,tocIndex:2},{value:"图片栅格",paraId:16,tocIndex:2},{value:"WMS",paraId:16,tocIndex:2},{value:"rasterTile",paraId:16,tocIndex:2},{value:"image",paraId:16,tocIndex:2},{value:"图片栅格",paraId:16,tocIndex:2},{value:"WMTS",paraId:16,tocIndex:2},{value:"rasterTile",paraId:16,tocIndex:2},{value:"image",paraId:16,tocIndex:2},{value:"图片栅格",paraId:16,tocIndex:2},{value:"arraybuffer",paraId:16,tocIndex:2},{value:"rasterTile",paraId:16,tocIndex:2},{value:"arraybuffer",paraId:16,tocIndex:2},{value:"数据栅格，单通道",paraId:16,tocIndex:2},{value:"rgb",paraId:16,tocIndex:2},{value:"rasterRgb",paraId:16,tocIndex:2},{value:"arraybuffer",paraId:16,tocIndex:2},{value:"数据栅格，多通道",paraId:16,tocIndex:2},{value:"🌟 ",paraId:17,tocIndex:2},{value:"WMTS",paraId:17,tocIndex:2},{value:" 格式的瓦片有额外的参数。",paraId:17,tocIndex:2},{value:"参数",paraId:18,tocIndex:2},{value:"类型",paraId:18,tocIndex:2},{value:"值",paraId:18,tocIndex:2},{value:"描述",paraId:18,tocIndex:2},{value:"wmtsOptions",paraId:18,tocIndex:2},{value:"IWmtsOptions",paraId:18,tocIndex:2},{value:"/",paraId:18,tocIndex:2},{value:"设置请求参数",paraId:18,tocIndex:2},{value:"IWmtsOptions",paraId:19,tocIndex:2},{value:" 的参数用于拼接 ",paraId:19,tocIndex:2},{value:"url",paraId:19,tocIndex:2},{value:"。",paraId:19,tocIndex:2},{value:"interface IWmtsOptions {\n  layer: string;\n  version?: string;\n  style?: string;\n  format: string;\n  service?: string;\n  tileMatrixset: string;\n}\n",paraId:20,tocIndex:2},{value:"用于指定瓦片服务的解析方式，值为 ",paraId:21,tocIndex:4},{value:"rasterTile",paraId:21,tocIndex:4},{value:" 和 ",paraId:21,tocIndex:4},{value:"mvt",paraId:21,tocIndex:4},{value:"。",paraId:21,tocIndex:4},{value:"rasterTile",paraId:21,tocIndex:4},{value:" 用于栅格瓦片的解析，",paraId:21,tocIndex:4},{value:"mvt",paraId:21,tocIndex:4},{value:" 用于矢量瓦片的解析。",paraId:21,tocIndex:4},{value:"使用 ",paraId:22,tocIndex:5},{value:"dataType",paraId:22,tocIndex:5},{value:" 区分图片栅格和数据栅格，值为 ",paraId:22,tocIndex:5},{value:"image",paraId:22,tocIndex:5},{value:" 和 ",paraId:22,tocIndex:5},{value:"arraybuffer",paraId:22,tocIndex:5},{value:"，默认为 ",paraId:22,tocIndex:5},{value:"image",paraId:22,tocIndex:5},{value:"。",paraId:22,tocIndex:5},{value:"// 设置图片栅格\nlayer.source({\n  'http://webst01.is.autonavi.com/appmaptile?style=6&x={x}&y={y}&z={z}',\n  {\n    parser: {\n      type: 'rasterTile',\n      dataType: 'image',\n      ...\n    }\n  }\n})\n\n// 设置数据栅格\nlayer.source({\n  'http://webst01.is.autonavi.com/appmaptile?style=6&x={x}&y={y}&z={z}',\n  {\n    parser: {\n      type: 'rasterTile',\n      dataType: 'arraybuffer',\n      ...\n    }\n  }\n})\n",paraId:23,tocIndex:5},{value:"设置瓦片数据的请求层级。当地图的缩放层级 ",paraId:24,tocIndex:6},{value:"zoom",paraId:24,tocIndex:6},{value:" 小于 ",paraId:24,tocIndex:6},{value:"minZoom",paraId:24,tocIndex:6},{value:" 后，或 ",paraId:24,tocIndex:6},{value:"zoom",paraId:24,tocIndex:6},{value:" 大于 ",paraId:24,tocIndex:6},{value:"maxZoom",paraId:24,tocIndex:6},{value:" 后将不再请求新的瓦片。",paraId:24,tocIndex:6},{value:"minZoom",paraId:24,tocIndex:6},{value:" 的默认值为 ",paraId:24,tocIndex:6},{value:"-Infinity",paraId:24,tocIndex:6},{value:"。",paraId:24,tocIndex:6},{value:"maxZoom",paraId:24,tocIndex:6},{value:" 的默认值为 ",paraId:24,tocIndex:6},{value:"Infinity",paraId:24,tocIndex:6},{value:"。",paraId:24,tocIndex:6},{value:"设置的值是瓦片服务返回的瓦片大小。",paraId:25,tocIndex:7},{value:"tileSize",paraId:25,tocIndex:7},{value:" 的默认值为 256。",paraId:25,tocIndex:7},{value:"\nps： 该值在生产瓦片的时候确定，我们设置的 ",paraId:25,tocIndex:7},{value:"tileSize",paraId:25,tocIndex:7},{value:" 需要和瓦片服务返回的保持一致。",paraId:25,tocIndex:7},{value:"设置请求瓦片数据的边界， 格式是 ",paraId:26,tocIndex:8},{value:"[minLng, maxLat, maxLng, minLat]",paraId:26,tocIndex:8},{value:"，只会请求范围内的瓦片数据。",paraId:26,tocIndex:8},{value:"设置的值用于改变请求的瓦片数据的层级，通常在移动端可以请求更高一级的瓦片以获取更好的清晰度。\n",paraId:27,tocIndex:9},{value:"zoomOffset",paraId:27,tocIndex:9},{value:" 的默认值为 0",paraId:27,tocIndex:9},{value:" ",paraId:28,tocIndex:10},{value:"IFormat",paraId:28,tocIndex:10},{value:" ",paraId:28,tocIndex:10},{value:"必选",paraId:28,tocIndex:10},{value:" ",paraId:28,tocIndex:10},{value:"format",paraId:29,tocIndex:10},{value:" 方法用于从传入的栅格文件二进制数据中提取波段数据。",paraId:29,tocIndex:10},{value:"第一个参数是栅格文件二进制数据。",paraId:30,tocIndex:10},{value:"第二个参数是第一个参数指定的栅格文件中应该提取的波段，方法参数是我们通过 ",paraId:30,tocIndex:10},{value:"source",paraId:30,tocIndex:10},{value:" 参数传递的 ",paraId:30,tocIndex:10},{value:"data",paraId:30,tocIndex:10},{value:" 数值。",paraId:30,tocIndex:10},{value:"format",paraId:30,tocIndex:10},{value:" 是一个 ",paraId:30,tocIndex:10},{value:"async",paraId:30,tocIndex:10},{value:" 方法。",paraId:30,tocIndex:10},{value:"interface IRasterData {\n  rasterData: HTMLImageElement | Uint8Array | ImageBitmap | null | undefined;\n  width: number;\n  height: number;\n}\ntype IRasterFormat = (\n  data: ArrayBuffer,\n  bands: number[],\n) => Promise<IRasterData | IRasterData[]>;\n\nconst source = new Source(data, {\n  parser: {\n    format: async (data, bands) => {\n      ...\n      return {\n        rasterData: bandData,\n        width: 256;\n        height: 256;\n      }\n    }\n  }\n})\n",paraId:31,tocIndex:10},{value:"单通道 绘制结果由是单一的数值控制，如灰度图，数值对应的颜色可以通过表示配置 ",paraId:32,tocIndex:11},{value:"rampColors",paraId:32,tocIndex:11},{value:" 色带控制。",paraId:32,tocIndex:11},{value:"layer.style({\n  opacity: 0.5,\n});\n",paraId:33,tocIndex:11},{value:"style",paraId:34,tocIndex:12},{value:"类型",paraId:34,tocIndex:12},{value:"描述",paraId:34,tocIndex:12},{value:"默认值",paraId:34,tocIndex:12},{value:"opacity",paraId:34,tocIndex:12},{value:"number",paraId:34,tocIndex:12},{value:"图形的透明度",paraId:34,tocIndex:12},{value:"1",paraId:34,tocIndex:12},{value:"clampLow",paraId:34,tocIndex:12},{value:"boolean",paraId:34,tocIndex:12},{value:"设置为 ",paraId:34,tocIndex:12},{value:"true",paraId:34,tocIndex:12},{value:"，低于 ",paraId:34,tocIndex:12},{value:"domain",paraId:34,tocIndex:12},{value:" 的数据将不显示",paraId:34,tocIndex:12},{value:"false",paraId:34,tocIndex:12},{value:"clampHigh",paraId:34,tocIndex:12},{value:"boolean",paraId:34,tocIndex:12},{value:"设置为 ",paraId:34,tocIndex:12},{value:"true",paraId:34,tocIndex:12},{value:"，高于 ",paraId:34,tocIndex:12},{value:"domain",paraId:34,tocIndex:12},{value:" 的数据将不显示",paraId:34,tocIndex:12},{value:"false",paraId:34,tocIndex:12},{value:"domain",paraId:34,tocIndex:12},{value:"[number, number]",paraId:34,tocIndex:12},{value:"数据映射区间",paraId:34,tocIndex:12},{value:"[ 0, 8000 ]",paraId:34,tocIndex:12},{value:"noDataValue",paraId:34,tocIndex:12},{value:"number",paraId:34,tocIndex:12},{value:"不会显示的值",paraId:34,tocIndex:12},{value:"-9999999",paraId:34,tocIndex:12},{value:"rampColors",paraId:34,tocIndex:12},{value:"IRampColors",paraId:34,tocIndex:12},{value:"值域映射颜色的色带",paraId:34,tocIndex:12},{value:"/",paraId:34,tocIndex:12},{value:"type 类型 支持 `linear','quantize','custom','cat'",paraId:35,tocIndex:13},{value:"colors  颜色数组",paraId:35,tocIndex:13},{value:"positions 数据分段区间，可选，quantize 不需要设置 position，position 为原始数据值",paraId:35,tocIndex:13},{value:"⚠️ 2.13 新增特性",paraId:36,tocIndex:13},{value:"枚举类型色带只支持 0 -255 的整数类型，positions 用来设置枚举",paraId:37,tocIndex:14},{value:"{\n  type:'cat',\n  colors:['#e41a1c','#377eb8','#4daf4a','#984ea3','#ff7f00'],\n  positions:[1,20,101,102,200],\n}\n",paraId:38,tocIndex:14},{value:"等间距只根据数据的区间 domain 进行均匀分段，如 domain [0,10000]，如果分 5 段，每段间距 2000。\n等间距不需要设置 positions，只需要设置colors，根据colors 的长度设置分段数",paraId:39,tocIndex:15},{value:"rampColors: {\n  type:'quantize',\n  colors: ['#f0f9e8','#bae4bc','#7bccc4','#43a2ca','#0868ac']\n}\n",paraId:40,tocIndex:15},{value:"linear 为现有连续类型的加强版，positions 支持设置源数据，不需要转换成 0-1",paraId:41,tocIndex:16},{value:"rampColors: {\n  type:'linear',\n  colors: ['#f0f9e8','#bae4bc','#7bccc4','#43a2ca','#0868ac'],\n  positions [0,200,1000,4000,8000]\n}\n\n⚠️ 兼容 2.13.0 之前版本，未设置type 时，position 值域为 0-1。\n\n\n\n",paraId:42,tocIndex:16},{value:"自定义分段色带区别等间距色带，用户自定义分段间隔。\n自定义 positions 的长度需要比 colors 的长度多1个，同时poisitions",paraId:43,tocIndex:17},{value:"rampColors: {\n  type:'custom',\n  colors: ['#f0f9e8','#bae4bc','#7bccc4','#43a2ca','#0868ac'],\n  positions: [0,200,1000,4000,8000,10000]\n}\n",paraId:44,tocIndex:17}]},39428:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(79088);const d=[{value:"显示瓦片范围和行列号信息，用于测试验证瓦片服务",paraId:0},{value:"import { Scene, TileDebugLayer } from '@antv/l7';\nconst debugerLayer = new TileDebugLayer();\nscene.addLayer(debugerLayer);\n\n",paraId:1}]},83691:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(13237);const d=[{value:"L7",paraId:0,tocIndex:0},{value:" 的矢量瓦片图层复用了普通图层的数据可视化能力，支持对图层的样式进行数据映射。目前矢量瓦片支持了点、线、面、掩模等图层",paraId:0,tocIndex:0},{value:"分类",paraId:1,tocIndex:0},{value:"Layer",paraId:1,tocIndex:0},{value:"parserType",paraId:1,tocIndex:0},{value:"描述",paraId:1,tocIndex:0},{value:"矢量瓦片",paraId:1,tocIndex:0},{value:"PointLayer",paraId:1,tocIndex:0},{value:"parser of PointLayer、",paraId:1,tocIndex:0},{value:"geojsonvt",paraId:1,tocIndex:0},{value:"矢量点图层",paraId:1,tocIndex:0},{value:"矢量瓦片",paraId:1,tocIndex:0},{value:"LineLayer",paraId:1,tocIndex:0},{value:"parser of LineLayer、",paraId:1,tocIndex:0},{value:"geojsonvt",paraId:1,tocIndex:0},{value:"矢量线图层",paraId:1,tocIndex:0},{value:"矢量瓦片",paraId:1,tocIndex:0},{value:"PolygonLayer",paraId:1,tocIndex:0},{value:"parser of PolygonLayer、",paraId:1,tocIndex:0},{value:"geojsonvt",paraId:1,tocIndex:0},{value:"矢量几何体图层",paraId:1,tocIndex:0},{value:"矢量瓦片",paraId:1,tocIndex:0},{value:"MaskLayer",paraId:1,tocIndex:0},{value:"parser of MaskLayer、",paraId:1,tocIndex:0},{value:"geojsonvt",paraId:1,tocIndex:0},{value:"矢量掩模图层",paraId:1,tocIndex:0},{value:"矢量瓦片",paraId:1,tocIndex:0},{value:"TileDebugLayer",paraId:1,tocIndex:0},{value:"/",paraId:1,tocIndex:0},{value:"TileDebugLayer",paraId:1,tocIndex:0},{value:" 不需要执行 ",paraId:1,tocIndex:0},{value:"source",paraId:1,tocIndex:0},{value:" 方法",paraId:1,tocIndex:0},{value:"瓦片图层其他配置项和基础图层 PointLayer、Linelayer、PolygonLayer 保持一致",paraId:2,tocIndex:0},{value:" ",paraId:3,tocIndex:2},{value:"string",paraId:3,tocIndex:2},{value:" ",paraId:3,tocIndex:2},{value:"required",paraId:3,tocIndex:2},{value:" ",paraId:3,tocIndex:2},{value:"只有矢量图层生效，用于设置矢量图层的数据源。",paraId:4,tocIndex:2},{value:"🌟 一般矢量服务返回的数据中存在多个图层的数据，我们需要从中进行选取。",paraId:5,tocIndex:2},{value:"const layer = new PointLayer({\n  sourceLayer: 'city',\n});\n",paraId:6,tocIndex:2},{value:" ",paraId:7,tocIndex:3},{value:"string",paraId:7,tocIndex:3},{value:" ",paraId:7,tocIndex:3},{value:"optional",paraId:7,tocIndex:3},{value:" ",paraId:7,tocIndex:3},{value:"default:",paraId:7,tocIndex:3},{value:" 自动数字编号",paraId:7,tocIndex:3},{value:"只有矢量图层生效，用于指定矢量图层的编码 ",paraId:8,tocIndex:3},{value:"id",paraId:8,tocIndex:3},{value:"。",paraId:8,tocIndex:3},{value:"🌟 编码 ",paraId:9,tocIndex:3},{value:"id",paraId:9,tocIndex:3},{value:" 用于在图层高亮时使用。",paraId:9,tocIndex:3},{value:"const layer = new PointLayer({\n  featureId: 'id',\n});\n",paraId:10,tocIndex:3},{value:"矢量瓦片的数据源需要传入矢量数据的瓦片服务以及对应的配置参数。",paraId:11,tocIndex:4},{value:"数据服务的路径支持单服务和多服务的写法。",paraId:12,tocIndex:5},{value:"单服务器 向一台服务器请求瓦片数据。",paraId:13,tocIndex:5},{value:"多服务器 向多台服务器请求同一份服务的瓦片数据。",paraId:14,tocIndex:5},{value:"使用大括号的写法请求设置多服务器，如 ",paraId:15,tocIndex:5},{value:"{1-3}",paraId:15,tocIndex:5},{value:"、",paraId:15,tocIndex:5},{value:"{a-c}",paraId:15,tocIndex:5},{value:"。",paraId:15,tocIndex:5},{value:"// 单服务器\nconst source = new Source('http://webst01.is.autonavi.com/appmaptile?style=6&x={x}&y={y}&z={z}', {...})\n\n// 多服务器\nconst source = new Source('http://webst0{1-4}.is.autonavi.com/appmaptile?style=6&x={x}&y={y}&z={z}', {...})\n",paraId:16,tocIndex:5},{value:"关于配置参数我们需要关系的是里面 ",paraId:17,tocIndex:6},{value:"parser",paraId:17,tocIndex:6},{value:" 字段对应的参数。",paraId:17,tocIndex:6},{value:"const source = new Source(url, {\n  parser: {...}\n})\n",paraId:18,tocIndex:6},{value:"参数",paraId:19,tocIndex:6},{value:"类型",paraId:19,tocIndex:6},{value:"默认值",paraId:19,tocIndex:6},{value:"描述",paraId:19,tocIndex:6},{value:"type",paraId:19,tocIndex:6},{value:"string",paraId:19,tocIndex:6},{value:"/",paraId:19,tocIndex:6},{value:"固定值为 ",paraId:19,tocIndex:6},{value:"mvt",paraId:19,tocIndex:6},{value:"tileSize",paraId:19,tocIndex:6},{value:"number",paraId:19,tocIndex:6},{value:"256",paraId:19,tocIndex:6},{value:"请求的瓦片尺寸",paraId:19,tocIndex:6},{value:"minZoom",paraId:19,tocIndex:6},{value:"number",paraId:19,tocIndex:6},{value:"0",paraId:19,tocIndex:6},{value:"请求瓦片的最小层级",paraId:19,tocIndex:6},{value:"maxZoom",paraId:19,tocIndex:6},{value:"number",paraId:19,tocIndex:6},{value:"Infinity",paraId:19,tocIndex:6},{value:"请求瓦片的最大层级",paraId:19,tocIndex:6},{value:"zoomOffset",paraId:19,tocIndex:6},{value:"number",paraId:19,tocIndex:6},{value:"0",paraId:19,tocIndex:6},{value:"请求瓦片层级的偏移量",paraId:19,tocIndex:6},{value:"extent",paraId:19,tocIndex:6},{value:"[number, number, number, number]",paraId:19,tocIndex:6},{value:"[-Infinity,-Infinity,Infinity,Infinity,]",paraId:19,tocIndex:6},{value:"请求瓦片的边界",paraId:19,tocIndex:6},{value:"updateStrategy",paraId:19,tocIndex:6},{value:"UpdateTileStrategy",paraId:19,tocIndex:6},{value:"replace",paraId:19,tocIndex:6},{value:"瓦片的替换策略",paraId:19,tocIndex:6},{value:"type UpdateTileStrategy = 'realtime' | 'overlap' | 'replace';\n",paraId:20,tocIndex:6},{value:"🌟 矢量瓦片推荐复用 Source",paraId:21,tocIndex:6},{value:"const vectorSource = new Source(\n  'https://ganos.oss-cn-hangzhou.aliyuncs.com/m2/rs_l7/{z}/{x}/{y}.pbf',\n  {\n    parser: {\n      type: 'mvt',\n      maxZoom: 9,\n      extent: [-180, -85.051129, 179, 85.051129],\n    },\n  },\n);\n// 复用\nlayer1.source(vectorSource);\nlayer2.source(vectorSource);\n",paraId:22,tocIndex:6}]},71183:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(34646);const d=[{value:"Error: Cannot apply @injectable decorator multiple times.\n",paraId:0,tocIndex:0},{value:"🌟 解决方法：",paraId:1,tocIndex:0},{value:"\n删除 ",paraId:1,tocIndex:0},{value:"node_modules",paraId:1,tocIndex:0},{value:" 下所有不同版本的 ",paraId:1,tocIndex:0},{value:"L7",paraId:1,tocIndex:0},{value:" 包，重新安装启动即可。",paraId:1,tocIndex:0},{value:"初始化的时候可以在 ",paraId:2,tocIndex:1},{value:"map",paraId:2,tocIndex:1},{value:" 配置项设置",paraId:2,tocIndex:1},{value:"高德地图可查看 ",paraId:3,tocIndex:1},{value:"https://lbs.amap.com/api/javascript-api/reference/map",paraId:3,tocIndex:1},{value:"mapbox ",paraId:3,tocIndex:1},{value:"https://docs.mapbox.com/mapbox-gl-js/api/#map",paraId:3,tocIndex:1},{value:"加载完成后设置\n调用 ",paraId:4,tocIndex:1},{value:"scene",paraId:4,tocIndex:1},{value:" 的 ",paraId:4,tocIndex:1},{value:"setMapStatus",paraId:5,tocIndex:1},{value:" 方法",paraId:4,tocIndex:1},{value:"浏览器存在 ",paraId:6,tocIndex:2},{value:"webgl",paraId:6,tocIndex:2},{value:" 实例上限，一般浏览器为 16 个，因此浏览器中可以存在的地图实例是有限的。",paraId:6,tocIndex:2},{value:"在销毁地图后需要调用 ",paraId:6,tocIndex:2},{value:"scene.destroy();",paraId:6,tocIndex:2},{value:" 对 ",paraId:6,tocIndex:2},{value:"webgl",paraId:6,tocIndex:2},{value:" 实例进行销毁。",paraId:6,tocIndex:2}]},49605:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(36818);const d=[{value:"目前L7支持的数据格式有 ",paraId:0,tocIndex:0},{value:"GeoJSON",paraId:0,tocIndex:0},{value:"，",paraId:0,tocIndex:0},{value:"CSV",paraId:0,tocIndex:0},{value:"，",paraId:0,tocIndex:0},{value:"JSON",paraId:0,tocIndex:0},{value:"，",paraId:0,tocIndex:0},{value:"Image",paraId:0,tocIndex:0},{value:"。",paraId:0,tocIndex:0},{value:"GeoJSON",paraId:1,tocIndex:0},{value:" 支持点、线、面等所有的标准空间数据格式。",paraId:1,tocIndex:0},{value:"CSV",paraId:2,tocIndex:0},{value:" 支持点、线段、弧线等数据类型。",paraId:2,tocIndex:0},{value:"JSON",paraId:3,tocIndex:0},{value:" 支持简单的点、线，面数据类型，不支持多点，多线的，多面数据格式。",paraId:3,tocIndex:0},{value:"GeoJSON",paraId:4,tocIndex:1},{value:" 是一种对各种地理数据结构进行编码的格式。GeoJSON对象可以表示几何、特征或者特征集合。GeoJSON支持下面几何类型：点、线、面、多点、多线、多面和几何集合。GeoJSON里的特征包含一个几何对象和其他属性，特征集合表示一系列特征。",paraId:4,tocIndex:1},{value:'{\n  "type": "FeatureCollection",\n  "features": [\n    {\n      "type": "Feature",\n      "properties": {},\n      "geometry": {\n        "type": "Polygon",\n        "coordinates": [\n          [\n            [110.478515625, 32.76880048488168],\n            [117.68554687499999, 32.76880048488168],\n            [117.68554687499999, 37.64903402157866]\n          ]\n        ]\n      }\n    }\n  ]\n}\n',paraId:5,tocIndex:1},{value:"turfjs",paraId:6,tocIndex:2},{value:":  地理数据计算，处理，统计，分析的Javascript 库",paraId:6,tocIndex:2},{value:"http://geojson.io/",paraId:7,tocIndex:3},{value:"    可以在线查看，绘制，修改GeoJSON数据",paraId:7,tocIndex:3},{value:"https://mapshaper.org/",paraId:8,tocIndex:3},{value:"  可以查看较大的geojson，还能够简化GeoJSON数据",paraId:8,tocIndex:3},{value:"geojson, svg下载",paraId:9,tocIndex:5},{value:"https://img.hcharts.cn/mapdata/",paraId:10,tocIndex:6}]},57397:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(81796);const d=[{value:"选择一个任意一个你想看的 ",paraId:0,tocIndex:0},{value:"demo",paraId:0,tocIndex:0},{value:"。",paraId:0,tocIndex:0},{value:"你可能没有注意到，代码区的上方有一排工具按钮。",paraId:1,tocIndex:0},{value:"点击左侧第三个按钮，你就进入了 ",paraId:2,tocIndex:1},{value:"codesandbox",paraId:2,tocIndex:1},{value:"。",paraId:2,tocIndex:1},{value:"你发现你进入了一个在线的代码编辑器，在这里面你可以修改代码，并且能够随时看到效果。",paraId:3,tocIndex:1},{value:"你可能想说我就想本地跑起来，不想在线修改。",paraId:4,tocIndex:1},{value:"当然是是可以的。",paraId:5,tocIndex:1},{value:"在 ",paraId:6,tocIndex:2},{value:"codesandbox",paraId:6,tocIndex:2},{value:" 的文件目录工具有下载按钮，参照图中红色部分。",paraId:6,tocIndex:2},{value:"点击下载你可以把这个 ",paraId:7,tocIndex:2},{value:"demo",paraId:7,tocIndex:2},{value:" 的源码下载到本地。",paraId:7,tocIndex:2},{value:"解压项目，进入项目目录。",paraId:8,tocIndex:3},{value:"安装环境依赖",paraId:9,tocIndex:3},{value:"如果不知道 ",paraId:10,tocIndex:3},{value:"yarn",paraId:10,tocIndex:3},{value:" 可能需要补充一下前端知识了，如果没有 ",paraId:10,tocIndex:3},{value:"yarn",paraId:10,tocIndex:3},{value:" 环境你需要安装一下。",paraId:10,tocIndex:3},{value:"yarn install\n",paraId:11,tocIndex:3},{value:"启动项目",paraId:12,tocIndex:3},{value:"yarn start\n",paraId:13,tocIndex:3},{value:"浏览器会自动打开 ",paraId:14,tocIndex:3},{value:"http://localhost:3000/",paraId:14,tocIndex:3},{value:"，这样 ",paraId:14,tocIndex:3},{value:"demo",paraId:14,tocIndex:3},{value:" 就跑起来了。",paraId:14,tocIndex:3},{value:"现在你可以尽情的本地修改代码，添加自己的图层了。",paraId:15,tocIndex:3},{value:"L7",paraId:15,tocIndex:3},{value:" 所有 ",paraId:15,tocIndex:3},{value:"demo",paraId:15,tocIndex:3},{value:" 都可以在 ",paraId:15,tocIndex:3},{value:"codesandbox",paraId:15,tocIndex:3},{value:" 打开，你可以下载代码。",paraId:15,tocIndex:3}]},7535:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(40507);const d=[{value:"这里的开发者，是指开发 L7 的开发者，为 L7 修复 bug、完善文档、升级功能、新功能开发等能力。",paraId:0},{value:"Fork L7 仓库 到自己的空间。",paraId:1,tocIndex:0},{value:"\ngit clone https://github.com/antvis/L7  --depth=1\n\n",paraId:2,tocIndex:1},{value:"node 版本推荐 v16.20.2",paraId:3,tocIndex:2},{value:"yarn install\n\n",paraId:4,tocIndex:2},{value:"如需功能调试",paraId:5,tocIndex:3},{value:"\nyarn run dev\n\n",paraId:6,tocIndex:3},{value:"打开 ",paraId:7,tocIndex:3},{value:"http://localhost:6006/",paraId:7,tocIndex:3},{value:"：",paraId:7,tocIndex:3},{value:"如需更新 API 或者 写文档、demo,使用该命令",paraId:8,tocIndex:4},{value:"\nyarn start\n\n",paraId:9,tocIndex:4},{value:"打开 ",paraId:10,tocIndex:4},{value:"http://localhost:8000/",paraId:10,tocIndex:4},{value:"：",paraId:10,tocIndex:4},{value:"运行单元测试：",paraId:11,tocIndex:5},{value:"yarn test // 全量跑\n\nyarn test ../tes.spec.ts // 单个文件\n\n",paraId:12,tocIndex:5},{value:"可以使用 yarn commit 模板化提交：",paraId:13,tocIndex:6},{value:"yarn commit\n\n",paraId:14,tocIndex:6},{value:"L7 Issue 和 Feature 通过开源社区的方式运作管理，可以完全的开放的探索、交流技术方案。开发任务，",paraId:15,tocIndex:7},{value:"认领查看",paraId:15,tocIndex:7},{value:'针对 L7 开发者 我们制定了成长计划，帮助大家从初级走向高级 GIS 领域 可视化引擎开发者。如有兴趣可以加 微信 "antv2030",注明 “参与L7研发”，期待你加入，一起学习。',paraId:16,tocIndex:7}]},2316:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(54089);const d=[{value:"将一组点数据按照等大小的正方形网格进行聚合，一个正方形网格代表网格内所有点的统计值。方格热力图特点以方格网布局。",paraId:0},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"下面我们来介绍如何绘制一个简单的网格热力图。",paraId:2,tocIndex:0},{value:"你可以在 ",paraId:3,tocIndex:0},{value:"L7",paraId:3,tocIndex:0},{value:" 官网上找到",paraId:3,tocIndex:0},{value:"在线案例",paraId:4,tocIndex:0},{value:"import { Scene, HeatmapLayer } from '@antv/l7';\nimport { GaodeMap } from '@antv/l7-maps';\n\nconst scene = new Scene({\n  id: 'map',\n  map: new GaodeMap({\n    style: 'light',\n    center: [107.054293, 35.246265],\n    zoom: 4.056,\n  }),\n});\nscene.on('loaded', () => {\n  fetch('https://gw.alipayobjects.com/os/basement_prod/7359a5e9-3c5e-453f-b207-bc892fb23b84.csv')\n    .then((res) => res.text())\n    .then((data) => {\n      const layer = new HeatmapLayer({})\n        .source(data, {\n          parser: {\n            type: 'csv',\n            x: 'lng',\n            y: 'lat',\n          },\n          transforms: [\n            {\n              type: 'grid',\n              size: 20000,\n              field: 'v',\n              method: 'sum',\n            },\n          ],\n        })\n        .shape('square')\n        .style({\n          coverage: 1,\n          angle: 0,\n        })\n        .color(\n          'count',\n          [\n            '#0B0030',\n            '#100243',\n            '#100243',\n            '#1B048B',\n            '#051FB7',\n            '#0350C1',\n            '#0350C1',\n            '#0072C4',\n            '#0796D3',\n            '#2BA9DF',\n            '#30C7C4',\n            '#6BD5A0',\n            '#A7ECB2',\n            '#D0F4CA',\n          ].reverse(),\n        );\n\n      scene.addLayer(layer);\n    });\n});\n",paraId:5,tocIndex:0},{value:"网格数据只支持点数据作为数据源，数据格式支持 ",paraId:6,tocIndex:1},{value:"csv",paraId:6,tocIndex:1},{value:"、",paraId:6,tocIndex:1},{value:"json",paraId:6,tocIndex:1},{value:"、",paraId:6,tocIndex:1},{value:"geojson",paraId:6,tocIndex:1},{value:"。",paraId:6,tocIndex:1},{value:"布局方法 通过 ",paraId:7,tocIndex:2},{value:"source",paraId:7,tocIndex:2},{value:" 的 ",paraId:7,tocIndex:2},{value:"transforms",paraId:7,tocIndex:2},{value:" 属性配置。",paraId:7,tocIndex:2},{value:"type  数据聚合类型 ",paraId:8,tocIndex:2},{value:"hexagon",paraId:8,tocIndex:2},{value:"。",paraId:8,tocIndex:2},{value:"size  网格半径 单位 米。",paraId:8,tocIndex:2},{value:"field  聚合字段。",paraId:8,tocIndex:2},{value:"method 聚合方法 ",paraId:8,tocIndex:2},{value:"count",paraId:8,tocIndex:2},{value:"，",paraId:8,tocIndex:2},{value:"max",paraId:8,tocIndex:2},{value:"，",paraId:8,tocIndex:2},{value:"min",paraId:8,tocIndex:2},{value:"，",paraId:8,tocIndex:2},{value:"sum",paraId:8,tocIndex:2},{value:"，",paraId:8,tocIndex:2},{value:"mean",paraId:8,tocIndex:2},{value:" 5 个统计维度。",paraId:8,tocIndex:2},{value:"layer.source(data, {\n  parser: {\n    type: 'csv',\n    x: 'lng',\n    y: 'lat',\n  },\n  transforms: [\n    {\n      type: 'grid',\n      size: 15000,\n      field: 'v',\n      method: 'sum',\n    },\n  ],\n});\n",paraId:9,tocIndex:2},{value:"网格热力图虽然是以标准四边形网格进行数据聚合，但是展示效果上可以设置为各种形状，形状只支持常量。",paraId:10,tocIndex:3},{value:"circle,",paraId:11,tocIndex:4},{value:"triangle",paraId:11,tocIndex:4},{value:"square",paraId:11,tocIndex:4},{value:"heaxgon",paraId:11,tocIndex:4},{value:"layer.shape('circle');\n",paraId:12,tocIndex:4},{value:"cylinder",paraId:13,tocIndex:5},{value:"triangleColumn",paraId:13,tocIndex:5},{value:"hexagonColumn",paraId:13,tocIndex:5},{value:"squareColumn,",paraId:13,tocIndex:5},{value:"layer.shape('cylinder');\n",paraId:14,tocIndex:5},{value:"不需要设置 size 方法",paraId:15,tocIndex:7},{value:"size 表示高度, 支持常量和数据映射",paraId:16,tocIndex:8},{value:"layer.size(10); // 常量\nlayer.size('value', [10, 50]); // 根据value 字段映射大小\nlayer.size('value', (value) => {}); // 回调函数设置高度\n",paraId:17,tocIndex:8},{value:"同 layer color 方法",paraId:18,tocIndex:9},{value:"coverage 网格覆盖度 0 - 1",paraId:19,tocIndex:10},{value:"angle 网格旋转角度 0 - 360",paraId:19,tocIndex:10},{value:"opacity 透明度 0 - 1.0",paraId:19,tocIndex:10},{value:"layer.style({\n  coverage: 0.9,\n  angle: 0,\n  opacity: 1.0,\n});\n",paraId:20,tocIndex:10}]},68681:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(33828);const d=[{value:"将一组点数据按照等大小的六边形网格进行聚合，一个六边形网格代表网格内所有点的统计值。蜂窝热力图特点以六边形热力图网格布局。",paraId:0},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"下面我们来介绍如何绘制一个简单的蜂窝热力图。",paraId:2,tocIndex:0},{value:"你可以在 ",paraId:3,tocIndex:0},{value:"L7",paraId:3,tocIndex:0},{value:" 官网上找到",paraId:3,tocIndex:0},{value:"在线案例",paraId:4,tocIndex:0},{value:"import { Scene, HeatmapLayer } from '@antv/l7';\nimport { GaodeMap } from '@antv/l7-maps';\n\nconst scene = new Scene({\n  id: 'map',\n  map: new GaodeMap({\n    style: 'dark',\n    pitch: 43,\n    center: [120.13383079335335, 29.651873105004427],\n    zoom: 7.068989519212174,\n  }),\n});\nscene.on('loaded', () => {\n  fetch('https://gw.alipayobjects.com/os/basement_prod/a1a8158d-6fe3-424b-8e50-694ccf61c4d7.csv')\n    .then((res) => res.text())\n    .then((data) => {\n      const layer = new HeatmapLayer({})\n        .source(data, {\n          parser: {\n            type: 'csv',\n            x: 'lng',\n            y: 'lat',\n          },\n          transforms: [\n            {\n              type: 'hexagon',\n              size: 2500,\n              field: 'v',\n              method: 'sum',\n            },\n          ],\n        })\n        .size('sum', (sum) => {\n          return sum * 200;\n        })\n        .shape('hexagonColumn')\n        .style({\n          coverage: 0.8,\n          angle: 0,\n        })\n        .color('sum', [\n          '#094D4A',\n          '#146968',\n          '#1D7F7E',\n          '#289899',\n          '#34B6B7',\n          '#4AC5AF',\n          '#5FD3A6',\n          '#7BE39E',\n          '#A1EDB8',\n          '#C3F9CC',\n          '#DEFAC0',\n          '#ECFFB1',\n        ]);\n      scene.addLayer(layer);\n    });\n});\n",paraId:5,tocIndex:0},{value:"网格数据只支持点数据作为数据源，数据格式支持 ",paraId:6,tocIndex:1},{value:"csv",paraId:6,tocIndex:1},{value:"、",paraId:6,tocIndex:1},{value:"json",paraId:6,tocIndex:1},{value:"、",paraId:6,tocIndex:1},{value:"geojson",paraId:6,tocIndex:1},{value:"。",paraId:6,tocIndex:1},{value:"布局方法 通过 ",paraId:7,tocIndex:2},{value:"source",paraId:7,tocIndex:2},{value:" 的 ",paraId:7,tocIndex:2},{value:"transforms",paraId:7,tocIndex:2},{value:" 属性配置。",paraId:7,tocIndex:2},{value:"type  数据聚合类型 ",paraId:8,tocIndex:2},{value:"hexagon",paraId:8,tocIndex:2},{value:"。",paraId:8,tocIndex:2},{value:"size  网格半径 单位 米。",paraId:8,tocIndex:2},{value:"field  聚合字段。",paraId:8,tocIndex:2},{value:"method 聚合方法 ",paraId:8,tocIndex:2},{value:"count",paraId:8,tocIndex:2},{value:"，",paraId:8,tocIndex:2},{value:"max",paraId:8,tocIndex:2},{value:"，",paraId:8,tocIndex:2},{value:"min",paraId:8,tocIndex:2},{value:"，",paraId:8,tocIndex:2},{value:"sum",paraId:8,tocIndex:2},{value:"，",paraId:8,tocIndex:2},{value:"mean",paraId:8,tocIndex:2},{value:" 5 个统计维度。",paraId:8,tocIndex:2},{value:"layer.source(data, {\n  parser: {\n    type: 'csv',\n    x: 'lng',\n    y: 'lat',\n  },\n  transforms: [\n    {\n      type: 'hexagon',\n      size: 15000,\n      field: 'v',\n      method: 'sum',\n    },\n  ],\n});\n",paraId:9,tocIndex:2},{value:"网格热力图虽然是以标准四边形网格进行数据聚合，但是展示效果上可以设置为其形状，形状只支持常量",paraId:10,tocIndex:3},{value:"circle,",paraId:11,tocIndex:4},{value:"triangle",paraId:11,tocIndex:4},{value:"square",paraId:11,tocIndex:4},{value:"heaxgon",paraId:11,tocIndex:4},{value:"layer.shape('circle');\n",paraId:12,tocIndex:4},{value:"cylinder",paraId:13,tocIndex:5},{value:"triangleColumn",paraId:13,tocIndex:5},{value:"hexagonColumn",paraId:13,tocIndex:5},{value:"squareColumn,",paraId:13,tocIndex:5},{value:"layer.shape('cylinder');\n",paraId:14,tocIndex:5},{value:"不需要设置 size 方法",paraId:15,tocIndex:7},{value:"size 表示高度, 支持常量和数据映射",paraId:16,tocIndex:8},{value:"layer.size(10); // 常量\nlayer.size('value', [10, 50]); // 根据value 字段映射大小\nlayer.size('value', (value) => {}); // 回调函数设置高度\n",paraId:17,tocIndex:8},{value:"coverage 网格覆盖度 0 - 1",paraId:18,tocIndex:9},{value:"angle 网格旋转角度 0 - 360",paraId:18,tocIndex:9},{value:"opacity 透明度 0 - 1.0",paraId:18,tocIndex:9},{value:"layer.style({\n  coverage: 0.9,\n  angle: 0,\n  opacity: 1.0,\n});\n",paraId:19,tocIndex:9}]},23543:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(18552);const d=[{value:"热力图是地图可视化场景中十分常见的需求。在区域范围内数据具有的一定热度分级分布情况的聚合面状现象，常用于描述人群分布、密度和变化趋势等。",paraId:0},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"下面我们来介绍如何绘制一个经典热力图。",paraId:2,tocIndex:0},{value:"你可以在 ",paraId:3,tocIndex:0},{value:"L7",paraId:3,tocIndex:0},{value:" 官网上找到",paraId:3,tocIndex:0},{value:"在线案例",paraId:4,tocIndex:0},{value:"import { Scene, HeatmapLayer } from '@antv/l7';\nimport { GaodeMap } from '@antv/l7-maps';\n\nconst scene = new Scene({\n  id: 'map',\n  map: new GaodeMap({\n    style: 'dark',\n    center: [127.5671666579043, 7.445038892195569],\n    zoom: 2.632456779444394,\n  }),\n});\nscene.on('loaded', () => {\n  fetch('https://gw.alipayobjects.com/os/basement_prod/d3564b06-670f-46ea-8edb-842f7010a7c6.json')\n    .then((res) => res.json())\n    .then((data) => {\n      const layer = new HeatmapLayer({})\n        .source(data)\n        .shape('heatmap')\n        .size('mag', [0, 1.0]) // weight映射通道\n        .style({\n          intensity: 2,\n          radius: 20,\n          rampColors: {\n            colors: ['#FF4818', '#F7B74A', '#FFF598', '#91EABC', '#2EA9A1', '#206C7C'].reverse(),\n            positions: [0, 0.2, 0.4, 0.6, 0.8, 1.0],\n          },\n        });\n      scene.addLayer(layer);\n    });\n});\n",paraId:5,tocIndex:0},{value:"经典热力图只支持点数据作为数据源，数据格式支持 ",paraId:6,tocIndex:1},{value:"csv",paraId:6,tocIndex:1},{value:"、",paraId:6,tocIndex:1},{value:"json",paraId:6,tocIndex:1},{value:"、",paraId:6,tocIndex:1},{value:"geojson",paraId:6,tocIndex:1},{value:"。",paraId:6,tocIndex:1},{value:"const source = new Source([{\n  lng: 120, lat: 30\n},...], {\n  parser: {\n    type: 'json',\n    x: 'lng',\n    y: 'lat'\n  }\n})\n",paraId:7,tocIndex:1},{value:"经典热力图的 ",paraId:8,tocIndex:2},{value:"shape",paraId:8,tocIndex:2},{value:" 为常量 ",paraId:8,tocIndex:2},{value:"heatmap",paraId:8,tocIndex:2},{value:"。",paraId:8,tocIndex:2},{value:"我们需要将值映射到 ",paraId:9,tocIndex:3},{value:"[0, 1]",paraId:9,tocIndex:3},{value:" 的值域空间。",paraId:9,tocIndex:3},{value:"field",paraId:10,tocIndex:3},{value:": 热力图权重字段",paraId:10,tocIndex:3},{value:"values",paraId:10,tocIndex:3},{value:": 数据映射区间 热力图显示 ",paraId:10,tocIndex:3},{value:"[0, 1]",paraId:10,tocIndex:3},{value:" 效果最佳",paraId:10,tocIndex:3},{value:"layer.size('weight', [0, 1]);\n",paraId:11,tocIndex:3},{value:"热力图通过 ",paraId:12,tocIndex:4},{value:"style",paraId:12,tocIndex:4},{value:" 的指定参数配置颜色。",paraId:12,tocIndex:4},{value:"intensity",paraId:13,tocIndex:5},{value:" 全局热力权重，推荐权重范围 ",paraId:13,tocIndex:5},{value:"1 - 5",paraId:13,tocIndex:5},{value:"。",paraId:13,tocIndex:5},{value:"radius",paraId:13,tocIndex:5},{value:"   热力半径，单位像素。",paraId:13,tocIndex:5},{value:"rampColors",paraId:13,tocIndex:5},{value:" 色带参数。",paraId:13,tocIndex:5},{value:"colors",paraId:14,tocIndex:6},{value:"  颜色数组",paraId:14,tocIndex:6},{value:"positions",paraId:14,tocIndex:6},{value:" 数据区间",paraId:14,tocIndex:6},{value:"配置值域映射颜色的色带，值域的范围为 ",paraId:15,tocIndex:6},{value:"[0 - 1]",paraId:15,tocIndex:6},{value:", 对应的我们需要为每一个 ",paraId:15,tocIndex:6},{value:"position",paraId:15,tocIndex:6},{value:" 位置设置一个颜色值。",paraId:15,tocIndex:6},{value:"⚠️ colors, positions 的长度要相同",paraId:16,tocIndex:6},{value:"layer.style({\n  rampColors: {\n    colors: ['#FF4818', '#F7B74A', '#FFF598', '#91EABC', '#2EA9A1', '#206C7C'],\n    positions: [0, 0.2, 0.4, 0.6, 0.8, 1.0],\n  },\n});\n",paraId:17,tocIndex:6}]},58861:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(19180);const d=[{value:"地理可视化除了数据展示，还需要用户交互，用户交互一般分为两种。",paraId:0},{value:"图层交互",paraId:1},{value:"数据交互",paraId:1},{value:"鼠标在可视化图层上进行相关操作，然后图层会有相应的响应。",paraId:2,tocIndex:0},{value:"L7",paraId:2,tocIndex:0},{value:" 的 ",paraId:2,tocIndex:0},{value:"Layer",paraId:2,tocIndex:0},{value:" 图层目前原生支持两种交互能力。",paraId:2,tocIndex:0},{value:"active",paraId:3,tocIndex:0},{value:" 鼠标滑过高亮",paraId:3,tocIndex:0},{value:"select",paraId:3,tocIndex:0},{value:" 鼠标选中高亮",paraId:3,tocIndex:0},{value:"开启或者关闭 ",paraId:4,tocIndex:1},{value:"mousehover",paraId:4,tocIndex:1},{value:" 元素高亮效果。",paraId:4,tocIndex:1},{value:"activeOption",paraId:4,tocIndex:1},{value:"color",paraId:5,tocIndex:1},{value:": 高亮颜色",paraId:5,tocIndex:1},{value:"mix",paraId:5,tocIndex:1},{value:": 可选参数，默认为 0，表示高亮颜色是指定纯色，最大有效值是1，表示高亮色全部是底色",paraId:5,tocIndex:1},{value:"// 开启 Active  使用默认高亮颜色\nlayer.active(true);\n\n//  开启 Active  自定义高亮颜色\n\nlayer.active({\n  color: 'red',\n  mix: 0.6,\n});\n\n// 关闭高亮效果\nlayer.active(false);\n",paraId:6,tocIndex:1},{value:"开启或者关闭 ",paraId:7,tocIndex:2},{value:"mouseclick",paraId:7,tocIndex:2},{value:" 元素选中高亮效果。",paraId:7,tocIndex:2},{value:"selectOption",paraId:7,tocIndex:2},{value:"color",paraId:8,tocIndex:2},{value:": 选中高亮颜色",paraId:8,tocIndex:2},{value:"mix",paraId:8,tocIndex:2},{value:": 可选参数，默认为 0，表示选中高亮颜色是指定纯色，最大有效值是1，表示选中高亮色全部是底色",paraId:8,tocIndex:2},{value:"// 开启 Active  使用默认高亮颜色\nlayer.select(true);\n\n//  开启 Active  自定义高亮颜色\n\nlayer.select({\n  color: 'red',\n  mix: 0.6,\n});\n\n// 关闭高亮效果\nlayer.select(false);\n",paraId:9,tocIndex:2},{value:"有些时候我们可能需要直接指定某个数据高亮，比如鼠标点击数据面板的数据，我们需要高亮地图对应的元素。",paraId:10,tocIndex:3},{value:"layer.setActive(id);\n",paraId:11,tocIndex:4},{value:"layer.setSelect(id);\n",paraId:12,tocIndex:5}]},92509:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(88497);const d=[{value:"✨ 2022.11.22 2.11.0 版本正式发布",paraId:0,tocIndex:0},{value:"⚠️ 1.x 版本的用户需求我们持续跟进 ",paraId:1,tocIndex:0},{value:"旧版官网地址",paraId:1,tocIndex:0},{value:"L7 是由蚂蚁金服 AntV 数据可视化团队推出的基于 WebGL 的开源大规模地理空间数据可视分析开发框架。L7 中的 L 代表 Location，7 代表世界七大洲，寓意能为全球位置数据提供可视分析的能力。L7 以图形符号学为理论基础，将抽象复杂的空间数据转化成 2D、3D 符号，通过颜色、大小、体积、纹理等视觉变量实现丰富的可视化表达。",paraId:2,tocIndex:0},{value:"\n      ",paraId:3},{value:"\n      ",paraId:3},{value:"Your user agent does not support the HTML5 Video element.",paraId:4,tocIndex:0},{value:"🌏 数据驱动可视化展示",paraId:5,tocIndex:1},{value:"数据驱动，从数到形，支持丰富的地图可视化类型，更好洞察数据。",paraId:6,tocIndex:1},{value:"🌏 2D，3D 一体化的海量数据高性能渲染",paraId:7,tocIndex:1},{value:"百万级空间数据实时，动态渲染。",paraId:8,tocIndex:1},{value:"🌏 简单灵活的数据接入",paraId:9,tocIndex:1},{value:"支持 CSV，JSON，geojson 等数据格式接入，可以根据需求自定义数据格式，无需复杂的空间数据转换。",paraId:10,tocIndex:1},{value:"🌏 多地图底图支持，支持离线内网部署",paraId:11,tocIndex:1},{value:"高德地图国内合法合规的地理底图，Mapbox 满足国际化业务需求。",paraId:12,tocIndex:1},{value:"气泡图",paraId:13,tocIndex:3},{value:"散点图",paraId:13,tocIndex:3},{value:"符号地图",paraId:13,tocIndex:3},{value:"3D 柱状地图",paraId:13,tocIndex:3},{value:"聚合地图",paraId:13,tocIndex:3},{value:"复合图表地图",paraId:13,tocIndex:3},{value:"自定义 Marker",paraId:13,tocIndex:3},{value:"路径地图",paraId:14,tocIndex:4},{value:"弧线，支持 2D 弧线、3D 弧线以及大圆航线",paraId:14,tocIndex:4},{value:"等值线",paraId:14,tocIndex:4},{value:"填充图",paraId:15,tocIndex:5},{value:"3D 填充图",paraId:15,tocIndex:5},{value:"经典热力图",paraId:16,tocIndex:6},{value:"蜂窝热力图",paraId:16,tocIndex:6},{value:"网格热力图",paraId:16,tocIndex:6},{value:"图片",paraId:17,tocIndex:7},{value:"Raster",paraId:17,tocIndex:7},{value:"栅格瓦片",paraId:18,tocIndex:8},{value:"矢量瓦片",paraId:18,tocIndex:8},{value:"更多技术细节，详细进展，请关注 ",paraId:19,tocIndex:9},{value:"GitHub",paraId:19,tocIndex:9},{value:"，欢迎大家来给点点 Star，让更多人看到这个开源的项目。",paraId:19,tocIndex:9},{value:"L7 相关技术问题，需求反馈，可在 [GitHub Issue 区反馈]（",paraId:20,tocIndex:9},{value:"https://github.com/antvis/L7/issues），我们会及时响应。",paraId:20,tocIndex:9},{value:"同时我们还提供用户交流群",paraId:21,tocIndex:9},{value:"群号 3：1935013288",paraId:22,tocIndex:9},{value:"微信群：加微信号：antv2030 入群 备注 L7 邀请进群",paraId:22,tocIndex:9}]},43437:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(46089);const d=[{value:"有时候为了可视化效果，会选择使用弧线连接地图上的两点。同时也可以使用弧线完成一些有趣的效果。",paraId:0},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"下面我们来介绍如何使用弧线绘制一个模拟的风场。",paraId:2,tocIndex:0},{value:"你可以在 ",paraId:3,tocIndex:0},{value:"L7",paraId:3,tocIndex:0},{value:" 官网上找到",paraId:3,tocIndex:0},{value:"在线案例",paraId:4,tocIndex:0},{value:"import { Scene, LineLayer } from '@antv/l7';\nimport { GaodeMap } from '@antv/l7-maps';\n\nconst scene = new Scene({\n  id: 'map',\n  map: new GaodeMap({\n    style: 'light',\n    center: [60, 40.7128],\n    zoom: 2,\n  }),\n});\nscene.on('loaded', () => {\n  fetch('https://gw.alipayobjects.com/os/bmw-prod/7455fead-1dc0-458d-b91a-fb4cf99e701e.txt')\n    .then((res) => res.text())\n    .then((data) => {\n      const layer = new LineLayer({ blend: 'normal' })\n        .source(data, {\n          parser: {\n            type: 'csv',\n            x: 'lng1',\n            y: 'lat1',\n            x1: 'lng2',\n            y1: 'lat2',\n          },\n        })\n        .size(1)\n        .shape('arc')\n        .color('#6495ED')\n        .animate({\n          duration: 4,\n          interval: 0.2,\n          trailLength: 0.6,\n        });\n      scene.addLayer(layer);\n    });\n});\n",paraId:5,tocIndex:0},{value:"绘制弧线需要同时提供起点和止点的坐标（起止点调换位置，弧线的形状会对称相反，飞线动画的方向也会相反）。",paraId:6,tocIndex:1},{value:"const data = [\n  {\n    lng1: 120,\n    lat1: 30,\n    lng2: 130,\n    lat2: 30,\n  },\n];\nlayer.source(data, {\n  parser: {\n    type: 'json',\n    x: 'lng1',\n    y: 'lat1',\n    x1: 'lng2',\n    y1: 'lat2',\n  },\n});\n",paraId:7,tocIndex:1},{value:"为了绘制弧线图，我们需要将 ",paraId:8,tocIndex:2},{value:"shape",paraId:8,tocIndex:2},{value:" 的参数设置成 ",paraId:8,tocIndex:2},{value:"arc",paraId:8,tocIndex:2},{value:"。",paraId:8,tocIndex:2},{value:"layer.animate(true);\nlayer.animate(false);\n",paraId:9,tocIndex:4},{value:"duration 动画时间 单位(s)秒",paraId:10,tocIndex:5},{value:"interval 轨迹间隔, 取值区间 0 - 1",paraId:10,tocIndex:5},{value:"trailLength 轨迹长度 取值区间 0 - 1",paraId:10,tocIndex:5},{value:"layer.animate({\n  duration: 4,\n  interval: 0.2,\n  trailLength: 0.1,\n});\n",paraId:11,tocIndex:5},{value:"L7 目前动画参数为相对单位，我们默认一条线段的长度为 1\n",paraId:12,tocIndex:6},{value:"如果 interval = 0.2,则一条轨迹将会分成 5 段，如果 interval = 0.5 则为两段。",paraId:13,tocIndex:6},{value:"在线案例",paraId:14},{value:"arc 图层的弧线默认分段数是 30，然而有有些时候用户并不需要这么多的分段数，适当降低分段数量可以在保证效果的情况下提高性能。",paraId:15,tocIndex:8},{value:"const layer = new LineLayer({})\n  .source(data, {\n    parser: {\n      type: 'csv',\n      x: 'lng1',\n      y: 'lat1',\n      x1: 'lng2',\n      y1: 'lat2',\n    },\n  })\n  .size(1)\n  .shape('arc')\n  .color('#8C1EB2')\n  .style({\n    segmentNumber: 15,\n  });\n",paraId:16,tocIndex:8},{value:"thetaOffset 参数 表示 arc 弧线的弧度，默认值是 0.314",paraId:17,tocIndex:9},{value:"const layer = new LineLayer({})\n  .source(data, {\n    parser: {\n      type: 'csv',\n      x: 'lng1',\n      y: 'lat1',\n      x1: 'lng2',\n      y1: 'lat2',\n    },\n  })\n  .size(1)\n  .shape('arc')\n  .color('#8C1EB2')\n  .style({\n    thetaOffset: 0.35,\n  });\n",paraId:18,tocIndex:9},{value:"在线案例",paraId:19},{value:"线图层通过在 style 中设置起始颜色和终点颜色来设置颜色渐变，渐变色的优先级比 color 方法设置的颜色更高",paraId:20,tocIndex:10},{value:"const layer = new LineLayer({})\n  .source(data, {\n    parser: {\n      type: 'csv',\n      x: 'lng1',\n      y: 'lat1',\n      x1: 'lng2',\n      y1: 'lat2',\n    },\n  })\n  .size(1)\n  .shape('arc')\n  .color('#8C1EB2')\n  .style({\n    sourceColor: '#f00', // 起点颜色\n    targetColor: '#0f0', // 终点颜色\n  });\n",paraId:21,tocIndex:10},{value:"在线案例",paraId:22},{value:"线图层通过在 style 中设置线的类型，同时指定虚线部分和实线部分",paraId:23,tocIndex:11},{value:"const layer = new LineLayer({})\n  .source(data)\n  .size(1.5)\n  .shape('line')\n  .color('标准名称', ['#5B8FF9', '#5CCEA1', '#F6BD16'])\n  .active(true)\n  .style({\n    lineType: 'dash',\n    dashArray: [5, 5],\n  });\nscene.addLayer(layer);\n",paraId:24,tocIndex:11},{value:"lineType\n默认为 solid，表示实线，dash 表示虚线",paraId:25,tocIndex:11},{value:"dashArray[len1: number, len2: number]\nlen1 实线长度\nlen2 间隔长度",paraId:25,tocIndex:11},{value:"在线案例",paraId:26},{value:"线图层支持纹理贴图和多种表现形式，通过 ",paraId:27},{value:"scene.addImage",paraId:27},{value:" 方法添加到全局的资源，使用 ",paraId:27},{value:"texture",paraId:27},{value:" 方法指定贴图。",paraId:27},{value:"scene.addImage(\n  '02',\n  'https://gw.alipayobjects.com/zos/bmw-prod/ce83fc30-701f-415b-9750-4b146f4b3dd6.svg',\n);\nconst layer = new LineLayer()\n  .source(data)\n  .size(4)\n  .shape('line')\n  .texture('02')\n  .color('#25d8b7')\n  .animate({\n    interval: 1, // 间隔\n    duration: 1, // 持续时间，延时\n    trailLength: 2, // 流线长度\n  })\n  .style({\n    lineTexture: true, // 开启线的贴图功能\n    iconStep: 20, // 设置贴图纹理的间距\n  });\n",paraId:28},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"lineTexture 指定是否开启纹理贴图能力",paraId:29},{value:"iconStep 指定贴图在线图层上面排布的间隔",paraId:29},{value:"在线案例",paraId:30},{value:"✨ animate",paraId:31,tocIndex:12},{value:"\n当线图层 (",paraId:31,tocIndex:12},{value:"shape",paraId:31,tocIndex:12},{value:" 为 ",paraId:31,tocIndex:12},{value:"arc",paraId:31,tocIndex:12},{value:"/",paraId:31,tocIndex:12},{value:"arc3d",paraId:31,tocIndex:12},{value:") 开启动画模式的时候，纹理在线图层上的分布还会和 ",paraId:31,tocIndex:12},{value:"animate",paraId:31,tocIndex:12},{value:" 的参数相关.",paraId:31,tocIndex:12},{value:"线图层上排列的纹理的数量大致为 duration/interval",paraId:32,tocIndex:12},{value:".animate({\n    duration: 1,\n    interval: 0.2,\n    trailLength: 0.1\n});\n\n// 此时 纹理贴图数量为  duration / interval = 5\n",paraId:33,tocIndex:12},{value:"✨ textureBlend 参数",paraId:34,tocIndex:12},{value:"\n通过控制 style 方法中的 textureBlend 参数，我们可以控制纹理图层和线图层的混合情况",paraId:34,tocIndex:12},{value:"normal",paraId:35,tocIndex:12},{value:"replace",paraId:35,tocIndex:12},{value:".style({\n    lineTexture: true, // 开启线的贴图功能\n    iconStep: 30, // 设置贴图纹理的间距\n    textureBlend: 'replace', // 设置纹理混合方式，默认值为 normal，可选值有 normal/replace 两种\n  });\n\n",paraId:36,tocIndex:12},{value:"在线案例",paraId:37}]},66178:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(19515);const d=[{value:"除了 2D 的弧线，我们还指出 3D 的弧线，在使用上只要改变 ",paraId:0},{value:"shape",paraId:0},{value:" 的参数即可。",paraId:0},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"下面我们来介绍如何绘制一个简单的 ",paraId:2,tocIndex:0},{value:"3D",paraId:2,tocIndex:0},{value:" 弧线图。",paraId:2,tocIndex:0},{value:"你可以在 ",paraId:3,tocIndex:0},{value:"L7",paraId:3,tocIndex:0},{value:" 官网上找到",paraId:3,tocIndex:0},{value:"在线案例",paraId:4,tocIndex:0},{value:"import { LineLayer } from '@antv/l7';\nconst layer = new LineLayer({})\n  .source(data, {\n    parser: {\n      type: 'csv',\n      x: 'lng1',\n      y: 'lat1',\n      x1: 'lng2',\n      y1: 'lat2',\n    },\n  })\n  .size(1)\n  .shape('arc')\n  .color('#8C1EB2')\n  .style({\n    opacity: 0.8,\n  });\n",paraId:5,tocIndex:0},{value:"绘制弧线需要同时提供起点和止点的坐标（起止点调换位置，弧线的形状会对称相反，飞线动画的方向也会相反）。",paraId:6,tocIndex:1},{value:"const data = [\n  {\n    lng1: 120,\n    lat1: 30,\n    lng2: 130,\n    lat2: 30,\n  },\n];\nlayer.source(data, {\n  parser: {\n    type: 'json',\n    x: 'lng1',\n    y: 'lat1',\n    x1: 'lng2',\n    y1: 'lat2',\n  },\n});\n",paraId:7,tocIndex:1},{value:"为了绘制弧线图，我们需要将 ",paraId:8,tocIndex:2},{value:"shape",paraId:8,tocIndex:2},{value:" 的参数设置成 ",paraId:8,tocIndex:2},{value:"arc3d",paraId:8,tocIndex:2},{value:"。",paraId:8,tocIndex:2},{value:"layer.animate(true);\nlayer.animate(false);\n",paraId:9,tocIndex:4},{value:"duration 动画时间 单位(s)秒",paraId:10,tocIndex:5},{value:"interval 轨迹间隔, 取值区间 0 - 1",paraId:10,tocIndex:5},{value:"trailLength 轨迹长度 取值区间 0 - 1",paraId:10,tocIndex:5},{value:"layer.animate({\n  duration: 4,\n  interval: 0.2,\n  trailLength: 0.1,\n});\n",paraId:11,tocIndex:5},{value:"L7 目前动画参数为相对单位，我们默认一条线段的长度为 1\n",paraId:12,tocIndex:6},{value:"如果 interval = 0.2,则一条轨迹将会分成 5 段，如果 interval = 0.5 则为两段。",paraId:13,tocIndex:6},{value:"在线案例",paraId:14},{value:"线图层通过在 style 中设置起始颜色和终点颜色来设置颜色渐变，渐变色的优先级比 color 方法设置的颜色更高",paraId:15,tocIndex:8},{value:"const layer = new LineLayer({})\n  .source(data, {\n    parser: {\n      type: 'csv',\n      x: 'lng1',\n      y: 'lat1',\n      x1: 'lng2',\n      y1: 'lat2',\n    },\n  })\n  .size(1)\n  .shape('arc')\n  .color('#8C1EB2')\n  .style({\n    sourceColor: '#f00', // 起点颜色\n    targetColor: '#0f0', // 终点颜色\n  });\n",paraId:16,tocIndex:8},{value:"在线案例",paraId:17},{value:"线图层通过在 style 中设置线的类型，同时指定虚线部分和实线部分",paraId:18,tocIndex:9},{value:"const layer = new LineLayer({})\n  .source(data)\n  .size(1.5)\n  .shape('line')\n  .color('标准名称', ['#5B8FF9', '#5CCEA1', '#F6BD16'])\n  .active(true)\n  .style({\n    lineType: 'dash',\n    dashArray: [5, 5],\n  });\nscene.addLayer(layer);\n",paraId:19,tocIndex:9},{value:"lineType\n默认为 solid，表示实线，dash 表示虚线",paraId:20,tocIndex:9},{value:"dashArray[len1: number, len2: number]\nlen1 实线长度\nlen2 间隔长度",paraId:20,tocIndex:9},{value:"在线案例",paraId:21},{value:"线图层支持纹理贴图和多种表现形式，通过 ",paraId:22},{value:"scene.addImage",paraId:22},{value:" 方法添加到全局的资源，使用 ",paraId:22},{value:"texture",paraId:22},{value:" 方法指定贴图。",paraId:22},{value:"scene.addImage(\n  '02',\n  'https://gw.alipayobjects.com/zos/bmw-prod/ce83fc30-701f-415b-9750-4b146f4b3dd6.svg',\n);\nconst layer = new LineLayer()\n  .source(data)\n  .size(4)\n  .shape('line')\n  .texture('02')\n  .color('#25d8b7')\n  .animate({\n    interval: 1, // 间隔\n    duration: 1, // 持续时间，延时\n    trailLength: 2, // 流线长度\n  })\n  .style({\n    lineTexture: true, // 开启线的贴图功能\n    iconStep: 20, // 设置贴图纹理的间距\n  });\n",paraId:23},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"lineTexture 指定是否开启纹理贴图能力",paraId:24},{value:"iconStep 指定贴图在线图层上面排布的间隔",paraId:24},{value:"在线案例",paraId:25},{value:"✨ animate",paraId:26,tocIndex:10},{value:"\n当线图层 (",paraId:26,tocIndex:10},{value:"shape",paraId:26,tocIndex:10},{value:" 为 ",paraId:26,tocIndex:10},{value:"arc",paraId:26,tocIndex:10},{value:"/",paraId:26,tocIndex:10},{value:"arc3d",paraId:26,tocIndex:10},{value:") 开启动画模式的时候，纹理在线图层上的分布还会和 ",paraId:26,tocIndex:10},{value:"animate",paraId:26,tocIndex:10},{value:" 的参数相关.",paraId:26,tocIndex:10},{value:"线图层上排列的纹理的数量大致为 duration/interval",paraId:27,tocIndex:10},{value:".animate({\n    duration: 1,\n    interval: 0.2,\n    trailLength: 0.1\n});\n\n// 此时 纹理贴图数量为  duration / interval = 5\n",paraId:28,tocIndex:10},{value:"✨ textureBlend 参数",paraId:29,tocIndex:10},{value:"\n通过控制 style 方法中的 textureBlend 参数，我们可以控制纹理图层和线图层的混合情况",paraId:29,tocIndex:10},{value:"normal",paraId:30,tocIndex:10},{value:"replace",paraId:30,tocIndex:10},{value:".style({\n    lineTexture: true, // 开启线的贴图功能\n    iconStep: 30, // 设置贴图纹理的间距\n    textureBlend: 'replace', // 设置纹理混合方式，默认值为 normal，可选值有 normal/replace 两种\n  });\n\n",paraId:31,tocIndex:10},{value:"在线案例",paraId:32}]},20905:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(8373);const d=[{value:"把地球看做一个球体，通过地面上任意两点和地心做一平面，平面与地球表面相交看到的圆周就是大圆。两点之间的大圆劣弧线是两点在地面上的最短距离。沿着这一段大圆弧线航行时的航线称为大圆航线。",paraId:0},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"下面我们来介绍如何绘制一个简单的大圆弧线。",paraId:2,tocIndex:0},{value:"你可以在 ",paraId:3,tocIndex:0},{value:"L7",paraId:3,tocIndex:0},{value:" 官网上找到",paraId:3,tocIndex:0},{value:"在线案例",paraId:4,tocIndex:0},{value:"import { Scene, LineLayer } from '@antv/l7';\nimport { GaodeMap } from '@antv/l7-maps';\n\nconst scene = new Scene({\n  id: 'map',\n  map: new GaodeMap({\n    style: 'dark',\n    center: [107.77791556935472, 35.443286920228644],\n    zoom: 2.9142882493605033,\n  }),\n});\nscene.on('loaded', () => {\n  fetch('https://gw.alipayobjects.com/os/rmsportal/UEXQMifxtkQlYfChpPwT.txt')\n    .then((res) => res.text())\n    .then((data) => {\n      const layer = new LineLayer({})\n        .source(data, {\n          parser: {\n            type: 'csv',\n            x: 'lng1',\n            y: 'lat1',\n            x1: 'lng2',\n            y1: 'lat2',\n          },\n        })\n        .size(1)\n        .shape('greatcircle')\n        .color('#8C1EB2')\n        .style({\n          opacity: 0.8,\n        });\n      scene.addLayer(layer);\n    });\n});\n",paraId:5,tocIndex:0},{value:"绘制弧线需要同时提供起点和止点的坐标（起止点调换位置，弧线的形状会对称相反，飞线动画的方向也会相反）。",paraId:6,tocIndex:1},{value:"const data = [\n  {\n    lng1: 120,\n    lat1: 30,\n    lng2: 130,\n    lat2: 30,\n  },\n];\nlayer.source(data, {\n  parser: {\n    type: 'json',\n    x: 'lng1',\n    y: 'lat1',\n    x1: 'lng2',\n    y1: 'lat2',\n  },\n});\n",paraId:7,tocIndex:1},{value:"为了绘制大圆弧线图，我们需要将 ",paraId:8,tocIndex:2},{value:"shape",paraId:8,tocIndex:2},{value:" 的参数设置成 ",paraId:8,tocIndex:2},{value:"greatcircle",paraId:8,tocIndex:2},{value:"。",paraId:8,tocIndex:2},{value:"layer.animate(true);\nlayer.animate(false);\n",paraId:9,tocIndex:4},{value:"duration 动画时间 单位(s)秒",paraId:10,tocIndex:5},{value:"interval 轨迹间隔, 取值区间 0 - 1",paraId:10,tocIndex:5},{value:"trailLength 轨迹长度 取值区间 0 - 1",paraId:10,tocIndex:5},{value:"layer.animate({\n  duration: 4,\n  interval: 0.2,\n  trailLength: 0.1,\n});\n",paraId:11,tocIndex:5},{value:"L7 目前动画参数为相对单位，我们默认一条线段的长度为 1\n",paraId:12,tocIndex:6},{value:"如果 interval = 0.2,则一条轨迹将会分成 5 段，如果 interval = 0.5 则为两段。",paraId:13,tocIndex:6},{value:"在线案例",paraId:14},{value:"线图层通过在 style 中设置起始颜色和终点颜色来设置颜色渐变，渐变色的优先级比 color 方法设置的颜色更高",paraId:15,tocIndex:8},{value:"const layer = new LineLayer({})\n  .source(data, {\n    parser: {\n      type: 'csv',\n      x: 'lng1',\n      y: 'lat1',\n      x1: 'lng2',\n      y1: 'lat2',\n    },\n  })\n  .size(1)\n  .shape('arc')\n  .color('#8C1EB2')\n  .style({\n    sourceColor: '#f00', // 起点颜色\n    targetColor: '#0f0', // 终点颜色\n  });\n",paraId:16,tocIndex:8},{value:"在线案例",paraId:17},{value:"线图层通过在 style 中设置线的类型，同时指定虚线部分和实线部分",paraId:18,tocIndex:9},{value:"const layer = new LineLayer({})\n  .source(data)\n  .size(1.5)\n  .shape('line')\n  .color('标准名称', ['#5B8FF9', '#5CCEA1', '#F6BD16'])\n  .active(true)\n  .style({\n    lineType: 'dash',\n    dashArray: [5, 5],\n  });\nscene.addLayer(layer);\n",paraId:19,tocIndex:9},{value:"lineType\n默认为 solid，表示实线，dash 表示虚线",paraId:20,tocIndex:9},{value:"dashArray[len1: number, len2: number]\nlen1 实线长度\nlen2 间隔长度",paraId:20,tocIndex:9},{value:"在线案例",paraId:21},{value:"线图层支持纹理贴图和多种表现形式，通过 ",paraId:22},{value:"scene.addImage",paraId:22},{value:" 方法添加到全局的资源，使用 ",paraId:22},{value:"texture",paraId:22},{value:" 方法指定贴图。",paraId:22},{value:"scene.addImage(\n  '02',\n  'https://gw.alipayobjects.com/zos/bmw-prod/ce83fc30-701f-415b-9750-4b146f4b3dd6.svg',\n);\nconst layer = new LineLayer()\n  .source(data)\n  .size(4)\n  .shape('line')\n  .texture('02')\n  .color('#25d8b7')\n  .animate({\n    interval: 1, // 间隔\n    duration: 1, // 持续时间，延时\n    trailLength: 2, // 流线长度\n  })\n  .style({\n    lineTexture: true, // 开启线的贴图功能\n    iconStep: 20, // 设置贴图纹理的间距\n  });\n",paraId:23},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"lineTexture 指定是否开启纹理贴图能力",paraId:24},{value:"iconStep 指定贴图在线图层上面排布的间隔",paraId:24},{value:"在线案例",paraId:25},{value:"✨ animate",paraId:26,tocIndex:10},{value:"\n当线图层 (",paraId:26,tocIndex:10},{value:"shape",paraId:26,tocIndex:10},{value:" 为 ",paraId:26,tocIndex:10},{value:"arc",paraId:26,tocIndex:10},{value:"/",paraId:26,tocIndex:10},{value:"arc3d",paraId:26,tocIndex:10},{value:") 开启动画模式的时候，纹理在线图层上的分布还会和 ",paraId:26,tocIndex:10},{value:"animate",paraId:26,tocIndex:10},{value:" 的参数相关.",paraId:26,tocIndex:10},{value:"线图层上排列的纹理的数量大致为 duration/interval",paraId:27,tocIndex:10},{value:".animate({\n    duration: 1,\n    interval: 0.2,\n    trailLength: 0.1\n});\n\n// 此时 纹理贴图数量为  duration / interval = 5\n",paraId:28,tocIndex:10},{value:"✨ textureBlend 参数",paraId:29,tocIndex:10},{value:"\n通过控制 style 方法中的 textureBlend 参数，我们可以控制纹理图层和线图层的混合情况",paraId:29,tocIndex:10},{value:"normal",paraId:30,tocIndex:10},{value:"replace",paraId:30,tocIndex:10},{value:".style({\n    lineTexture: true, // 开启线的贴图功能\n    iconStep: 30, // 设置贴图纹理的间距\n    textureBlend: 'replace', // 设置纹理混合方式，默认值为 normal，可选值有 normal/replace 两种\n  });\n\n",paraId:31,tocIndex:10},{value:"在线案例",paraId:32}]},29558:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(40159);const d=[{value:"我们经常需要在地图上绘制诸如道路、行动路线、水系等常见的路径，可以将这些绘制线的统称为路径图，即用一组首尾不闭合的点坐标对来定位的线图层。",paraId:0},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"下面我们来介绍如何绘制一个常见的路径图。",paraId:2,tocIndex:0},{value:"你可以在 ",paraId:3,tocIndex:0},{value:"L7",paraId:3,tocIndex:0},{value:" 官网上找到",paraId:3,tocIndex:0},{value:"在线案例",paraId:4,tocIndex:0},{value:"import { Scene, LineLayer } from '@antv/l7';\nimport { GaodeMap } from '@antv/l7-maps';\n\nconst scene = new Scene({\n  id: 'map',\n  map: new GaodeMap({\n    center: [120.15, 30.246],\n    zoom: 13.5,\n    style: 'dark',\n    rotation: -90,\n  }),\n});\nscene.addImage(\n  'arrow',\n  'https://gw.alipayobjects.com/zos/bmw-prod/ce83fc30-701f-415b-9750-4b146f4b3dd6.svg',\n);\nfetch('https://gw.alipayobjects.com/os/basement_prod/40ef2173-df66-4154-a8c0-785e93a5f18e.json')\n  .then((res) => res.json())\n  .then((data) => {\n    const layer = new LineLayer({})\n      .source(data)\n      .size(3)\n      .shape('line')\n      .texture('arrow')\n      .color('rgb(22,119,255)')\n      .animate({\n        interval: 1, // 间隔\n        duration: 1, // 持续时间，延时\n        trailLength: 2, // 流线长度\n      })\n      .style({\n        opacity: 0.6,\n        lineTexture: true, // 开启线的贴图功能\n        iconStep: 10, // 设置贴图纹理的间距\n        borderWidth: 0.4, // 默认文 0，最大有效值为 0.5\n        borderColor: '#fff', // 默认为 #ccc\n      });\n    scene.addLayer(layer);\n  });\n",paraId:5,tocIndex:0},{value:"我们一般将路径图的 ",paraId:6,tocIndex:1},{value:"shape",paraId:6,tocIndex:1},{value:" 参数设置成 ",paraId:6,tocIndex:1},{value:"line",paraId:6,tocIndex:1},{value:"。",paraId:6,tocIndex:1},{value:"对于路径图，我们一般只要设置常量表示路径的宽度即可。",paraId:7,tocIndex:2},{value:"layer.size(2); // 绘制宽度为 2 的路径\n",paraId:8,tocIndex:2},{value:"线图层通过在 style 中设置起始颜色和终点颜色来设置颜色渐变，渐变色的优先级比 color 方法设置的颜色更高",paraId:9,tocIndex:4},{value:"const layer = new LineLayer({})\n  .source(data, {\n    parser: {\n      type: 'csv',\n      x: 'lng1',\n      y: 'lat1',\n      x1: 'lng2',\n      y1: 'lat2',\n    },\n  })\n  .size(1)\n  .shape('arc')\n  .color('#8C1EB2')\n  .style({\n    sourceColor: '#f00', // 起点颜色\n    targetColor: '#0f0', // 终点颜色\n  });\n",paraId:10,tocIndex:4},{value:"在线案例",paraId:11},{value:"线图层通过在 style 中设置线的类型，同时指定虚线部分和实线部分",paraId:12,tocIndex:5},{value:"const layer = new LineLayer({})\n  .source(data)\n  .size(1.5)\n  .shape('line')\n  .color('标准名称', ['#5B8FF9', '#5CCEA1', '#F6BD16'])\n  .active(true)\n  .style({\n    lineType: 'dash',\n    dashArray: [5, 5],\n  });\nscene.addLayer(layer);\n",paraId:13,tocIndex:5},{value:"lineType\n默认为 solid，表示实线，dash 表示虚线",paraId:14,tocIndex:5},{value:"dashArray[len1: number, len2: number]\nlen1 实线长度\nlen2 间隔长度",paraId:14,tocIndex:5},{value:"在线案例",paraId:15},{value:"线图层支持在 style 中设置边框的宽度和颜色",paraId:16,tocIndex:6},{value:"const layer = new LineLayer({})\n  .source(data, {\n    parser: {\n      type: 'csv',\n      x: 'lng1',\n      y: 'lat1',\n      x1: 'lng2',\n      y1: 'lat2',\n    },\n  })\n  .size(1)\n  .shape('arc')\n  .color('#8C1EB2')\n  .style({\n    borderWidth: 0.35, // 默认文 0，最大有效值为 0.5\n    borderColor: '#888', // 默认为 #ccc\n  });\n",paraId:17,tocIndex:6},{value:"在线案例",paraId:18},{value:"线图层支持纹理贴图和多种表现形式，通过 ",paraId:19},{value:"scene.addImage",paraId:19},{value:" 方法添加到全局的资源，使用 ",paraId:19},{value:"texture",paraId:19},{value:" 方法指定贴图。",paraId:19},{value:"scene.addImage(\n  '02',\n  'https://gw.alipayobjects.com/zos/bmw-prod/ce83fc30-701f-415b-9750-4b146f4b3dd6.svg',\n);\nconst layer = new LineLayer()\n  .source(data)\n  .size(4)\n  .shape('line')\n  .texture('02')\n  .color('#25d8b7')\n  .animate({\n    interval: 1, // 间隔\n    duration: 1, // 持续时间，延时\n    trailLength: 2, // 流线长度\n  })\n  .style({\n    lineTexture: true, // 开启线的贴图功能\n    iconStep: 20, // 设置贴图纹理的间距\n  });\n",paraId:20},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"lineTexture 指定是否开启纹理贴图能力",paraId:21},{value:"iconStep 指定贴图在线图层上面排布的间隔",paraId:21},{value:"在线案例",paraId:22},{value:"✨ animate",paraId:23,tocIndex:7},{value:"\n当线图层 (",paraId:23,tocIndex:7},{value:"shape",paraId:23,tocIndex:7},{value:" 为 ",paraId:23,tocIndex:7},{value:"arc",paraId:23,tocIndex:7},{value:"/",paraId:23,tocIndex:7},{value:"arc3d",paraId:23,tocIndex:7},{value:") 开启动画模式的时候，纹理在线图层上的分布还会和 ",paraId:23,tocIndex:7},{value:"animate",paraId:23,tocIndex:7},{value:" 的参数相关.",paraId:23,tocIndex:7},{value:"线图层上排列的纹理的数量大致为 duration/interval",paraId:24,tocIndex:7},{value:".animate({\n    duration: 1,\n    interval: 0.2,\n    trailLength: 0.1\n});\n\n// 此时 纹理贴图数量为  duration / interval = 5\n",paraId:25,tocIndex:7},{value:"✨ textureBlend 参数",paraId:26,tocIndex:7},{value:"\n通过控制 style 方法中的 textureBlend 参数，我们可以控制纹理图层和线图层的混合情况",paraId:26,tocIndex:7},{value:"normal",paraId:27,tocIndex:7},{value:"replace",paraId:27,tocIndex:7},{value:".style({\n    lineTexture: true, // 开启线的贴图功能\n    iconStep: 30, // 设置贴图纹理的间距\n    textureBlend: 'replace', // 设置纹理混合方式，默认值为 normal，可选值有 normal/replace 两种\n  });\n\n",paraId:28,tocIndex:7},{value:"在线案例",paraId:29},{value:"layer.animate(true);\nlayer.animate(false);\n",paraId:30,tocIndex:9},{value:"duration 动画时间 单位(s)秒",paraId:31,tocIndex:10},{value:"interval 轨迹间隔, 取值区间 0 - 1",paraId:31,tocIndex:10},{value:"trailLength 轨迹长度 取值区间 0 - 1",paraId:31,tocIndex:10},{value:"layer.animate({\n  duration: 4,\n  interval: 0.2,\n  trailLength: 0.1,\n});\n",paraId:32,tocIndex:10},{value:"L7 目前动画参数为相对单位，我们默认一条线段的长度为 1\n",paraId:33,tocIndex:11},{value:"如果 interval = 0.2,则一条轨迹将会分成 5 段，如果 interval = 0.5 则为两段。",paraId:34,tocIndex:11},{value:"在线案例",paraId:35}]},25877:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(91887);const d=[{value:"简单线图层为用户提供了一种大数据量性能更优的选择，能轻松渲染有几十万个节点的线段，但相应的，对比与普通的线图层，简单线图层也丢失了一些其他能力。",paraId:0},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"下面我们来介绍如何绘制简单线。",paraId:2,tocIndex:0},{value:"你可以在 ",paraId:3,tocIndex:0},{value:"L7",paraId:3,tocIndex:0},{value:" 官网上找到",paraId:3,tocIndex:0},{value:"在线案例",paraId:4,tocIndex:0},{value:"import { LineLayer } from '@antv/l7';\nconst layer = new LineLayer()\n  .source(data)\n  .shape('simple')\n  .size(10) // size 方法不生效 线宽始终为 1px\n  .color('#f00')\n  .style(...)\n",paraId:5,tocIndex:0},{value:"为了绘制简单线，我们需要将 ",paraId:6,tocIndex:1},{value:"shape",paraId:6,tocIndex:1},{value:" 的参数设置成 ",paraId:6,tocIndex:1},{value:"simple",paraId:6,tocIndex:1},{value:"。",paraId:6,tocIndex:1},{value:"线图层通过在 style 中设置起始颜色和终点颜色来设置颜色渐变，渐变色的优先级比 color 方法设置的颜色更高",paraId:7,tocIndex:2},{value:"const layer = new LineLayer({})\n  .source(data, {\n    parser: {\n      type: 'csv',\n      x: 'lng1',\n      y: 'lat1',\n      x1: 'lng2',\n      y1: 'lat2',\n    },\n  })\n  .size(1)\n  .shape('arc')\n  .color('#8C1EB2')\n  .style({\n    sourceColor: '#f00', // 起点颜色\n    targetColor: '#0f0', // 终点颜色\n  });\n",paraId:8,tocIndex:2},{value:"在线案例",paraId:9},{value:"🌟 简单线图层不支持动画和纹理",paraId:10}]},31713:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(11189);const d=[{value:"地理围墙在原有线图层的基础上赋予了高度的概念，其他的使用和普通的线图保持一致。",paraId:0},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"下面我们来介绍如何绘制简单的地理围墙。",paraId:2,tocIndex:0},{value:"你可以在 ",paraId:3,tocIndex:0},{value:"L7",paraId:3,tocIndex:0},{value:" 官网上找到",paraId:3,tocIndex:0},{value:"在线案例",paraId:4,tocIndex:0},{value:"import { Scene, LineLayer } from '@antv/l7';\nimport { GaodeMap } from '@antv/l7-maps';\n\nconst scene = new Scene({\n  id: 'map',\n  map: new GaodeMap({\n    center: [119.297868, 29.732983],\n    zoom: 7.11,\n    rotation: 1.22,\n    pitch: 45.42056074766357,\n    style: 'dark',\n  }),\n});\n\nscene.on('loaded', () => {\n  fetch('https://gw.alipayobjects.com/os/bmw-prod/93a55259-328e-4e8b-8dc2-35e05844ed31.json')\n    .then((res) => res.json())\n    .then((data) => {\n      const layer = new LineLayer({}).source(data).size(40).shape('wall').style({\n        opacity: 1,\n        sourceColor: '#0DCCFF',\n        targetColor: 'rbga(255,255,255, 0)',\n      });\n      scene.addLayer(layer);\n    });\n});\n",paraId:5,tocIndex:1},{value:"为了绘制地理围墙，我们需要将 ",paraId:6,tocIndex:2},{value:"shape",paraId:6,tocIndex:2},{value:" 的参数设置成 ",paraId:6,tocIndex:2},{value:"wall",paraId:6,tocIndex:2},{value:"。",paraId:6,tocIndex:2},{value:"layer.animate(true);\nlayer.animate(false);\n",paraId:7,tocIndex:4},{value:"duration 动画时间 单位(s)秒",paraId:8,tocIndex:5},{value:"interval 轨迹间隔, 取值区间 0 - 1",paraId:8,tocIndex:5},{value:"trailLength 轨迹长度 取值区间 0 - 1",paraId:8,tocIndex:5},{value:"layer.animate({\n  duration: 4,\n  interval: 0.2,\n  trailLength: 0.1,\n});\n",paraId:9,tocIndex:5},{value:"L7 目前动画参数为相对单位，我们默认一条线段的长度为 1\n",paraId:10,tocIndex:6},{value:"如果 interval = 0.2,则一条轨迹将会分成 5 段，如果 interval = 0.5 则为两段。",paraId:11,tocIndex:6},{value:"在线案例",paraId:12},{value:"线图层通过在 style 中设置起始颜色和终点颜色来设置颜色渐变，渐变色的优先级比 color 方法设置的颜色更高",paraId:13,tocIndex:8},{value:"const layer = new LineLayer({})\n  .source(data, {\n    parser: {\n      type: 'csv',\n      x: 'lng1',\n      y: 'lat1',\n      x1: 'lng2',\n      y1: 'lat2',\n    },\n  })\n  .size(1)\n  .shape('arc')\n  .color('#8C1EB2')\n  .style({\n    sourceColor: '#f00', // 起点颜色\n    targetColor: '#0f0', // 终点颜色\n  });\n",paraId:14,tocIndex:8},{value:"在线案例",paraId:15},{value:"🌟 目前渐变色的方向为垂直向上",paraId:16},{value:"线图层支持纹理贴图和多种表现形式，通过 ",paraId:17},{value:"scene.addImage",paraId:17},{value:" 方法添加到全局的资源，使用 ",paraId:17},{value:"texture",paraId:17},{value:" 方法指定贴图。",paraId:17},{value:"scene.addImage(\n  '02',\n  'https://gw.alipayobjects.com/zos/bmw-prod/ce83fc30-701f-415b-9750-4b146f4b3dd6.svg',\n);\nconst layer = new LineLayer()\n  .source(data)\n  .size(4)\n  .shape('line')\n  .texture('02')\n  .color('#25d8b7')\n  .animate({\n    interval: 1, // 间隔\n    duration: 1, // 持续时间，延时\n    trailLength: 2, // 流线长度\n  })\n  .style({\n    lineTexture: true, // 开启线的贴图功能\n    iconStep: 20, // 设置贴图纹理的间距\n  });\n",paraId:18},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"lineTexture 指定是否开启纹理贴图能力",paraId:19},{value:"iconStep 指定贴图在线图层上面排布的间隔",paraId:19},{value:"在线案例",paraId:20},{value:"✨ animate",paraId:21,tocIndex:9},{value:"\n当线图层 (",paraId:21,tocIndex:9},{value:"shape",paraId:21,tocIndex:9},{value:" 为 ",paraId:21,tocIndex:9},{value:"arc",paraId:21,tocIndex:9},{value:"/",paraId:21,tocIndex:9},{value:"arc3d",paraId:21,tocIndex:9},{value:") 开启动画模式的时候，纹理在线图层上的分布还会和 ",paraId:21,tocIndex:9},{value:"animate",paraId:21,tocIndex:9},{value:" 的参数相关.",paraId:21,tocIndex:9},{value:"线图层上排列的纹理的数量大致为 duration/interval",paraId:22,tocIndex:9},{value:".animate({\n    duration: 1,\n    interval: 0.2,\n    trailLength: 0.1\n});\n\n// 此时 纹理贴图数量为  duration / interval = 5\n",paraId:23,tocIndex:9},{value:"✨ textureBlend 参数",paraId:24,tocIndex:9},{value:"\n通过控制 style 方法中的 textureBlend 参数，我们可以控制纹理图层和线图层的混合情况",paraId:24,tocIndex:9},{value:"normal",paraId:25,tocIndex:9},{value:"replace",paraId:25,tocIndex:9},{value:".style({\n    lineTexture: true, // 开启线的贴图功能\n    iconStep: 30, // 设置贴图纹理的间距\n    textureBlend: 'replace', // 设置纹理混合方式，默认值为 normal，可选值有 normal/replace 两种\n  });\n\n",paraId:26,tocIndex:9},{value:"在线案例",paraId:27},{value:"🌟 地理围栏支持了新的样式参数 iconStepCount",paraId:28},{value:"纹理间隔只有在开启纹理的时候才会生效",paraId:29},{value:"纹理间隔支持配置纹理之间的间距",paraId:29},{value:"纹理间隔需要和纹理间距配合使用",paraId:29},{value:".style({\n  lineTexture: true, // 开启线的贴图功能\n  iconStep: 40, // 设置贴图纹理的间距\n  iconStepCount: 4\n})\n",paraId:30},{value:"wall",paraId:31,tocIndex:10},{value:" 支持了固定高度配置 ",paraId:31,tocIndex:10},{value:"heightfixed",paraId:31,tocIndex:10},{value:"。",paraId:31,tocIndex:10},{value:" .style({\n     heightfixed: true // 默认为 false，开启后实际世界高度不变（注意调整尺寸）\n })\n",paraId:32,tocIndex:10}]},54949:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(49670);const d=[{value:"首先，",paraId:0,tocIndex:1},{value:"注册开发者账号",paraId:0,tocIndex:1},{value:"，成为高德开放平台开发者",paraId:0,tocIndex:1},{value:"登陆之后，在进入「应用管理」 页面「创建新应用」",paraId:1,tocIndex:1},{value:"为应用",paraId:2,tocIndex:1},{value:"添加 Key",paraId:2,tocIndex:1},{value:"，「服务平台」一项请选择「 Web 端 ( JSAPI ) 」",paraId:2,tocIndex:1},{value:"高德 2.0 版本在L7内部动态引入了高德地图 ",paraId:3,tocIndex:2},{value:"JS API",paraId:3,tocIndex:2},{value:" ，因此不再需要单独引入高德 ",paraId:3,tocIndex:2},{value:"JS API",paraId:3,tocIndex:2},{value:"，只需设置 ",paraId:3,tocIndex:2},{value:"type",paraId:3,tocIndex:2},{value:" 为 ",paraId:3,tocIndex:2},{value:"amap",paraId:3,tocIndex:2},{value:" 并且传入 ",paraId:3,tocIndex:2},{value:"token",paraId:3,tocIndex:2},{value:"。",paraId:3,tocIndex:2},{value:'<script src="https://unpkg.com/@antv/l7"><\/script>\n',paraId:4,tocIndex:2},{value:"同时需要为 ",paraId:5,tocIndex:3},{value:"div",paraId:5,tocIndex:3},{value:"设置 高度和宽度。",paraId:5,tocIndex:3},{value:'<div id="map"></div>\n',paraId:6,tocIndex:3},{value:"const scene = new L7.Scene({\n  id: 'map',\n  map: new L7.GaodeMap({\n    style: 'dark', // 样式URL\n    center: [120.19382669582967, 30.258134],\n    pitch: 0,\n    zoom: 12,\n    token: '高德地图token',\n  }),\n});\n",paraId:7,tocIndex:4},{value:"这样我们就完成了通过 ",paraId:8,tocIndex:4},{value:"L7",paraId:8,tocIndex:4},{value:" 实例化高德地图。",paraId:8,tocIndex:4},{value:"首先我们需要获取数据，获取数据方法，这里我们获取在线的地理数据。",paraId:9,tocIndex:5},{value:"然后我们就可以初始一个 ",paraId:9,tocIndex:5},{value:"Layer",paraId:9,tocIndex:5},{value:"，并添加到 ",paraId:9,tocIndex:5},{value:"Scene",paraId:9,tocIndex:5},{value:" 就完成了图层的添加。",paraId:9,tocIndex:5},{value:"fetch('https://gw.alipayobjects.com/os/rmsportal/oVTMqfzuuRFKiDwhPSFL.json')\n  .then((res) => res.json())\n  .then((data) => {\n    const pointLayer = new L7.PointLayer({})\n      .source(data.list, {\n        parser: {\n          type: 'json',\n          x: 'j',\n          y: 'w',\n        },\n      })\n      .shape('cylinder')\n      .size('t', function (level) {\n        return [1, 2, level * 2 + 20];\n      })\n      .color('t', [\n        '#094D4A',\n        '#146968',\n        '#1D7F7E',\n        '#289899',\n        '#34B6B7',\n        '#4AC5AF',\n        '#5FD3A6',\n        '#7BE39E',\n        '#A1EDB8',\n        '#CEF8D6',\n      ]);\n    scene.addLayer(pointLayer);\n  });\n",paraId:10,tocIndex:5},{value:"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>创建地图场景</title>\n    <style>\n      html,\n      body {\n        overflow: hidden;\n        margin: 0;\n      }\n      #map {\n        position: absolute;\n        top: 0;\n        bottom: 0;\n        width: 100%;\n      }\n    </style>\n  </head>\n  <body>\n    <div id=\"map\"></div>\n    <script src=\"https://unpkg.com/@antv/l7\"><\/script>\n    <script>\n      const scene = new L7.Scene({\n        id: 'map',\n        map: new L7.GaodeMap({\n          style: 'dark', // 样式URL\n          center: [120.19382669582967, 30.258134],\n          pitch: 0,\n          zoom: 12,\n          token: '高德地图token',\n        }),\n      });\n\n      fetch('https://gw.alipayobjects.com/os/rmsportal/oVTMqfzuuRFKiDwhPSFL.json')\n        .then((res) => res.json())\n        .then((data) => {\n          const pointLayer = new L7.PointLayer({})\n            .source(data.list, {\n              parser: {\n                type: 'json',\n                x: 'j',\n                y: 'w',\n              },\n            })\n            .shape('cylinder')\n            .size('t', function (level) {\n              return [1, 2, level * 2 + 20];\n            })\n            .color('t', [\n              '#094D4A',\n              '#146968',\n              '#1D7F7E',\n              '#289899',\n              '#34B6B7',\n              '#4AC5AF',\n              '#5FD3A6',\n              '#7BE39E',\n              '#A1EDB8',\n              '#CEF8D6',\n            ]);\n          scene.addLayer(pointLayer);\n        });\n    <\/script>\n  </body>\n</html>\n",paraId:11,tocIndex:6}]},94985:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(69971);const d=[{value:"我们在使用高德地图作为地图底图的时候，可以借助高德地图提供的插件实现也中需求。",paraId:0},{value:"道路查询",paraId:1,tocIndex:0},{value:"const scene = new Scene({\n  id: 'map',\n  map: new Mapbox({\n    style: 'blank',\n    center: [103.83735604457024, 1.360253881403068],\n    pitch: 4.00000000000001,\n    zoom: 10.210275860702593,\n    rotation: 19.313180925794313,\n  }),\n});\n",paraId:2,tocIndex:0},{value:"在线案例",paraId:3},{value:"地图工具栏",paraId:4,tocIndex:1},{value:"scene.on('loaded', () => {\n  window.AMap.plugin([ 'AMap.ToolBar', 'AMap.LineSearch' ], () => {\n    scene.map.addControl(new AMap.ToolBar());\n\n    const linesearch = new AMap.LineSearch({\n      pageIndex: 1, // 页码，默认值为1\n      pageSize: 1, // 单页显示结果条数，默认值为20，最大值为50\n      city: '北京', // 限定查询城市，可以是城市名（中文/中文全拼）、城市编码，默认值为『全国』\n      extensions: 'all' // 是否返回公交线路详细信息，默认值为『base』\n    });\n",paraId:5,tocIndex:1},{value:"在线案例",paraId:6},{value:"加载使用 ",paraId:7,tocIndex:2},{value:"xyz",paraId:7,tocIndex:2},{value:" 地图瓦片",paraId:7,tocIndex:2},{value:"scene.on('loaded', () => {\n  var xyzTileLayer = new window.AMap.TileLayer({\n    getTileUrl:\n      'https://wprd0{1,2,3,4}.is.autonavi.com/appmaptile?x=[x]&y=[y]&z=[z]&size=1&scl=1&style=8&ltype=11',\n    zIndex: 100,\n  });\n  scene.map.add(xyzTileLayer);\n});\n",paraId:8,tocIndex:2},{value:"在线案例",paraId:9},{value:"加载使用默认的卫星瓦片",paraId:10,tocIndex:3},{value:"scene.on('loaded', () => {\n  scene.map.add(new window.AMap.TileLayer.Satellite());\n});\n",paraId:11,tocIndex:3},{value:"在线案例",paraId:12}]},64770:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(42248);const d=[{value:"很多情况下我们只是做些简单的地理可视化，不需要加载地图，本教程就是告诉大家如果在L7中使用无底图模式。",paraId:0},{value:"L7",paraId:1},{value:" 在地图样式层面增加了无底图样式 ",paraId:1},{value:"blank",paraId:1},{value:" 无底图模式。",paraId:1},{value:"不需要使用 ",paraId:1},{value:"mapbox token",paraId:1},{value:" ，也不需要注册 ",paraId:1},{value:"mapbox",paraId:1},{value:" 账户。",paraId:1},{value:"const scene = new Scene({\n  id: 'map',\n  map: new Mapbox({\n    style: 'blank',\n    center: [103.83735604457024, 1.360253881403068],\n    pitch: 4.00000000000001,\n    zoom: 10.210275860702593,\n    rotation: 19.313180925794313,\n  }),\n});\n",paraId:2},{value:"🌟 如果你只是需要做个中国地图，世界地图这样填充图，建议你采用这样的模式。",paraId:3}]},36240:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(98098);const d=[{value:"L7",paraId:0},{value:" 通过提供插件的形式实现了对 ",paraId:0},{value:"Leaflet",paraId:0},{value:" 的支持，实现 ",paraId:0},{value:"Leaflet",paraId:0},{value:" 地图和 ",paraId:0},{value:"L7",paraId:0},{value:" 可视化图层的融合。",paraId:0},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"L7-Leaflet",paraId:2,tocIndex:0},{value:" 是对外开源的插件 ",paraId:2,tocIndex:0},{value:"github 地址",paraId:2,tocIndex:0},{value:" npm install  @antv/l7-leaflet\n",paraId:3,tocIndex:2},{value:'<script src="https://unpkg.com/@antv/l7-leaflet"><\/script>\n',paraId:4,tocIndex:3},{value:"import * as L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { LineLayer } from '@antv/l7';\nimport { L7Layer } from '@antv/l7-leaflet';\n\nimport React, { useEffect } from 'react';\n\nexport default () => {\n  useEffect(() => {\n    const map = L.map('map', {\n      minZoom: 1,\n    }).setView([30, 112], 3);\n    const mapType = 'vec';\n    L.tileLayer(\n      'https://t{s}.tianditu.gov.cn/' +\n        mapType +\n        '_w/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=' +\n        mapType +\n        '&STYLE=default&TILEMATRIXSET=w&FORMAT=tiles&TILECOL={x}&TILEROW={y}&TILEMATRIX={z}&tk=b72aa81ac2b3cae941d1eb213499e15e',\n      {\n        subdomains: ['0', '1', '2', '3', '4', '5', '6', '7'],\n        attribution:\n          '&copy; <a href=\"http://lbs.tianditu.gov.cn/home.html\">天地图 GS(2022)3124号 - 甲测资字1100471</a>',\n      },\n    ).addTo(map);\n    const mapLabelType = 'cva';\n    L.tileLayer(\n      'https://t{s}.tianditu.gov.cn/' +\n        mapLabelType +\n        '_w/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=' +\n        mapLabelType +\n        '&STYLE=default&TILEMATRIXSET=w&FORMAT=tiles&TILECOL={x}&TILEROW={y}&TILEMATRIX={z}&tk=b72aa81ac2b3cae941d1eb213499e15e',\n      {\n        subdomains: ['0', '1', '2', '3', '4', '5', '6', '7'],\n      },\n    ).addTo(map);\n\n    L.marker([30, 112])\n      .addTo(map)\n      .setIcon(\n        new L.Icon({\n          iconUrl:\n            'https://gw.alipayobjects.com/mdn/rms_5e897d/afts/img/A*6ONoRKNECC0AAAAAAAAAAAAAARQnAQ',\n          iconSize: [16, 16],\n        }),\n      )\n      .bindPopup('A pretty CSS3 popup.<br> Easily customizable.')\n      .openPopup();\n\n    const l7layer = new L7Layer().addTo(map);\n    const scene = l7layer.getScene();\n    fetch('https://gw.alipayobjects.com/os/rmsportal/UEXQMifxtkQlYfChpPwT.txt')\n      .then((res) => res.text())\n      .then((data) => {\n        const layer = new LineLayer({})\n          .source(data, {\n            parser: {\n              type: 'csv',\n              x: 'lng1',\n              y: 'lat1',\n              x1: 'lng2',\n              y1: 'lat2',\n            },\n          })\n          .size(1)\n          .shape('arc')\n          .color('#8C1EB2')\n          .style({\n            opacity: 0.8,\n            blur: 0.99,\n          });\n        scene.addLayer(layer);\n      });\n  }, []);\n\n  return (\n    <div\n      id=\"map\"\n      style={{\n        height: '500px',\n        position: 'relative',\n      }}\n    />\n  );\n};\n",paraId:5,tocIndex:5},{value:"import * as L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { LineLayer } from '@antv/l7';\nimport { L7Layer } from '@antv/l7-leaflet';\nimport React, { useEffect } from 'react';\n\nexport default () => {\n  useEffect(() => {\n    const map = L.map('map', {\n      minZoom: 1,\n    }).setView([30, 112], 3);\n    const mapType = 'vec';\n    L.tileLayer(\n      'https://t{s}.tianditu.gov.cn/' +\n        mapType +\n        '_w/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=' +\n        mapType +\n        '&STYLE=default&TILEMATRIXSET=w&FORMAT=tiles&TILECOL={x}&TILEROW={y}&TILEMATRIX={z}&tk=b72aa81ac2b3cae941d1eb213499e15e',\n      {\n        subdomains: ['0', '1', '2', '3', '4', '5', '6', '7'],\n        attribution:\n          '&copy; <a href=\"http://lbs.tianditu.gov.cn/home.html\">天地图 GS(2022)3124号 - 甲测资字1100471</a>',\n      },\n    ).addTo(map);\n    const mapLabelType = 'cva';\n    L.tileLayer(\n      'https://t{s}.tianditu.gov.cn/' +\n        mapLabelType +\n        '_w/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=' +\n        mapLabelType +\n        '&STYLE=default&TILEMATRIXSET=w&FORMAT=tiles&TILECOL={x}&TILEROW={y}&TILEMATRIX={z}&tk=b72aa81ac2b3cae941d1eb213499e15e',\n      {\n        subdomains: ['0', '1', '2', '3', '4', '5', '6', '7'],\n      },\n    ).addTo(map);\n\n    L.marker([30, 112])\n      .addTo(map)\n      .setIcon(\n        new L.Icon({\n          iconUrl:\n            'https://gw.alipayobjects.com/mdn/rms_5e897d/afts/img/A*6ONoRKNECC0AAAAAAAAAAAAAARQnAQ',\n          iconSize: [16, 16],\n        }),\n      )\n      .bindPopup('A pretty CSS3 popup.<br> Easily customizable.')\n      .openPopup();\n\n    const l7layer = new L7Layer().addTo(map);\n    const scene = l7layer.getScene();\n    fetch('https://gw.alipayobjects.com/os/rmsportal/UEXQMifxtkQlYfChpPwT.txt')\n      .then((res) => res.text())\n      .then((data) => {\n        const layer = new LineLayer({})\n          .source(data, {\n            parser: {\n              type: 'csv',\n              x: 'lng1',\n              y: 'lat1',\n              x1: 'lng2',\n              y1: 'lat2',\n            },\n          })\n          .size(1)\n          .shape('arc')\n          .color('#8C1EB2')\n          .style({\n            opacity: 0.8,\n            blur: 0.99,\n          });\n        scene.addLayer(layer);\n      });\n  }, []);\n\n  return (\n    <div\n      id=\"map\"\n      style={{\n        height: '500px',\n        position: 'relative',\n      }}\n    />\n  );\n};\n",paraId:6,tocIndex:6}]},89170:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(46777);const d=[{value:"1、注册MapBox token",paraId:0,tocIndex:0},{value:"注册地址 ",paraId:1,tocIndex:0},{value:"Mapbox Access Tokens",paraId:1,tocIndex:0},{value:"2、引入mapbox.gl JS 和 css",paraId:2,tocIndex:0},{value:"使用mapbox 需要单独引入 mapbox",paraId:3,tocIndex:0},{value:'<link href="https://api.tiles.mapbox.com/mapbox-gl-js/v1.5.0/mapbox-gl.css" rel="stylesheet" />\n\n<script src="https://api.tiles.mapbox.com/mapbox-gl-js/v1.5.0/mapbox-gl.js"><\/script>\n',paraId:4,tocIndex:0},{value:'<script src="https://unpkg.com/@antv/l7"><\/script>\n',paraId:5,tocIndex:1},{value:"同时需要为Div设置 高度和宽度",paraId:6,tocIndex:2},{value:'<div id="map"></div>\n',paraId:7,tocIndex:2},{value:"const scene = new L7.Scene({\n  id: 'map',\n  map: new L7.Mapbox({\n    style: 'dark', // 样式URL\n    center: [120.19382669582967, 30.258134],\n    pitch: 0,\n    zoom: 12,\n    token: 'mapbox token',\n  }),\n});\n",paraId:8,tocIndex:3},{value:"这样我们就完成了通过L7 实例化mapbox地图",paraId:9,tocIndex:3},{value:"fetch('https://gw.alipayobjects.com/os/rmsportal/oVTMqfzuuRFKiDwhPSFL.json')\n  .then((res) => res.json())\n  .then((data) => {\n    const pointLayer = new L7.PointLayer({})\n      .source(data.list, {\n        parser: {\n          type: 'json',\n          x: 'j',\n          y: 'w',\n        },\n      })\n      .shape('cylinder')\n      .size('t', function (level) {\n        return [1, 2, level * 2 + 20];\n      })\n      .color('t', [\n        '#094D4A',\n        '#146968',\n        '#1D7F7E',\n        '#289899',\n        '#34B6B7',\n        '#4AC5AF',\n        '#5FD3A6',\n        '#7BE39E',\n        '#A1EDB8',\n        '#CEF8D6',\n      ])\n      .style({\n        opacity: 1.0,\n      });\n    scene.addLayer(pointLayer);\n  });\n",paraId:10,tocIndex:4},{value:"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>创建地图场景</title>\n    <style>\n      ::-webkit-scrollbar {\n        display: none;\n      }\n      html,\n      body {\n        overflow: hidden;\n        margin: 0;\n      }\n      #map {\n        position: absolute;\n        top: 0;\n        bottom: 0;\n        width: 100%;\n      }\n    </style>\n  </head>\n  <body>\n    <div id=\"map\"></div>\n    <link href=\"https://api.tiles.mapbox.com/mapbox-gl-js/v1.5.0/mapbox-gl.css\" rel=\"stylesheet\" />\n\n    <script src=\"https://api.tiles.mapbox.com/mapbox-gl-js/v1.5.0/mapbox-gl.js\"><\/script>\n    <script src=\"https://unpkg.com/@antv/l7\"><\/script>\n    <script>\n      const scene = new L7.Scene({\n        id: 'map',\n        map: new L7.Mapbox({\n          style: 'dark', // 样式URL\n          center: [120.19382669582967, 30.258134],\n          pitch: 0,\n          zoom: 12,\n          token: 'mapbox token',\n        }),\n      });\n\n      fetch('https://gw.alipayobjects.com/os/rmsportal/oVTMqfzuuRFKiDwhPSFL.json')\n        .then((res) => res.json())\n        .then((data) => {\n          const pointLayer = new L7.PointLayer({})\n            .source(data.list, {\n              parser: {\n                type: 'json',\n                x: 'j',\n                y: 'w',\n              },\n            })\n            .shape('cylinder')\n            .size('t', function (level) {\n              return [1, 2, level * 2 + 20];\n            })\n            .color('t', [\n              '#094D4A',\n              '#146968',\n              '#1D7F7E',\n              '#289899',\n              '#34B6B7',\n              '#4AC5AF',\n              '#5FD3A6',\n              '#7BE39E',\n              '#A1EDB8',\n              '#CEF8D6',\n            ])\n            .style({\n              opacity: 1.0,\n            });\n          scene.addLayer(pointLayer);\n        });\n    <\/script>\n  </body>\n</html>\n",paraId:11,tocIndex:5}]},16834:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(58097);const d=[{value:"目前 ",paraId:0},{value:"L7",paraId:0},{value:" 支持高德和 ",paraId:0},{value:"Mapbox",paraId:0},{value:" 两种底图，高德地图由于使用在线 ",paraId:0},{value:"API",paraId:0},{value:" 不能做离线部署，如果你有离线部署的需求可以采用 ",paraId:0},{value:"MapBox",paraId:0},{value:"做底图。",paraId:0},{value:"L7",paraId:0},{value:" 在接口层统一了不同底图直接的差异，一套可视化代码可以运行在 ",paraId:0},{value:"L7",paraId:0},{value:" 支持的任意底图上。本文主要介绍如何离线使用，国内加速使用 ",paraId:0},{value:"MapBox",paraId:0},{value:"，同时也提供了在线的字体服务，你也可也下载到本地使用。",paraId:0},{value:"import { Scene, LineLayer } from '@antv/l7';\nimport { Mapbox } from '@antv/l7-maps';\nconst scene = new Scene({\n  id: 'map',\n  map: new Mapbox({\n    style: 'dark',\n    center: [103.83735604457024, 1.360253881403068],\n    pitch: 4.00000000000001,\n    zoom: 10.210275860702593,\n    rotation: 19.313180925794313,\n    token: 'xxxx',\n  }),\n});\n",paraId:1,tocIndex:0},{value:"离线部署",paraId:2,tocIndex:1},{value:"国内加速",paraId:2,tocIndex:1},{value:"不使用 ",paraId:2,tocIndex:1},{value:"mapbox token",paraId:2,tocIndex:1},{value:"你只要不使用 ",paraId:3,tocIndex:2},{value:"MapBox",paraId:3,tocIndex:2},{value:" 的数据底图服务就可以离线使用，",paraId:3,tocIndex:2},{value:"mapbox",paraId:3,tocIndex:2},{value:" 所有数据服务资源都是在 ",paraId:3,tocIndex:2},{value:"style",paraId:3,tocIndex:2},{value:" 里面配置的。除了数据服务以外还有一些静态资源，这些主要是图片标注，文字标注的时候使用。",paraId:3,tocIndex:2},{value:"mapbox",paraId:4,tocIndex:2},{value:" 本身数据资源在国外如果在国内单独部署使用，加载速度体验还是很好的。",paraId:4,tocIndex:2},{value:"我们先了解一下 ",paraId:5,tocIndex:2},{value:"MapBox",paraId:5,tocIndex:2},{value:" 样式包含哪些配置项。",paraId:5,tocIndex:2},{value:"version",paraId:6,tocIndex:3},{value:"：",paraId:6,tocIndex:3},{value:"JS SDK",paraId:6,tocIndex:3},{value:" 对应版本必须为 8。",paraId:6,tocIndex:3},{value:"name",paraId:6,tocIndex:3},{value:"：样式的命名。",paraId:6,tocIndex:3},{value:"sprite",paraId:6,tocIndex:3},{value:"：雪碧图，将一个地图涉及到的所有零星图标图片都包含到一张大图中。",paraId:6,tocIndex:3},{value:"glyphs",paraId:6,tocIndex:3},{value:"：",paraId:6,tocIndex:3},{value:".pbf",paraId:6,tocIndex:3},{value:" 格式的字体样式，例如微软雅黑等字体库。",paraId:6,tocIndex:3},{value:"sources",paraId:6,tocIndex:3},{value:"：图层的资源文件，可以支持矢量切片、栅格、",paraId:6,tocIndex:3},{value:"dem",paraId:6,tocIndex:3},{value:" 栅格、图片、",paraId:6,tocIndex:3},{value:"geojson",paraId:6,tocIndex:3},{value:"、视频等格式。",paraId:6,tocIndex:3},{value:"layers",paraId:6,tocIndex:3},{value:"：是对每个图层样式的描述，这里就是对地图样式渲染的关键，可以做定制化地图样式。",paraId:6,tocIndex:3},{value:"具体参数及其 ",paraId:7,tocIndex:3},{value:"api",paraId:7,tocIndex:3},{value:" 可以参考 ",paraId:7,tocIndex:3},{value:"mapbox",paraId:7,tocIndex:3},{value:" 官网。",paraId:7,tocIndex:3},{value:"如果做到本地化只需要 ",paraId:8,tocIndex:3},{value:"sprite",paraId:8,tocIndex:3},{value:"，",paraId:8,tocIndex:3},{value:"glyphs",paraId:8,tocIndex:3},{value:" 本地化就可以了，地图服务可以加载其他服务。",paraId:8,tocIndex:3},{value:"如果你不需要使用 ",paraId:9,tocIndex:3},{value:"MapBox",paraId:9,tocIndex:3},{value:" 数据服务，可视化层完成用 ",paraId:9,tocIndex:3},{value:"L7",paraId:9,tocIndex:3},{value:" 渲染那就更简单了。",paraId:9,tocIndex:3},{value:"你只需要将 ",paraId:10,tocIndex:3},{value:"MapBox",paraId:10,tocIndex:3},{value:" 的地图样式设置 ",paraId:10,tocIndex:3},{value:"blank",paraId:10,tocIndex:3},{value:"。",paraId:10,tocIndex:3},{value:"const scene = new Scene({\n  id: 'map',\n  map: new Mapbox({\n    style: 'blank',\n    center: [103.83735604457024, 1.360253881403068],\n    pitch: 4.00000000000001,\n    zoom: 10.210275860702593,\n    rotation: 19.313180925794313,\n  }),\n});\n",paraId:11,tocIndex:3},{value:"blank",paraId:12,tocIndex:3},{value:" 样式以为无底图样式，这种样式下就不需要使用 ",paraId:12,tocIndex:3},{value:"mapbox",paraId:12,tocIndex:3},{value:" 服务，也不需要使用 ",paraId:12,tocIndex:3},{value:"mapbox",paraId:12,tocIndex:3},{value:" 的 ",paraId:12,tocIndex:3},{value:"token",paraId:12,tocIndex:3},{value:"。",paraId:12,tocIndex:3},{value:"如果你需要使用 ",paraId:13,tocIndex:4},{value:"mapbox",paraId:13,tocIndex:4},{value:" 字段的图片标注，你需要本地化雪碧图资源",paraId:13,tocIndex:4},{value:"只需要下载两个文件即可",paraId:13,tocIndex:4},{value:"sprite.json 主要记录每个图表在大图上位置",paraId:13,tocIndex:4},{value:"sprite.png  每个小图标组成的大图",paraId:13,tocIndex:4},{value:"在线雪碧图服务地址:",paraId:14,tocIndex:4},{value:"https://lzxue.github.io/font-glyphs/sprite/sprite",paraId:14,tocIndex:4},{value:"如果需要使用 ",paraId:15,tocIndex:5},{value:"mapbox",paraId:15,tocIndex:5},{value:" 文章标注功能需要本地化，如果你的渲染能力都是用 ",paraId:15,tocIndex:5},{value:"L7",paraId:15,tocIndex:5},{value:" 实现的，这个过程也是不需要的。",paraId:15,tocIndex:5},{value:"L7",paraId:16,tocIndex:5},{value:" 提供了在线字体服务",paraId:16,tocIndex:5},{value:" 目前支持4种字体。",paraId:16,tocIndex:5},{value:"阿里巴巴普惠体",paraId:17,tocIndex:5},{value:"noto",paraId:17,tocIndex:5},{value:"opensan",paraId:17,tocIndex:5},{value:"roboto",paraId:17,tocIndex:5},{value:"如果你有新的字体需求可提PR，帮你自动生成在线可用的字体服务，你可以在线使用，也可以下载到本地使用。",paraId:18,tocIndex:5},{value:"字体服务下载：",paraId:19,tocIndex:5},{value:"gh-pages分支",paraId:19,tocIndex:5},{value:" 你可以 ",paraId:19,tocIndex:5},{value:"clone",paraId:19,tocIndex:5},{value:" 下来直接使用。",paraId:19,tocIndex:5},{value:"你也可以使用在线服务",paraId:20,tocIndex:5},{value:"github服务",paraId:20,tocIndex:5},{value:"https://lzxue.github.io/font-glyphs/glyphs/{fontstack}/{range}.pbf",paraId:20,tocIndex:5},{value:"蚂蚁CDN：",paraId:20,tocIndex:5},{value:"https://gw.alipayobjects.com/os/antvdemo/assets/mapbox/glyphs/{fontstack}/{range}.pbf",paraId:20,tocIndex:5},{value:"1.加载",paraId:21,tocIndex:6},{value:"第三方底图",paraId:21,tocIndex:6},{value:"，栅格瓦片图层做底图，如天地图，高德，",paraId:21,tocIndex:6},{value:"google",paraId:21,tocIndex:6},{value:" 的栅格瓦片都可以",paraId:21,tocIndex:6},{value:" 2.下载",paraId:21,tocIndex:6},{value:"opensteetmap ",paraId:21,tocIndex:6},{value:"矢量瓦片地图做底图",paraId:21,tocIndex:6},{value:" 3.自己业务数据发布底图服务，或者矢量瓦片服务。",paraId:21,tocIndex:6},{value:"这里还有个更完备的解决方案",paraId:22,tocIndex:6},{value:" ",paraId:22,tocIndex:6},{value:"https://jingsam.github.io/foxgis-server-lite/#/",paraId:22,tocIndex:6},{value:"所有的服务资源已经准备好了，这样我们就可以独立使用 ",paraId:23,tocIndex:7},{value:"mapbox",paraId:23,tocIndex:7},{value:" 服务，不需要再申请 ",paraId:23,tocIndex:7},{value:"mapbox",paraId:23,tocIndex:7},{value:" 的 ",paraId:23,tocIndex:7},{value:"token",paraId:23,tocIndex:7},{value:"。",paraId:23,tocIndex:7},{value:"import { Scene, LineLayer } from '@antv/l7';\nimport { Mapbox } from '@antv/l7-maps';\nconst scene = new Scene({\n  id: 'map',\n  map: new Mapbox({\n    style: {\n      version: 8,\n      name: 'blank',\n      sprite: 'https://lzxue.github.io/font-glyphs/sprite/sprite',\n      glyphs:\n        'https://gw.alipayobjects.com/os/antvdemo/assets/mapbox/glyphs/{fontstack}/{range}.pbf',\n      sources: {},\n      layers: [\n        {\n          id: 'background',\n          type: 'background',\n          paint: {\n            'background-color': 'white',\n          },\n        },\n      ],\n    },\n    center: [103.83735604457024, 1.360253881403068],\n    pitch: 4.00000000000001,\n    zoom: 10.210275860702593,\n    rotation: 19.313180925794313,\n    token: 'xxxx',\n  }),\n});\n",paraId:24,tocIndex:7},{value:"离线，无token使用mapbox demo",paraId:25,tocIndex:7}]},60440:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(60515);const d=[{value:"L7",paraId:0},{value:" 支持通过瓦片图层的方式来加载天地图瓦片。",paraId:0},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"下面我们来介绍如何快速创建天地图地图。",paraId:2,tocIndex:0},{value:"import { Scene, RasterLayer } from '@antv/l7';\nimport { Map } from '@antv/l7-maps';\n\nconst scene = new Scene({\n  id: 'map',\n  map: new Map({\n    center: [ 90.268, 40.3628 ],\n    zoom: 3\n  })\n});\nscene.on('loaded', () => {\n  // 底图服务\n  const baseLayer = new RasterLayer({ zIndex: 1 });\n  .source(\n    'https://t1.tianditu.gov.cn/DataServer?T=vec_w&X={x}&Y={y}&L={z}&tk=6557fd8a19b09d6e91ae6abf9d13ccbd',\n    {\n      parser: {\n        type: 'rasterTile',\n        tileSize: 256,\n      }\n    }\n  );\n  // 注记服务\n  const annotionLayer = new RasterLayer({ zIndex: 2 });\n  .source(\n    'https://t1.tianditu.gov.cn/DataServer?T=cva_w&X={x}&Y={y}&L={z}&tk=6557fd8a19b09d6e91ae6abf9d13ccbd',\n    {\n      parser: {\n        type: 'rasterTile',\n        tileSize: 256,\n      }\n    }\n  );\n  scene.addLayer(baseLayer);\n  scene.addLayer(annotionLayer);\n});\n\n",paraId:3,tocIndex:0}]},83092:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(39942);const d=[{value:"在地图应用中，渲染大数据的地理数据是十分常见的需求，为了保证应用的流畅性，需要追求极致的渲染性能，为此监控引擎渲染内容对于优化性能，建设地图可视化应用性能指标有切实的意义。",paraId:0},{value:"下面介绍如何使用 L7 提供的能力简单获取图层的初始化的信息。",paraId:1,tocIndex:0},{value:"import { Scene, PointLayer } from '@antv/l7';\nimport { GaodeMap } from '@antv/l7-maps';\n\nconst scene = new Scene({\n  id: 'map',\n  map: new GaodeMap({\n    center: [60, 40.7128],\n    zoom: 2,\n  }),\n  debug: true,\n});\nscene.on('loaded', () => {\n  const debugService = scene.getDebugService();\n  const layer = new PointLayer()\n    .source([{ lng: 120, lat: 30 }], {\n      parser: {\n        type: 'json',\n        x: 'lng',\n        y: 'lat',\n      },\n    })\n    .shape('circle')\n    .size(10)\n    .color('#f00');\n  layer.on('inited', () => {\n    console.log(debugService.getLog(layer.id));\n  });\n  scene.addLayer(layer);\n});\n",paraId:2,tocIndex:0}]},51845:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(57155);const d=[{value:"在地图应用中，渲染大数据的地理数据是十分常见的需求，为了保证应用的流畅性，需要追求极致的渲染性能，为此监控引擎渲染内容对于优化性能，建设地图可视化应用性能指标有切实的意义。",paraId:0},{value:"下面介绍如何使用 L7 提供的能力简单获取地图的初始化的信息。",paraId:1,tocIndex:0},{value:"import { Scene } from '@antv/l7';\nimport { GaodeMap } from '@antv/l7-maps';\n\nconst scene = new Scene({\n  id: 'map',\n  map: new GaodeMap({\n    center: [ 60, 40.7128 ],\n    zoom: 2\n  }),\n  debug: true\n});\nscene.on('loaded', () => {\n  const debugService = scene.getDebugService();\n  console.log(debugService.getLog('map');)\n});\n",paraId:2,tocIndex:0}]},53599:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(3089);const d=[{value:"在地图应用中，渲染大数据的地理数据是十分常见的需求，为了保证应用的流畅性，需要追求极致的渲染性能，为此监控引擎渲染内容对于优化性能，建设地图可视化应用性能指标有切实的意义。",paraId:0},{value:"下面介绍如何使用 L7 提供的能力简单获取应用的渲染性能信息。",paraId:1,tocIndex:0},{value:"import { Scene } from '@antv/l7';\nimport { GaodeMap } from '@antv/l7-maps';\n\nconst scene = new Scene({\n  id: 'map',\n  map: new GaodeMap({\n    center: [ 60, 40.7128 ],\n    zoom: 2\n  }),\n  debug: true\n});\nscene.on('loaded', () => {\n  const debugService = scene.getDebugService();\n  // 开启每帧渲染的监控\n  debugService.renderDebug(true)\n  debugService.on('renderEnd', renderInfo => {\n    const {\n      renderUid,\t\t\t// 当前帧渲染唯一编号\n      renderStart,\t\t// 当前帧渲染开始时间\n      renderEnd,\t\t\t// 当前帧渲染结束时间\n      renderDuration\t// 当前帧渲染时间\n    } = renderInfo;\n    ...\n  }\n\n  setTimeout(() => {\n    debugService.renderDebug(false);\n    debugService.off('renderEnd');\n  }, 1000); // 监听 1s 内的渲染情况\n});\n",paraId:2,tocIndex:0}]},31592:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(66024);const d=[{value:"气泡图地理区域上方会显示不同大小的圆点，圆形面积与其在数据集中的数值会成正比。",paraId:0},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"下面我们来介绍如何绘制一个常见的气泡图。",paraId:2,tocIndex:0},{value:"你可以在 ",paraId:3,tocIndex:0},{value:"L7",paraId:3,tocIndex:0},{value:" 官网上找到",paraId:3,tocIndex:0},{value:"在线案例",paraId:4,tocIndex:0},{value:"import { Scene, PointLayer } from '@antv/l7';\nimport { GaodeMap } from '@antv/l7-maps';\n\nconst scene = new Scene({\n  id: 'map',\n  map: new GaodeMap({\n    style: 'light',\n    center: [140.067171, 36.26186],\n    zoom: 5.32,\n    maxZoom: 10,\n  }),\n});\nscene.on('loaded', () => {\n  fetch('https://gw.alipayobjects.com/os/basement_prod/d3564b06-670f-46ea-8edb-842f7010a7c6.json')\n    .then((res) => res.json())\n    .then((data) => {\n      const pointLayer = new PointLayer({})\n        .source(data)\n        .shape('circle')\n        .size('mag', [1, 25])\n        .color('mag', (mag) => {\n          return mag > 4.5 ? '#5B8FF9' : '#5CCEA1';\n        })\n        .style({\n          opacity: 0.3,\n          strokeWidth: 1,\n        });\n      scene.addLayer(pointLayer);\n    });\n});\n",paraId:5,tocIndex:0},{value:"气泡图接受普通的点数据。",paraId:6,tocIndex:1},{value:"气泡图的 ",paraId:7,tocIndex:2},{value:"shape",paraId:7,tocIndex:2},{value:" 一般为 ",paraId:7,tocIndex:2},{value:"circle",paraId:7,tocIndex:2},{value:"，也可以是 ",paraId:7,tocIndex:2},{value:"square",paraId:7,tocIndex:2},{value:"、",paraId:7,tocIndex:2},{value:"triangle",paraId:7,tocIndex:2},{value:" 等其他形状。",paraId:7,tocIndex:2},{value:"气泡图的 ",paraId:8,tocIndex:3},{value:"size",paraId:8,tocIndex:3},{value:" 一般用于表示数据中的某个字段，因此不会使用常量而是使用数据映射。",paraId:8,tocIndex:3},{value:"layer.size('area', [1, 100]); // 使用区间映射\nlayer.size('area', (area) => {\n  // 使用回调函数实现映射\n  return area * 10;\n});\n",paraId:9,tocIndex:3},{value:"气泡图的 ",paraId:10,tocIndex:4},{value:"color",paraId:10,tocIndex:4},{value:" 一般也会用于表示数据中的某个字段，因此不会使用常量而是使用数据映射。",paraId:10,tocIndex:4},{value:"layer.color('area', ['#f00', '#ff0']); // 使用区间映射\nlayer.color('area', (area) => {\n  // 使用回调函数实现映射\n  if (area > 100) {\n    return '#f00';\n  } else {\n    return '#ff0';\n  }\n});\n",paraId:11,tocIndex:4}]},10063:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(14319);const d=[{value:"我们在通过自定义 ",paraId:0},{value:"Marker",paraId:0},{value:" 代替点图层节点的时候剋插入实现自定义图表，如使用二维统计图表代替点状符号。复合图表地图中常用扩展图形有柱状图、曲线图、玫瑰图等",paraId:0},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"下面我们来介绍如何绘制一个简单的地图复合图表。",paraId:2,tocIndex:0},{value:"你可以在 ",paraId:3,tocIndex:0},{value:"L7",paraId:3,tocIndex:0},{value:" 官网上找到",paraId:3,tocIndex:0},{value:"在线案例",paraId:4,tocIndex:0},{value:"import { Scene, Marker } from '@antv/l7';\nimport { GaodeMap } from '@antv/l7-maps';\nimport * as G2 from '@antv/g2';\nconst scene = new Scene({\n  id: 'map',\n  map: new GaodeMap({\n    style: 'light',\n    center: [2.6125016864608597, 49.359131],\n    zoom: 4.19,\n  }),\n});\nscene.on('loaded', () => {\n  addChart();\n  scene.render();\n});\nfunction addChart() {\n  fetch('https://gw.alipayobjects.com/os/basement_prod/0b96cca4-7e83-449a-93d0-2a77053e74ab.json')\n    .then((res) => res.json())\n    .then((data) => {\n      data.nodes.forEach(function (item) {\n        const el = document.createElement('div');\n        const total = item.gdp.Agriculture + item.gdp.Industry + item.gdp.Service;\n        const size = Math.min(parseInt(total / 30000, 10), 70);\n        if (size < 30) {\n          return;\n        }\n        const itemData = [\n          {\n            item: 'Agriculture',\n            count: item.gdp.Agriculture,\n            percent: item.gdp.Agriculture / total,\n          },\n          {\n            item: 'Industry',\n            count: item.gdp.Industry,\n            percent: item.gdp.Industry / total,\n          },\n          {\n            item: 'Service',\n            count: item.gdp.Service,\n            percent: item.gdp.Service / total,\n          },\n        ];\n        const chart = new G2.Chart({\n          container: el,\n          width: size,\n          height: size,\n          render: 'svg',\n          padding: 0,\n        });\n        chart.legend(false);\n        chart.source(itemData);\n        chart.tooltip(false);\n        chart.axis('count', { grid: false });\n        chart\n          .interval()\n          .position('item*count')\n          .color('item', ['#5CCEA1', '#5D7092', '#5B8FF9'])\n          .opacity(1);\n        chart.render();\n        const marker = new Marker({ element: el }).setLnglat({\n          lng: item.coordinates[0],\n          lat: item.coordinates[1],\n        });\n        scene.addMarker(marker);\n      });\n    });\n}\n",paraId:5,tocIndex:0}]},20544:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(57855);const d=[{value:"聚合图通常用来描述数据在地理上表现的聚合情况，类似热力图，可以用来表示数据点位的集中。",paraId:0},{value:"🌟 目前 ",paraId:1},{value:"L7",paraId:1},{value:" 只有点数据支持聚合图，聚类方法主要从数据层聚合数据，在 ",paraId:1},{value:"Source",paraId:1},{value:" 方法配置 ",paraId:1},{value:"cluster",paraId:1},{value:" 参数。",paraId:1},{value:"\n  ",paraId:2},{value:"\n    ",paraId:2},{value:"\n  ",paraId:2},{value:"下面我们来介绍如何绘制一个常见的聚合图。",paraId:3,tocIndex:0},{value:"你可以在 ",paraId:4,tocIndex:0},{value:"L7",paraId:4,tocIndex:0},{value:" 官网上找到",paraId:4,tocIndex:0},{value:"在线案例",paraId:5,tocIndex:0},{value:"import { Scene, PointLayer } from '@antv/l7';\nimport { GaodeMap } from '@antv/l7-maps';\n\nconst scene = new Scene({\n  id: 'map',\n  map: new GaodeMap({\n    center: [120.19382669582967, 30.258134],\n    style: 'dark',\n    zoom: 3,\n  }),\n});\nscene.on('loaded', () => {\n  fetch('https://gw.alipayobjects.com/os/basement_prod/d3564b06-670f-46ea-8edb-842f7010a7c6.json')\n    .then((res) => res.json())\n    .then((data) => {\n      const pointLayer = new PointLayer({})\n        .source(data, { cluster: true })\n        .shape('circle')\n        .scale('point_count', {\n          type: 'quantile',\n        })\n        .size('point_count', [5, 10, 15, 20, 25])\n        .active(true)\n        .color('yellow')\n        .style({\n          opacity: 0.5,\n          strokeWidth: 1,\n        });\n      scene.addLayer(pointLayer);\n    });\n});\n",paraId:6,tocIndex:0},{value:"聚合图在接受普通的点数据之后还需要配置聚合参数。",paraId:7,tocIndex:1},{value:"const source = new Source(data, {\n  cluster: true,\n  clusterOption: {\n    radius: 40,\n    minZoom: 0,\n    maxZoom: 16,\n  },\n});\n",paraId:8,tocIndex:1},{value:"cluster: boolean",paraId:9,tocIndex:1},{value:" 表示是否对数据进行聚合操作，目前只有点图层支持，默认值为 ",paraId:9,tocIndex:1},{value:"false",paraId:9,tocIndex:1},{value:"。",paraId:9,tocIndex:1},{value:"clusterOption: IClusterOption",paraId:9,tocIndex:1},{value:" 具体的聚合参数\n",paraId:9,tocIndex:1},{value:"radius: number",paraId:10,tocIndex:1},{value:" 聚合半径，默认值为 ",paraId:10,tocIndex:1},{value:"40",paraId:10,tocIndex:1},{value:"。",paraId:10,tocIndex:1},{value:"minZoom: number",paraId:10,tocIndex:1},{value:" 最小聚合缩放等级，默认值为 ",paraId:10,tocIndex:1},{value:"0",paraId:10,tocIndex:1},{value:"。",paraId:10,tocIndex:1},{value:"maxZoom: number",paraId:10,tocIndex:1},{value:" 最大聚合缩放等级，默认值为 ",paraId:10,tocIndex:1},{value:"16",paraId:10,tocIndex:1},{value:"。",paraId:10,tocIndex:1},{value:"interface IClusterOption {\n  radius,\n  minZoom\n  maxZoom\n}\n",paraId:11,tocIndex:1},{value:"在线案例",paraId:12},{value:"聚合图使用通用的聚合样式，",paraId:13,tocIndex:2},{value:"shape",paraId:13,tocIndex:2},{value:" 只要使用点图层类型的 ",paraId:13,tocIndex:2},{value:"shape",paraId:13,tocIndex:2},{value:" 即可。",paraId:13,tocIndex:2},{value:"PointLayer",paraId:14,tocIndex:3},{value:" 的聚合图采用 ",paraId:14,tocIndex:3},{value:"WebGL",paraId:14,tocIndex:3},{value:" 绘制，不支持自定义具体聚合样式，如果有自定义的需求可以使用 ",paraId:14,tocIndex:3},{value:"MarkerLayer",paraId:14,tocIndex:3},{value:" 的聚合功能，你可以通过 ",paraId:14,tocIndex:3},{value:"DOM",paraId:14,tocIndex:3},{value:" 完全自定义样式。",paraId:14,tocIndex:3},{value:"MarkerLayer 聚合",paraId:15}]},78694:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(40246);const d=[{value:"3D",paraId:0},{value:" 柱图是在地理区域上方显示的不同高度的柱体，柱子的高度与其在数据集中的数值会成正比。",paraId:0},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"下面我们来介绍如何绘制一个常见的 ",paraId:2,tocIndex:0},{value:"3D",paraId:2,tocIndex:0},{value:" 柱图。",paraId:2,tocIndex:0},{value:"你可以在 ",paraId:3,tocIndex:0},{value:"L7",paraId:3,tocIndex:0},{value:" 官网上找到",paraId:3,tocIndex:0},{value:"在线案例",paraId:4,tocIndex:0},{value:"import { Scene, PointLayer } from '@antv/l7';\nimport { GaodeMap } from '@antv/l7-maps';\nconst scene = new Scene({\n  id: 'map',\n  map: new GaodeMap({\n    pitch: 66.02383,\n    center: [ 121.400257, 31.25287 ],\n    zoom: 14.55,\n    rotation: 134.95\n  })\n});\nfetch('https://gw.alipayobjects.com/os/basement_prod/893d1d5f-11d9-45f3-8322-ee9140d288ae.json')\n  .then(res => res.json())\n  .then(data => {\n    const pointLayer = new PointLayer({})\n    .source(data, {\n      parser: {\n        type: 'json',\n        x: 'longitude',\n        y: 'latitude'\n      }\n    })\n    .shape('name', [ 'cylinder', 'triangleColumn', 'hexagonColumn', 'squareColumn' ])\n    .color('name', [ '#739DFF', '#61FCBF', '#FFDE74', '#FF896F' ]);\n    .size('unit_price', h => [ 6, 6, h / 500 ]\n    scene.addLayer(pointLayer);\n  })\n",paraId:5,tocIndex:0},{value:"3D",paraId:6,tocIndex:1},{value:" 柱图 ",paraId:6,tocIndex:1},{value:"shape",paraId:6,tocIndex:1},{value:" 方法支持以下参数：",paraId:6,tocIndex:1},{value:"cylinder",paraId:7,tocIndex:1},{value:" 圆柱体",paraId:7,tocIndex:1},{value:"triangleColumn",paraId:7,tocIndex:1},{value:" 三角柱",paraId:7,tocIndex:1},{value:"hexagonColumn",paraId:7,tocIndex:1},{value:" 六角柱",paraId:7,tocIndex:1},{value:"squareColumn",paraId:7,tocIndex:1},{value:" 四角柱",paraId:7,tocIndex:1},{value:"3D",paraId:8,tocIndex:2},{value:" 柱图的 ",paraId:8,tocIndex:2},{value:"size",paraId:8,tocIndex:2},{value:" 支持设置三个维度 ",paraId:8,tocIndex:2},{value:"[w, l, z]",paraId:8,tocIndex:2},{value:"：",paraId:8,tocIndex:2},{value:"w",paraId:9,tocIndex:2},{value:" 宽",paraId:9,tocIndex:2},{value:"l",paraId:9,tocIndex:2},{value:" 长",paraId:9,tocIndex:2},{value:"z",paraId:9,tocIndex:2},{value:" 高度",paraId:9,tocIndex:2},{value:"size",paraId:10,tocIndex:2},{value:" 设置常量",paraId:10,tocIndex:2},{value:"layer.size([2, 2, 3]);\n",paraId:11,tocIndex:2},{value:"size",paraId:12,tocIndex:2},{value:" 设置回调函数",paraId:12,tocIndex:2},{value:"layer.size('unit_price', (h) => {\n  return [6, 6, h / 500];\n});\n",paraId:13,tocIndex:2},{value:"3D",paraId:14,tocIndex:3},{value:" 柱图支持生长动画，通过 ",paraId:14,tocIndex:3},{value:"animate",paraId:14,tocIndex:3},{value:" 方法进行设置，具体使用可以查看",paraId:14,tocIndex:3},{value:"详细文档",paraId:15,tocIndex:3},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"3D",paraId:16,tocIndex:4},{value:" 柱图有特殊的 ",paraId:16,tocIndex:4},{value:"style",paraId:16,tocIndex:4},{value:" 属性，具体使用可以查找",paraId:16,tocIndex:4},{value:"详细文档",paraId:17,tocIndex:4}]},79211:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(69875);const d=[{value:"亮度图又称点密度图，单位面积的内点的个数越多，亮度会越亮，亮度图一般用来表达海量点数据分布情况",paraId:0},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"下面我们来介绍如何绘制一个简单的亮度图。",paraId:2,tocIndex:0},{value:"你可以在 ",paraId:3,tocIndex:0},{value:"L7",paraId:3,tocIndex:0},{value:" 官网上找到",paraId:3,tocIndex:0},{value:"在线案例",paraId:4,tocIndex:0},{value:"import { Scene, PointLayer } from '@antv/l7';\nimport { GaodeMap } from '@antv/l7-maps';\n\nconst scene = new Scene({\n  id: 'map',\n  map: new GaodeMap({\n    center: [121.417463, 31.215175],\n    style: 'dark',\n    zoom: 11,\n  }),\n});\nscene.on('loaded', () => {\n  fetch('https://gw.alipayobjects.com/os/rmsportal/BElVQFEFvpAKzddxFZxJ.txt')\n    .then((res) => res.text())\n    .then((data) => {\n      const pointLayer = new PointLayer({})\n        .source(data, {\n          parser: {\n            type: 'csv',\n            y: 'lat',\n            x: 'lng',\n          },\n        })\n        .size(0.5)\n        .color('#080298');\n      scene.addLayer(pointLayer);\n    });\n});\n",paraId:5,tocIndex:0},{value:"使用亮度图需要将 ",paraId:6,tocIndex:1},{value:"shape",paraId:6,tocIndex:1},{value:" 的参数设置为 ",paraId:6,tocIndex:1},{value:"dot",paraId:6,tocIndex:1},{value:"，或者不设置 ",paraId:6,tocIndex:1},{value:"shape",paraId:6,tocIndex:1},{value:" 函数。",paraId:6,tocIndex:1}]},98214:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(83237);const d=[{value:"点图层除了支持绘制文字标注之外还支持通过绘制文字的方式绘制建简单的图标，即绘制 ",paraId:0},{value:"iconfont",paraId:0},{value:"。通过文字方式绘制的简单图标，我们可以 ",paraId:0},{value:"color",paraId:0},{value:" 方法直接修改颜色。",paraId:0},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"下面我们来介绍如何绘制一个简单的 ",paraId:2,tocIndex:0},{value:"iconfont",paraId:2,tocIndex:0},{value:" 图标点图层。",paraId:2,tocIndex:0},{value:"你可以在 ",paraId:3,tocIndex:0},{value:"L7",paraId:3,tocIndex:0},{value:" 官网上找到",paraId:3,tocIndex:0},{value:"在线案例",paraId:4,tocIndex:0},{value:"// 指定 iconfont 映射为字体样式的名称\nconst fontFamily = 'iconfont';\n// 指定 iconfont 字体文件\nconst fontPath = '//at.alicdn.com/t/font_2534097_fcae9o2mxbv.woff2?t=1622200439140';\n// 全局添加资源\nscene.addFontFace(fontFamily, fontPath);\n// 全局添加 iconfont 字段的映射\nscene.addIconFont('icon1', '&#xe6d4;');\nscene.on('loaded', () => {\n  fetch('https://gw.alipayobjects.com/os/bmw-prod/70408903-80db-4278-a318-461604acb2df.json')\n    .then((res) => res.json())\n    .then((data) => {\n      const pointLayer = new PointLayer({})\n        .source(data.list, {\n          parser: {\n            type: 'json',\n            x: 'j',\n            y: 'w',\n          },\n        })\n        .shape('icon', 'text') // 指定需要映射字段为 icon、shape 类型和普通的文字标注一样为 text\n        .size(20)\n        .color('w', ['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c', '#fb9a99'])\n        .style({\n          textAnchor: 'center', // 文本相对锚点的位置 center|left|right|top|bottom|top-left\n          textOffset: [40, 0], // 文本相对锚点的偏移量 [水平, 垂直]\n          padding: [0, 0], // 文本包围盒 padding [水平，垂直]，影响碰撞检测结果，避免相邻文本靠的太近\n          stroke: '#ffffff', // 描边颜色\n          fontFamily,\n          iconfont: true, // 开启 iconfont 映射\n        });\n      scene.addLayer(pointLayer);\n    });\n});\n",paraId:5,tocIndex:0},{value:"iconfont",paraId:6,tocIndex:0},{value:" 绘制的是 ",paraId:6,tocIndex:0},{value:"unicode",paraId:6,tocIndex:0},{value:" 图标，在使用的时候需要提前指定对应的 ",paraId:6,tocIndex:0},{value:"unicode",paraId:6,tocIndex:0},{value:" 映射文件。",paraId:6,tocIndex:0},{value:"关于 ",paraId:6,tocIndex:0},{value:"iconfont",paraId:6,tocIndex:0},{value:" 资源使用可以前往 ",paraId:6,tocIndex:0},{value:"iconfont",paraId:6,tocIndex:0},{value:" 官网 ",paraId:6,tocIndex:0},{value:"官网传送门",paraId:6,tocIndex:0},{value:"。",paraId:6,tocIndex:0},{value:"iconfont",paraId:7,tocIndex:1},{value:" 其实就是特殊的文本标注，因此 ",paraId:7,tocIndex:1},{value:"shape",paraId:7,tocIndex:1},{value:" 的用法和普通文本标注的用法保持一致。",paraId:7,tocIndex:1},{value:"field",paraId:8,tocIndex:1},{value:" 标注的字段名称。",paraId:8,tocIndex:1},{value:"shapeType",paraId:8,tocIndex:1},{value:" 默认为 ",paraId:8,tocIndex:1},{value:"text",paraId:8,tocIndex:1},{value:"。",paraId:8,tocIndex:1},{value:"layer.shape('iconfontField', 'text');\n",paraId:9,tocIndex:1},{value:"我们在使用 ",paraId:10,tocIndex:2},{value:"iconfont",paraId:10,tocIndex:2},{value:" 绘制简单图标的时候需要在 ",paraId:10,tocIndex:2},{value:"style",paraId:10,tocIndex:2},{value:" 方法中将 ",paraId:10,tocIndex:2},{value:"iconfont",paraId:10,tocIndex:2},{value:" 参数设置为 ",paraId:10,tocIndex:2},{value:"true",paraId:10,tocIndex:2},{value:"。",paraId:10,tocIndex:2},{value:"✨ iconfont 其他 style 参数的使用和普通的文本标注的参数保持一致。",paraId:11,tocIndex:2}]},12434:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(29439);const d=[{value:"地图上的点可以是自定义的 ",paraId:0},{value:"DOM",paraId:0},{value:"，我们将自定的 ",paraId:0},{value:"DOM",paraId:0},{value:" 称为 ",paraId:0},{value:"Marker",paraId:0},{value:" 。",paraId:0},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"下面我们来介绍如何绘制一个简单的 ",paraId:2,tocIndex:0},{value:"Marker",paraId:2,tocIndex:0},{value:" 图层。",paraId:2,tocIndex:0},{value:"你可以在 ",paraId:3,tocIndex:0},{value:"L7",paraId:3,tocIndex:0},{value:" 官网上找到",paraId:3,tocIndex:0},{value:"在线案例",paraId:4,tocIndex:0},{value:"import { Scene, Marker } from '@antv/l7';\nimport { GaodeMap } from '@antv/l7-maps';\n\nconst scene = new Scene({\n  id: 'map',\n  map: new GaodeMap({\n    style: 'light',\n    center: [105.790327, 36.495636],\n    zoom: 4,\n  }),\n});\nscene.on('loaded', () => {\n  addMarkers();\n  scene.render();\n});\nfunction addMarkers() {\n  fetch('https://gw.alipayobjects.com/os/basement_prod/67f47049-8787-45fc-acfe-e19924afe032.json')\n    .then((res) => res.json())\n    .then((nodes) => {\n      for (let i = 0; i < nodes.length; i++) {\n        if (nodes[i].g !== '1' || nodes[i].v === '') {\n          continue;\n        }\n        const el = document.createElement('label');\n        el.className = 'labelclass';\n        el.textContent = nodes[i].v + '℃';\n        el.style.background = getColor(nodes[i].v);\n        el.style.borderColor = getColor(nodes[i].v);\n        const marker = new Marker({\n          element: el,\n        }).setLnglat({ lng: nodes[i].x * 1, lat: nodes[i].y });\n        scene.addMarker(marker);\n      }\n    });\n}\nfunction getColor(v) {\n  return v > 50\n    ? '#800026'\n    : v > 40\n      ? '#BD0026'\n      : v > 30\n        ? '#E31A1C'\n        : v > 20\n          ? '#FC4E2A'\n          : v > 10\n            ? '#FD8D3C'\n            : v > 5\n              ? '#FEB24C'\n              : v > 0\n                ? '#FED976'\n                : '#FFEDA0';\n}\n",paraId:5,tocIndex:0},{value:"Marker 文档",paraId:6},{value:"MarkerLayer 文档",paraId:7}]},71508:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(23854);const d=[{value:"点图层还支持一种特殊的图层类型：雷达图。",paraId:0},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"下面我们来介绍如何绘制一个常见的雷达图。",paraId:2,tocIndex:0},{value:"你可以在 ",paraId:3,tocIndex:0},{value:"L7",paraId:3,tocIndex:0},{value:" 官网上找到",paraId:3,tocIndex:0},{value:"在线案例",paraId:4,tocIndex:0},{value:"import { Scene, PointLayer } from '@antv/l7';\nimport { GaodeMap } from '@antv/l7-maps';\n\nconst scene = new Scene({\n  id: 'map',\n  map: new GaodeMap({\n    center: [120, 30],\n    zoom: 13,\n  }),\n});\n\nconst layer = new PointLayer()\n  .source([{ lng: 120, lat: 30 }], {\n    parser: {\n      type: 'json',\n      x: 'lng',\n      y: 'lat',\n    },\n  })\n  .shape('radar')\n  .size(100)\n  .color('#d00')\n  .style({\n    speed: 5,\n  })\n  .animate(true);\n",paraId:5,tocIndex:0},{value:"雷达图接受普通的点数据。",paraId:6,tocIndex:1},{value:"雷达图的 ",paraId:7,tocIndex:2},{value:"shape",paraId:7,tocIndex:2},{value:" 为固定值 ",paraId:7,tocIndex:2},{value:"radar",paraId:7,tocIndex:2},{value:"。",paraId:7,tocIndex:2},{value:"雷达图需要将 ",paraId:8,tocIndex:3},{value:"animate",paraId:8,tocIndex:3},{value:" 设置为 ",paraId:8,tocIndex:3},{value:"true",paraId:8,tocIndex:3},{value:" 才会生效",paraId:8,tocIndex:3},{value:".animate(true)\n\n.animate({\n  enable: true\n})\n",paraId:9,tocIndex:3},{value:"通过 ",paraId:10,tocIndex:4},{value:"speed",paraId:10,tocIndex:4},{value:" 设置旋转速度，默认为 ",paraId:10,tocIndex:4},{value:"1",paraId:10,tocIndex:4},{value:"，值越大转速越快。",paraId:10,tocIndex:4}]},15151:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(7424);const d=[{value:"散点图在地理区域上放置相等大小的圆点，用来表示地域上的空间布局或数据分布。",paraId:0},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"下面我们来介绍如何绘制一个常见的散点图。",paraId:2,tocIndex:0},{value:"你可以在 ",paraId:3,tocIndex:0},{value:"L7",paraId:3,tocIndex:0},{value:" 官网上找到",paraId:3,tocIndex:0},{value:"在线案例",paraId:4,tocIndex:0},{value:"import { Scene, PointLayer } from '@antv/l7';\nimport { GaodeMap } from '@antv/l7-maps';\n\nconst scene = new Scene({\n  id: 'map',\n  map: new GaodeMap({\n    style: 'light',\n    center: [-121.24357, 37.58264],\n    zoom: 6.45,\n  }),\n});\nscene.on('loaded', () => {\n  fetch('https://gw.alipayobjects.com/os/basement_prod/6c4bb5f2-850b-419d-afc4-e46032fc9f94.csv')\n    .then((res) => res.text())\n    .then((data) => {\n      const pointLayer = new PointLayer({})\n        .source(data, {\n          parser: {\n            type: 'csv',\n            x: 'Longitude',\n            y: 'Latitude',\n          },\n        })\n        .shape('circle')\n        .size(4)\n        .color('Magnitude', [\n          '#0A3663',\n          '#1558AC',\n          '#3771D9',\n          '#4D89E5',\n          '#64A5D3',\n          '#72BED6',\n          '#83CED6',\n          '#A6E1E0',\n          '#B8EFE2',\n          '#D7F9F0',\n        ]);\n      scene.addLayer(pointLayer);\n    });\n});\n",paraId:5,tocIndex:0},{value:"散点图 ",paraId:6,tocIndex:1},{value:"shape",paraId:6,tocIndex:1},{value:" 一般设置成常量，通常是 ",paraId:6,tocIndex:1},{value:"2D",paraId:6,tocIndex:1},{value:" 的图表。",paraId:6,tocIndex:1},{value:"circle",paraId:7,tocIndex:1},{value:"square",paraId:7,tocIndex:1},{value:"hexagon",paraId:7,tocIndex:1},{value:"triangle",paraId:7,tocIndex:1},{value:"pentagon",paraId:7,tocIndex:1},{value:"octogon",paraId:7,tocIndex:1},{value:"hexagram",paraId:7,tocIndex:1},{value:"rhombus",paraId:7,tocIndex:1},{value:"vesica",paraId:7,tocIndex:1}]},37691:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(34541);const d=[{value:"点图层支持精灵模式的简单点，精灵模式的点图层效率更高，点始终面向相机。",paraId:0},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"下面我们来介绍如何绘制一个简单点图层。",paraId:2,tocIndex:0},{value:"你可以在 ",paraId:3,tocIndex:0},{value:"L7",paraId:3,tocIndex:0},{value:" 官网上找到",paraId:3,tocIndex:0},{value:"在线案例",paraId:4,tocIndex:0},{value:"import { Scene, PointLayer } from '@antv/l7';\nimport { GaodeMap } from '@antv/l7-maps';\n\nconst scene = new Scene({\n  id: 'map',\n  map: new GaodeMap({\n    pitch: 20,\n    center: [ 120, 20 ],\n    zoom: 3\n  })\n});\nscene.on('loaded', () => {\n  fetch('https://gw.alipayobjects.com/os/basement_prod/d3564b06-670f-46ea-8edb-842f7010a7c6.json')\n    .then(res => res.json())\n    .then(data => {\n      const pointLayer = new PointLayer({})\n        .source(data)\n        .shape('simple')\n        .size(15)\n        .color('mag', mag =>  mag > 4.5 ? '#5B8FF9' : '#5CCEA1';)\n        .style({\n          opacity: 0.6,\n          strokeWidth: 3\n        });\n      scene.addLayer(pointLayer);\n    });\n});\n",paraId:5,tocIndex:0},{value:"简单点图层使用的 ",paraId:6,tocIndex:1},{value:"shape",paraId:6,tocIndex:1},{value:" 参数固定为 ",paraId:6,tocIndex:1},{value:"simple",paraId:6,tocIndex:1},{value:"。",paraId:6,tocIndex:1},{value:"简单点图层的使用和一般的点图层表现一致",paraId:7,tocIndex:2},{value:"简单点图层的实质是精灵贴图，因此简单点图层始终面向相机（普通的 2D 点图层保持面向上）",paraId:8,tocIndex:2},{value:"🌟 当用户对点图层的朝向没有要求或是对点图层的可视化效果要求比较简单，那么推荐尽量使用简单点图层，可以节省大量性能",paraId:9,tocIndex:2},{value:"🌟 简单点图层由于实质是精灵贴图，因此有大小限制：一般是 [1, 64]，不同设备之间存在差异",paraId:10,tocIndex:2},{value:"// L7 提供了查询方法快速查看\n\nscene.getPointSizeRange(); // Float32Array - [min, max]\n",paraId:11,tocIndex:2}]},99591:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(44435);const d=[{value:"点图层支持绘制图标，在地理区域上放置不同图片作为符号，通常表示不同地理要素分布情况",paraId:0},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"下面我们来介绍如何绘制一个常见的符号地图。",paraId:2,tocIndex:0},{value:"你可以在 ",paraId:3,tocIndex:0},{value:"L7",paraId:3,tocIndex:0},{value:" 官网上找到",paraId:3,tocIndex:0},{value:"在线案例",paraId:4,tocIndex:0},{value:"import { Scene, PointLayer } from '@antv/l7';\nimport { GaodeMap } from '@antv/l7-maps';\n\nconst scene = new Scene({\n  id: 'map',\n  map: new GaodeMap({\n    style: 'light',\n    center: [121.434765, 31.256735],\n    zoom: 14.83,\n  }),\n});\nscene.addImage(\n  '00',\n  'https://gw.alipayobjects.com/zos/basement_prod/604b5e7f-309e-40db-b95b-4fac746c5153.svg',\n);\nscene.addImage(\n  '01',\n  'https://gw.alipayobjects.com/zos/basement_prod/30580bc9-506f-4438-8c1a-744e082054ec.svg',\n);\nscene.addImage(\n  '02',\n  'https://gw.alipayobjects.com/zos/basement_prod/7aa1f460-9f9f-499f-afdf-13424aa26bbf.svg',\n);\nscene.on('loaded', () => {\n  fetch('https://gw.alipayobjects.com/os/basement_prod/893d1d5f-11d9-45f3-8322-ee9140d288ae.json')\n    .then((res) => res.json())\n    .then((data) => {\n      const imageLayer = new PointLayer()\n        .source(data, {\n          parser: {\n            type: 'json',\n            x: 'longitude',\n            y: 'latitude',\n          },\n        })\n        .shape('name', ['00', '01', '02'])\n        .size(25);\n      scene.addLayer(imageLayer);\n    });\n});\n",paraId:5,tocIndex:0},{value:"为了使用点图层绘制图标，我们需要事先在 ",paraId:6,tocIndex:1},{value:"scene",paraId:6,tocIndex:1},{value:" 全局添加对应的图片资源。之后我们就可以在点图层的 ",paraId:6,tocIndex:1},{value:"shape",paraId:6,tocIndex:1},{value:" 方法中指定对应的图片。",paraId:6,tocIndex:1},{value:"scene.addImage(\n  '02',\n  'https://gw.alipayobjects.com/zos/basement_prod/7aa1f460-9f9f-499f-afdf-13424aa26bbf.svg',\n);\n",paraId:7,tocIndex:1},{value:"我们需要通过 ",paraId:8,tocIndex:2},{value:"shape",paraId:8,tocIndex:2},{value:" 方法指定当前点图层需要加载的图片资源 ",paraId:8,tocIndex:2},{value:"ID",paraId:8,tocIndex:2},{value:"，",paraId:8,tocIndex:2},{value:"ID",paraId:8,tocIndex:2},{value:" 是用户使用 ",paraId:8,tocIndex:2},{value:"scene.addImage(id, url)",paraId:8,tocIndex:2},{value:" 全局添加图片资源时候的 ",paraId:8,tocIndex:2},{value:"ID",paraId:8,tocIndex:2},{value:"，即符号图需要把 ",paraId:8,tocIndex:2},{value:"shape",paraId:8,tocIndex:2},{value:" 设置成图片的 ",paraId:8,tocIndex:2},{value:"id",paraId:8,tocIndex:2},{value:"。",paraId:8,tocIndex:2},{value:"scene.addImage(\n  '00',\n  'https://gw.alipayobjects.com/zos/basement_prod/604b5e7f-309e-40db-b95b-4fac746c5153.svg',\n);\nscene.addImage(\n  '01',\n  'https://gw.alipayobjects.com/zos/basement_prod/604b5e7f-309e-40db-b95b-4fac746c5153.svg',\n);\n\nlayer.shape('00');\n",paraId:9,tocIndex:2},{value:"⚠️ 符号图的 ",paraId:10,tocIndex:2},{value:"ID",paraId:10,tocIndex:2},{value:" 不能与点图层已有 shape 名称相同，比如不能设置 ",paraId:10,tocIndex:2},{value:"circle",paraId:10,tocIndex:2},{value:"。",paraId:10,tocIndex:2},{value:"同样符号图 ",paraId:11,tocIndex:2},{value:"shape",paraId:11,tocIndex:2},{value:" 也支持数据映射",paraId:11,tocIndex:2},{value:"const scatter = new PointLayer()\n  .source(data)\n  .shape('name', (v) => {\n    switch (v) {\n      case 'p1':\n        return '00';\n      case 'p2':\n        return '01';\n    }\n  })\n  .size(5)\n  .style({\n    opacity: 0.3,\n    strokeWidth: 1,\n  });\n",paraId:12,tocIndex:2},{value:"⚠️ 符号图不应该设置 ",paraId:13,tocIndex:2},{value:"color",paraId:13,tocIndex:2},{value:" 传入颜色，",paraId:13,tocIndex:2},{value:"color",paraId:13,tocIndex:2},{value:" 设置的颜色会覆盖图片的颜色。",paraId:13,tocIndex:2},{value:"⚠️ 为了得到更好的现实效果（图片清晰，无明显锯齿），我们在选择图片以及设置图标大小的时候应保持相当，或者在 L7 图层中设置的图标大小略小于实际图片的像素大小。",paraId:14,tocIndex:2},{value:"在线案例",paraId:15},{value:"默认通过 ",paraId:16,tocIndex:4},{value:"PointLayer",paraId:16,tocIndex:4},{value:" 实例化的 ",paraId:16,tocIndex:4},{value:"image",paraId:16,tocIndex:4},{value:" 本质上是精灵贴图，因此有始终面向相机的特性，同时贴图的大小也收到设备的限制。",paraId:16,tocIndex:4},{value:"由于精灵始终面向相机，因此我们也无法自定义配置 ",paraId:16,tocIndex:4},{value:"image",paraId:16,tocIndex:4},{value:" 的旋转角度。",paraId:16,tocIndex:4},{value:"为了解决上述的两个问题（1. 大小受限，2. 无法自定义旋转角度），我们单独提供了非精灵模式",paraId:17,tocIndex:4},{value:"billboard",paraId:17,tocIndex:4},{value:" 的模式。",paraId:17,tocIndex:4},{value:"只需要在 style 中配置 billboard 为 ",paraId:18,tocIndex:4},{value:"false",paraId:18,tocIndex:4},{value:"const imageLayer = new PointLayer({ layerType: 'fillImage' })\n  .source(data, {\n    parser: {\n      type: 'json',\n      x: 'longitude',\n      y: 'latitude',\n    },\n  })\n  .shape('name', ['00', '01', '02'])\n  .style({\n    rotation: 0,\n    billboard: false,\n  })\n  .size(45);\n",paraId:19,tocIndex:4},{value:"我们支持使用 ",paraId:20,tocIndex:5},{value:"rotation",paraId:20,tocIndex:5},{value:" 自定义配置图标的旋转角度（顺时针方向、角度制）。",paraId:20,tocIndex:5},{value:"rotation",paraId:21,tocIndex:5},{value:": number|undefined // 角度单位 0-360",paraId:21,tocIndex:5},{value:"layer.style({\n  rotation: 90,\n});\n",paraId:22,tocIndex:5},{value:"rotation 支持常量，也支持数据映射",paraId:23,tocIndex:5},{value:"layer.style({\n  rotation: {\n    field: 'rotate',\n    value: [0, 360],\n  },\n});\n",paraId:24,tocIndex:5},{value:"layer.style({\n  rotation: {\n    field: 'rotate',\n    value: (rotate) => {\n      return rotate;\n    },\n  },\n});\n",paraId:25,tocIndex:5},{value:"在线案例",paraId:26},{value:"符号图的 非 billboard 模式支持 ",paraId:27},{value:"rotation",paraId:27},{value:" 方法根据数据映射旋转角度。",paraId:27},{value:"const imageLayer = new PointLayer()\n  .source(data)\n  .shape('wind', (wind) => {\n    if (wind === 'up') {\n      return 'arrBlue';\n    }\n    return 'arrRed';\n  })\n  .size(15)\n  .style({\n    rotation: 0, //\n    billboard: false,\n  });\nscene.addLayer(imageLayer);\n",paraId:28},{value:"在线案例",paraId:29}]},25234:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(15232);const d=[{value:"点图层支持绘制文本标注。",paraId:0},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"下面我们来介绍如何绘制一个常见的文本标注地图。",paraId:2,tocIndex:0},{value:"你可以在 ",paraId:3,tocIndex:0},{value:"L7",paraId:3,tocIndex:0},{value:" 官网上找到",paraId:3,tocIndex:0},{value:"在线案例",paraId:4,tocIndex:0},{value:"import { Scene, PointLayer } from '@antv/l7';\nimport { GaodeMap } from '@antv/l7-maps';\n\nconst scene = new Scene({\n  id: 'map',\n  map: new GaodeMap({\n    center: [110, 36],\n    style: 'light',\n    zoom: 3,\n  }),\n});\nscene.on('loaded', () => {\n  fetch('https://gw.alipayobjects.com/os/rmsportal/oVTMqfzuuRFKiDwhPSFL.json')\n    .then((res) => res.json())\n    .then((data) => {\n      const pointLayer = new PointLayer({})\n        .source(data.list, {\n          parser: {\n            type: 'json',\n            x: 'j',\n            y: 'w',\n          },\n        })\n        .shape('m', 'text')\n        .size(12)\n        .color('w', ['#0e0030', '#0e0030', '#0e0030'])\n        .style({\n          textAnchor: 'center', // 文本相对锚点的位置 center|left|right|top|bottom|top-left\n          textOffset: [0, 0], // 文本相对锚点的偏移量 [水平, 垂直]\n          spacing: 2, // 字符间距\n          padding: [1, 1], // 文本包围盒 padding [水平，垂直]，影响碰撞检测结果，避免相邻文本靠的太近\n          stroke: '#ffffff', // 描边颜色\n          strokeWidth: 0.3, // 描边宽度\n        });\n      scene.addLayer(pointLayer);\n    });\n});\n",paraId:5,tocIndex:0},{value:"field",paraId:6,tocIndex:1},{value:" 标注的字段名称。",paraId:6,tocIndex:1},{value:"shapeType",paraId:6,tocIndex:1},{value:" 默认值为 ",paraId:6,tocIndex:1},{value:"text",paraId:6,tocIndex:1},{value:"。",paraId:6,tocIndex:1},{value:"layer.shape('name', 'text');\n",paraId:7,tocIndex:1},{value:"textAnchor ",paraId:8,tocIndex:2},{value:"string",paraId:8,tocIndex:2},{value:" 文本相对锚点的位置\n",paraId:8,tocIndex:2},{value:"'right' | 'top-right' | 'left' | 'bottom-right' | 'left' | 'top-left' | 'bottom-left' | 'bottom' | 'bottom-right' | 'bottom-left' | 'top' | 'top-right' | 'top-left' | 'center';",paraId:8,tocIndex:2},{value:"padding: ",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:" 文本包围盒 padding [水平，垂直]，影响碰撞检测结果，避免相邻文本靠的太近",paraId:8,tocIndex:2},{value:"spacing: number 文本间隔",paraId:8,tocIndex:2},{value:"stroke: ",paraId:8,tocIndex:2},{value:"string",paraId:8,tocIndex:2},{value:"; 描边颜色",paraId:8,tocIndex:2},{value:"strokeWidth ",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:" 描边宽度",paraId:8,tocIndex:2},{value:"strokeOpacity ",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:" 描边透明度",paraId:8,tocIndex:2},{value:"fontWeight ",paraId:8,tocIndex:2},{value:"string",paraId:8,tocIndex:2},{value:" 字体粗细",paraId:8,tocIndex:2},{value:"fontFamily ",paraId:8,tocIndex:2},{value:"string",paraId:8,tocIndex:2},{value:" 字号",paraId:8,tocIndex:2},{value:"textOffset ",paraId:8,tocIndex:2},{value:"[number, number]",paraId:8,tocIndex:2},{value:" 文本偏移量",paraId:8,tocIndex:2},{value:"textAllowOverlap: ",paraId:8,tocIndex:2},{value:"boolean",paraId:8,tocIndex:2},{value:" 是否允许文字遮盖",paraId:8,tocIndex:2},{value:"raisingHeight 设置文本标注的抬升高度",paraId:8,tocIndex:2}]},55848:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(70178);const d=[{value:"平面点图层在开启动画模式的情况下，是一种特殊的图层类型：水波点。图层由一圈圈向外扩散的圆环构成。",paraId:0},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"根据下面的代码可以实现一个简单的水波点案例。",paraId:2,tocIndex:0},{value:"你可以在 ",paraId:3,tocIndex:0},{value:"L7",paraId:3,tocIndex:0},{value:" 官网上找到",paraId:3,tocIndex:0},{value:"在线案例",paraId:4,tocIndex:0},{value:"。",paraId:3,tocIndex:0},{value:"具体的使用可以查看",paraId:5,tocIndex:0},{value:"详细文档",paraId:6,tocIndex:0},{value:"。",paraId:5,tocIndex:0},{value:"import { Scene, PointLayer } from '@antv/l7';\nimport { GaodeMap } from '@antv/l7-maps';\nconst scene = new Scene({\n  id: 'map',\n  map: new GaodeMap({\n    style: 'light',\n    center: [112, 23.69],\n    zoom: 2.5,\n  }),\n});\nfetch('https://gw.alipayobjects.com/os/basement_prod/9078fd36-ce8d-4ee2-91bc-605db8315fdf.csv')\n  .then((res) => res.text())\n  .then((data) => {\n    const pointLayer = new PointLayer({})\n      .source(data, {\n        parser: {\n          type: 'csv',\n          x: 'Longitude',\n          y: 'Latitude',\n        },\n      })\n      .shape('circle')\n      .animate(true)\n      .size(40)\n      .color('#ffa842');\n    scene.addLayer(pointLayer);\n  });\n",paraId:7,tocIndex:0},{value:"为了实现水波点，点图层的 ",paraId:8,tocIndex:1},{value:"shape",paraId:8,tocIndex:1},{value:" 参数只要是 ",paraId:8,tocIndex:1},{value:"circle",paraId:8,tocIndex:1},{value:"、",paraId:8,tocIndex:1},{value:"triangle",paraId:8,tocIndex:1},{value:"、",paraId:8,tocIndex:1},{value:"square",paraId:8,tocIndex:1},{value:" 等平面图形即可。",paraId:8,tocIndex:1},{value:"boolean ｜ animateOption",paraId:9,tocIndex:2},{value:".animate(true)\n\n.animate({\n  enable: true\n})\n",paraId:10,tocIndex:2},{value:"speed",paraId:11,tocIndex:3},{value:" 水波速度",paraId:11,tocIndex:3},{value:"rings",paraId:11,tocIndex:3},{value:" 水波环数",paraId:11,tocIndex:3},{value:"在水波点图层中，由于边缘透明的原因，点的大小看上去要比相同 size 的非水波点要小一些。",paraId:12,tocIndex:4}]},8565:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(68233);const d=[{value:"几何体图层在地图上除了平面的填充图，还可以是有高度的几何体块。",paraId:0},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"下面我们来介绍如何绘制一个简单的 ",paraId:2,tocIndex:0},{value:"3D",paraId:2,tocIndex:0},{value:" 填充图。",paraId:2,tocIndex:0},{value:"你可以在 ",paraId:3,tocIndex:0},{value:"L7",paraId:3,tocIndex:0},{value:" 官网上找到",paraId:3,tocIndex:0},{value:"在线案例",paraId:4,tocIndex:0},{value:"import { Scene, PolygonLayer } from '@antv/l7';\nimport { GaodeMap } from '@antv/l7-maps';\n\nconst scene = new Scene({\n  id: 'map',\n  map: new GaodeMap({\n    style: 'dark',\n    pitch: 50,\n    center: [ 118.8, 32.056 ],\n    zoom: 10\n  })\n});\nscene.on('loaded', () => {\n  fetch('https://gw.alipayobjects.com/os/bmw-prod/94763191-2816-4c1a-8d0d-8bcf4181056a.json')\n    .then(res => res.json())\n    .then(data => {\n      const filllayer = new PolygonLayer({\n        name: 'fill',\n        zIndex: 3\n      })\n        .source(data)\n        .shape('extrude')\n        .color('unit_price', [\n        '#87CEFA',\n        '#00BFFF',\n        '#7FFFAA',\n        '#00FF7F',\n        '#32CD32',\n        '#F0E68C',\n        '#FFD700',\n        '#FF7F50',\n        '#FF6347',\n        '#FF0000'\n      ])\n        .size('unit_price', unit_price => unit_price * 50)\n        .style({\n          opacity:{\n            field:'unit_price',\n            value: [ 0, 1 ]\n          }\n          pickLight: true\n        })\n      scene.addLayer(filllayer);\n    });\n});\n\n",paraId:5,tocIndex:0},{value:"几何体图层推荐使用标准的 ",paraId:6,tocIndex:1},{value:"GeoJSON",paraId:6,tocIndex:1},{value:" 数据。",paraId:6,tocIndex:1},{value:"3D Polygon 将多边形沿 Z 轴向上拉伸",paraId:7,tocIndex:2},{value:"extrude 常量不支持数据映射",paraId:8,tocIndex:2},{value:"layer.shape('extrude');\n",paraId:9,tocIndex:2},{value:"size 代表拉伸的高度，支持数据映射",paraId:10,tocIndex:3},{value:"layer.size(10); // 高度设置成常量\nlayer.size('floor', [0, 2000]); // 根据floor字段进行数据映射默认为线\nlayer.size('floor', (floor) => {\n  // 通过回调函数设置size\n  return floor * 2;\n});\n",paraId:11,tocIndex:3},{value:"pickLight",paraId:12,tocIndex:4},{value:" 设置 3D 填充图的拾取高亮色是否计算光照。",paraId:12,tocIndex:4},{value:"pickLight",paraId:13,tocIndex:4},{value:" 默认为 ",paraId:13,tocIndex:4},{value:"false",paraId:13,tocIndex:4},{value:" 表示对拾取的颜色不进行光照计算，开启后会增加部分额外的计算。",paraId:13,tocIndex:4},{value:"style({\n  pickLight: true, //  默认为 false\n});\n",paraId:14,tocIndex:4},{value:"heightFixed",paraId:15,tocIndex:4},{value:" 设置 ",paraId:15,tocIndex:4},{value:"3D",paraId:15,tocIndex:4},{value:" 填充图的高度时候固定。",paraId:15,tocIndex:4},{value:"默认 ",paraId:16,tocIndex:4},{value:"3D",paraId:16,tocIndex:4},{value:" 填充图的高度会和 ",paraId:16,tocIndex:4},{value:"zoom",paraId:16,tocIndex:4},{value:" 的层级相关，并以此来保持图形高度的像素长度不变，而在某些情况下我们需要保持图形的实际高度不变而不是像素高度不变。",paraId:16,tocIndex:4},{value:"style({\n  heightfixed: true, //  默认为 false\n});\n",paraId:17,tocIndex:4},{value:"🌟 在 v2.7.6 版本开始支持。",paraId:18,tocIndex:4},{value:"在线案例",paraId:19},{value:"raisingHeight",paraId:20},{value:" 设置 ",paraId:20},{value:"3D",paraId:20},{value:" 填充图的抬升高度。",paraId:20},{value:"🌟 设置抬升高度的前提是 ",paraId:21},{value:"heightfixed",paraId:21},{value:" 为 ",paraId:21},{value:"true",paraId:21},{value:"。",paraId:21},{value:"\n🌟 在 v2.8.17 版本开始支持。",paraId:21},{value:"在线案例",paraId:22},{value:"mapTexture",paraId:23},{value:" 设置 ",paraId:23},{value:"3D",paraId:23},{value:" 填充图的顶面纹理。\n🌟 在设置 ",paraId:23},{value:"mapTexture",paraId:23},{value:" 的时候允许用户配置侧面的渐变色。\n🌟 在 v2.8.17 版本开始支持。",paraId:23},{value:"const provincelayer = new PolygonLayer({})\n  .source(data)\n  .size(150000)\n  .shape('extrude')\n  .color('#0DCCFF')\n  .style({\n    heightfixed: true,\n    pickLight: true,\n    raisingHeight: 200000,\n    mapTexture:\n      'https://gw.alipayobjects.com/mdn/rms_816329/afts/img/A*0tmIRJG9cQQAAAAAAAAAAAAAARQnAQ',\n    sourceColor: '#333',\n    targetColor: '#fff',\n  });\n",paraId:24},{value:"topsurface",paraId:25},{value:": ",paraId:25},{value:"boolean",paraId:25},{value:"\n控制顶面的显隐，默认为 ",paraId:25},{value:"true",paraId:25},{value:"。",paraId:25},{value:"sidesurface",paraId:26},{value:": ",paraId:26},{value:"boolean",paraId:26},{value:"\n控制侧面的显隐，默认为 ",paraId:26},{value:"true",paraId:26},{value:"。",paraId:26},{value:"在线案例",paraId:27}]},37035:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(37147);const d=[{value:"几何体图层在地图上最简单的表现就是填充图，即使用指定的颜色填充指定区域。",paraId:0},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"下面我们来介绍如何绘制一个简单的填充图。",paraId:2,tocIndex:0},{value:"你可以在 ",paraId:3,tocIndex:0},{value:"L7",paraId:3,tocIndex:0},{value:" 官网上找到",paraId:3,tocIndex:0},{value:"在线案例",paraId:4,tocIndex:0},{value:"import { Scene, PolygonLayer, LineLayer, Popup } from '@antv/l7';\nimport { GaodeMap } from '@antv/l7-maps';\n\nconst scene = new Scene({\n  id: 'map',\n  map: new GaodeMap({\n    style: 'light',\n    center: [-96, 37.8],\n    zoom: 3,\n  }),\n});\nscene.on('loaded', () => {\n  fetch('https://gw.alipayobjects.com/os/basement_prod/d36ad90e-3902-4742-b8a2-d93f7e5dafa2.json')\n    .then((res) => res.json())\n    .then((data) => {\n      const color = [\n        'rgb(255,255,217)',\n        'rgb(237,248,177)',\n        'rgb(199,233,180)',\n        'rgb(127,205,187)',\n        'rgb(65,182,196)',\n        'rgb(29,145,192)',\n        'rgb(34,94,168)',\n        'rgb(12,44,132)',\n      ];\n      const layer = new PolygonLayer({})\n        .source(data)\n        .scale('density', {\n          type: 'quantile',\n        })\n        .color('density', color)\n        .shape('fill')\n        .active(true);\n      const layer2 = new LineLayer({\n        zIndex: 2,\n      })\n        .source(data)\n        .color('#fff')\n        .active(true)\n        .size(1)\n        .style({\n          lineType: 'dash',\n          dashArray: [2, 2],\n        });\n      scene.addLayer(layer);\n      scene.addLayer(layer2);\n    });\n});\n",paraId:5,tocIndex:0},{value:"几何体图层推荐使用标准的 ",paraId:6,tocIndex:1},{value:"GeoJSON",paraId:6,tocIndex:1},{value:" 数据。",paraId:6,tocIndex:1},{value:"绘制填充图，shape 为 ",paraId:7,tocIndex:2},{value:"fill",paraId:7,tocIndex:2},{value:" 常量，不支持数据映射",paraId:7,tocIndex:2},{value:"layer.shape('fill');\n",paraId:8,tocIndex:2},{value:"填充图不需要设置 ",paraId:9,tocIndex:3},{value:"size",paraId:9,tocIndex:3},{value:";",paraId:9,tocIndex:3},{value:"opacityLinear",paraId:10,tocIndex:4},{value:" 设置几何填充图的径向渐变。",paraId:10,tocIndex:4},{value:"style({\n  opacityLinear: {\n    enable: true, // true - false\n    dir: 'in', // in - out\n  },\n});\n",paraId:11,tocIndex:4},{value:"径向渐变 in",paraId:12},{value:"径向渐变 out",paraId:13},{value:"raisingHeight",paraId:14},{value:" 设置 ",paraId:14},{value:"3D",paraId:14},{value:" 填充图的抬升高度。",paraId:14}]},14473:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(39133);const d=[{value:"几何体图层支持特殊的表现形式，水面图层。",paraId:0},{value:"\n  ",paraId:1},{value:"\n    ",paraId:1},{value:"\n  ",paraId:1},{value:"下面我们来介绍如何绘制水面。",paraId:2,tocIndex:0},{value:"你可以在 ",paraId:3,tocIndex:0},{value:"L7",paraId:3,tocIndex:0},{value:" 官网上找到",paraId:3,tocIndex:0},{value:"在线案例",paraId:4,tocIndex:0},{value:"🌟 从 v2.8.1 版本开始支持简单水面。",paraId:5,tocIndex:0},{value:"\n🌟 从 v2.8.4 版本开始支持拟真水面。",paraId:5,tocIndex:0},{value:"几何体图层推荐使用标准的 ",paraId:6,tocIndex:2},{value:"GeoJSON",paraId:6,tocIndex:2},{value:" 数据。",paraId:6,tocIndex:2},{value:"我们需要设置 ",paraId:7,tocIndex:3},{value:"shape",paraId:7,tocIndex:3},{value:" 为 ",paraId:7,tocIndex:3},{value:"ocean",paraId:7,tocIndex:3},{value:"。",paraId:7,tocIndex:3},{value:"我们需要显示的设置 ",paraId:8,tocIndex:4},{value:"animate",paraId:8,tocIndex:4},{value:" 为 ",paraId:8,tocIndex:4},{value:"true",paraId:8,tocIndex:4},{value:"。",paraId:8,tocIndex:4},{value:"layer.aniamte(true);\n",paraId:9,tocIndex:4},{value:"watercolor",paraId:10,tocIndex:5},{value:" 浅水区域的颜色 默认为 '#6D99A8'。",paraId:10,tocIndex:5},{value:"watercolor2",paraId:11,tocIndex:5},{value:" 深水区域的颜色 默认为 '#0F121C'。",paraId:11,tocIndex:5},{value:"在线案例",paraId:12},{value:"几何体图层推荐使用标准的 ",paraId:13,tocIndex:7},{value:"GeoJSON",paraId:13,tocIndex:7},{value:" 数据。",paraId:13,tocIndex:7},{value:"我们需要设置 ",paraId:14,tocIndex:8},{value:"shape",paraId:14,tocIndex:8},{value:" 为 ",paraId:14,tocIndex:8},{value:"water",paraId:14,tocIndex:8},{value:"。",paraId:14,tocIndex:8},{value:"我们需要显示的设置 ",paraId:15,tocIndex:9},{value:"animate",paraId:15,tocIndex:9},{value:" 为 ",paraId:15,tocIndex:9},{value:"true",paraId:15,tocIndex:9},{value:"。",paraId:15,tocIndex:9},{value:"layer.aniamte(true);\n",paraId:16,tocIndex:9},{value:"speed",paraId:17,tocIndex:10},{value:" 我们可以通过 ",paraId:17,tocIndex:10},{value:"speed",paraId:17,tocIndex:10},{value:" 来控制水面的流速度。",paraId:17,tocIndex:10},{value:"style({\n  speed: 0.5,\n});\n",paraId:18,tocIndex:10},{value:"waterTexture",paraId:19,tocIndex:10},{value:" 我们可以通过设置该属性来替换水面的纹理。",paraId:19,tocIndex:10},{value:"\n默认值是 '",paraId:19,tocIndex:10},{value:"https://gw.alipayobjects.com/mdn/rms_816329/afts/img/A*EojwT4VzSiYAAAAAAAAAAAAAARQnAQ",paraId:19,tocIndex:10},{value:"'",paraId:19,tocIndex:10},{value:"在线案例",paraId:20}]},2082:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(15915);const d=[{value:"Issue 是开放的，看到的同学可以解答，提出想法，提升 Issue 的解决效率",paraId:0,tocIndex:0},{value:"Issue 能够做到很好的任务管理",paraId:0,tocIndex:0},{value:"如果该问题得到解决，遇到同样问题是人，可以参考解决。",paraId:0,tocIndex:0},{value:"提交问题前，请先阅读 ",paraId:1,tocIndex:1},{value:"https://l7.antv.antgroup.com/tutorial/quickstart",paraId:1,tocIndex:1},{value:" 上的文档。",paraId:1,tocIndex:1},{value:"我们推荐如果是小问题（错别字修改，小的 bug fix）直接提交 PR。",paraId:1,tocIndex:1},{value:"如果是一个新需求，请提供：详细需求描述，最好是有伪代码实现。",paraId:1,tocIndex:1},{value:"如果是一个 BUG，请提供：复现步骤，错误日志以及相关配置，并尽量填写下面的模板中的条目。",paraId:1,tocIndex:1},{value:"如果可以，请提供尽可能精简的 codesandbox 链接，可使用 codesandbox 模板 ",paraId:1,tocIndex:1},{value:"https://codesandbox.io/s/45smpb，方便我们排查问题。",paraId:1,tocIndex:1},{value:"扩展阅读：",paraId:1,tocIndex:1},{value:"如何向开源项目提交无法解答的问题",paraId:1,tocIndex:1},{value:"复现demo 是指可运行的代码环境，不是复制代码，推荐使用 ",paraId:2,tocIndex:2},{value:"https://codesandbox.io/s/45smpb",paraId:2,tocIndex:2},{value:" ，同时官网提供了自动跳转到codebox 的能力。",paraId:2,tocIndex:2},{value:"L7 demo 页面找到，需要复现的图层或者相似的demo",paraId:3,tocIndex:2},{value:"在 sandbox 打开 当前demo",paraId:3,tocIndex:2},{value:"你可能没有注意到，代码区的上方有一排工具按钮。",paraId:4,tocIndex:2},{value:"点击左侧第三个按钮，你就进入了 ",paraId:5,tocIndex:2},{value:"codesandbox",paraId:5,tocIndex:2},{value:"。",paraId:5,tocIndex:2},{value:"你发现你进入了一个在线的代码编辑器，在这里面你可以修改代码，复现你发现的问题，然后保存，并在链接复制到 Issue 内容中。",paraId:6,tocIndex:2},{value:"https://github.com/antvis/L7/issues/new",paraId:7,tocIndex:3},{value:"如果还没有 star L7,可顺手点个 star。",paraId:8,tocIndex:3}]},13311:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(38766);const d=[{value:"L7",paraId:0},{value:" 可以通过在线 ",paraId:0},{value:"CDN",paraId:0},{value:" 以及 ",paraId:0},{value:"NPM",paraId:0},{value:" 包等形式快速接入。通过 ",paraId:0},{value:"L7",paraId:0},{value:" 提供的能力，我们可以快速完成地图可视化的绘制。",paraId:0},{value:"// 安装L7 依赖\nnpm install --save @antv/l7\n// 安装第三方底图依赖\nnpm install --save @antv/l7-maps\n",paraId:1,tocIndex:1},{value:'<head>\n  <! --引入最新版的L7--\x3e\n  <script src="https://unpkg.com/@antv/l7"><\/script>\n\n  <! --指定版本号引入L7--\x3e\n  <script src="https://unpkg.com/@antv/l7@2.0.11"><\/script>\n</head>\n',paraId:2,tocIndex:2},{value:"CDN 引用 在使用时通过 L7 命名空间获取所有对象并初始化，如 L7.scene、L7.GaodeMap",paraId:3,tocIndex:2},{value:"import { Scene } from '@antv/l7';\nimport { GaodeMap } from '@antv/l7-maps';\n\nconst scene = new L7.Scene({\n  id: 'map',\n  map: new L7.GaodeMap({\n    style: 'dark',\n    center: [110.770672, 34.159869],\n    pitch: 45,\n  }),\n});\n",paraId:4,tocIndex:2},{value:"初始化地图首先需要在页面中新增一个Dom 用于地图初始化。",paraId:5,tocIndex:4},{value:'<div style="min-height: 500px; justify-content: center;position: relative" id="map" />\n',paraId:6,tocIndex:4},{value:"初始化高德地图",paraId:7,tocIndex:4},{value:"import { GaodeMap } from '@antv/l7-maps';\n// 同样你也可以初始化一个 Mapbox 地图\nconst scene = new Scene({\n  id: 'map',\n  map: new GaodeMap({\n    pitch: 35.210526315789465,\n    style: 'dark',\n    center: [104.288144, 31.239692],\n    zoom: 4.4,\n  }),\n});\n",paraId:8,tocIndex:4},{value:"🌟 此时在页面上就会出现可交互的地图内容。",paraId:9,tocIndex:4},{value:"地图初始化完成之后我们，那我们就可以往地图添加可视化数据了，这里我们以中国行政区区数据为例，如何可视化面数据。\n数据源： 中国各省 ",paraId:10,tocIndex:5},{value:"GeoJSON",paraId:10,tocIndex:5},{value:" 数据。",paraId:10,tocIndex:5},{value:"我们使用面图层来绘制行政区划数据，得到覆盖在地图表面的几何平面。",paraId:11,tocIndex:5},{value:"import { PolygonLayer } from '@antv/l7';\nconst chinaPolygonLayer = new PolygonLayer({})\n  .source(data)\n  .color('name', [\n    'rgb(239,243,255)',\n    'rgb(189,215,231)',\n    'rgb(107,174,214)',\n    'rgb(49,130,189)',\n    'rgb(8,81,156)',\n  ]);\n",paraId:12,tocIndex:5},{value:"图层创建完成之后我们需要将它添加到 ",paraId:13,tocIndex:5},{value:"Scene",paraId:13,tocIndex:5},{value:" 中进行显示。",paraId:13,tocIndex:5},{value:"scene.addLayer(chinaPolygonLayer);\n",paraId:14,tocIndex:5},{value:"简单的填充可视化还是不够直观，我们可以使用 ",paraId:15,tocIndex:5},{value:"LineLayer",paraId:15,tocIndex:5},{value:" 和 ",paraId:15,tocIndex:5},{value:"PointLayer",paraId:15,tocIndex:5},{value:" 增加行政区划描边和行政区划文字标注。",paraId:15,tocIndex:5},{value:"添边界和文本标注之后可视化效果更加清晰。",paraId:16,tocIndex:5},{value:"查看完整代码",paraId:17,tocIndex:5},{value:"单纯的数据展现出来，并不能满足我的需求，我们可能需要查看每个区块的相关信息，或者添加一些高亮效果。",paraId:18,tocIndex:6},{value:"L7",paraId:19,tocIndex:7},{value:" 图层添加默认的高亮效果，默认的高亮效果可以改变颜色。",paraId:19,tocIndex:7},{value:"chinaPolygonLayer.active(true); //  开启默认高亮效果\n\nchinaPolygonLayer.active({ color: red }); // 开启并设置高亮颜色为红色\n",paraId:20,tocIndex:7},{value:"默认蓝色高亮效果",paraId:21,tocIndex:7},{value:"更改高亮颜色",paraId:21,tocIndex:7},{value:"默认的高亮效果只能改变颜色，可能并不能满足我的需求，我们可能需要白色的描边，这能够实现吗，答案肯定是可以的。",paraId:22,tocIndex:8},{value:"添加一个新的图层的作为高亮图层, 数据我们设置成空数据，形状设置成 ",paraId:23,tocIndex:8},{value:"line",paraId:23,tocIndex:8},{value:"const hightLayer = new LineLayer({\n  zIndex: 4, // 设置显示层级\n  name: 'hightlight',\n})\n  .source({\n    type: 'FeatureCollection',\n    features: [],\n  })\n  .shape('line')\n  .size(2)\n  .color('red');\nscene.addLayer(hightLayer);\n",paraId:24,tocIndex:8},{value:"这样我们就可以监听需要高亮图层的鼠标事件，获取当前选中的数据，然后更新 ",paraId:25,tocIndex:8},{value:"hightLayer",paraId:25,tocIndex:8},{value:" 既可实现描边高亮效果。",paraId:25,tocIndex:8},{value:"chinaPolygonLayer.on('click', (feature) => {\n  hightLayer.setData({\n    type: 'FeatureCollection',\n    features: [feature.feature],\n  });\n});\n",paraId:26,tocIndex:8},{value:"为图层添加点击高亮红色描边效果",paraId:27,tocIndex:8},{value:"到这里我们就学会了如何自定义高亮效果，这里提个小问题“如何实现双描边的高亮效果？”",paraId:28,tocIndex:8},{value:"查看示例",paraId:29,tocIndex:8},{value:"鼠标交互时，我们除了高亮显示划过的区域我们还需要信息区域相关的信息，这里 ",paraId:30,tocIndex:9},{value:"L7",paraId:30,tocIndex:9},{value:" 提供了 ",paraId:30,tocIndex:9},{value:"Popup",paraId:30,tocIndex:9},{value:" 组件用于在地图显示相关信息。",paraId:30,tocIndex:9},{value:"引入对象",paraId:31,tocIndex:9},{value:"import { Popup } from '@antv/l7';\n",paraId:32,tocIndex:9},{value:"我们可以通过对 Layer 监听鼠标事件，决定何时显示Popup,",paraId:33,tocIndex:9},{value:"layer.on('mousemove', (e) => {\n  const popup = new Popup({\n    offsets: [0, 0],\n    closeButton: false,\n  })\n    .setLnglat(e.lngLat)\n    .setHTML(\n      `<span>地区: ${e.feature.properties.name}</span><br><span>确诊数: ${e.feature.properties.case}</span>`,\n    );\n  scene.addPopup(popup);\n});\n",paraId:34,tocIndex:9},{value:"查看示例",paraId:35,tocIndex:9},{value:"上面我们已经学会了如何可视化数据，在地图我们将不同的区域可视为不同颜色，但是如何读懂不同的颜色表达的什么含义，我们需要添加一个图例。",paraId:36,tocIndex:10},{value:"L7",paraId:37,tocIndex:10},{value:" 目前没有默认的图例组件，需要自己创建图例，这里我们介绍通过 ",paraId:37,tocIndex:10},{value:"L7 Control",paraId:37,tocIndex:10},{value:" 基类创建图例组件，当然你也可以实现一个独立的图例 ",paraId:37,tocIndex:10},{value:"DOM",paraId:37,tocIndex:10},{value:" 组件。",paraId:37,tocIndex:10},{value:"L7",paraId:38,tocIndex:10},{value:" 提供了默认的 ",paraId:38,tocIndex:10},{value:"Zoom",paraId:38,tocIndex:10},{value:"，",paraId:38,tocIndex:10},{value:"Scale",paraId:38,tocIndex:10},{value:"，",paraId:38,tocIndex:10},{value:"Logo",paraId:38,tocIndex:10},{value:" 等组件这些组件都基于同一个基类 ",paraId:38,tocIndex:10},{value:"Control",paraId:38,tocIndex:10},{value:" 组件，今天我们基于 ",paraId:38,tocIndex:10},{value:"Control",paraId:38,tocIndex:10},{value:" 实现自定义图例组件。",paraId:38,tocIndex:10},{value:"引入 ",paraId:39,tocIndex:10},{value:"Control",paraId:39,tocIndex:10},{value:" 基类",paraId:39,tocIndex:10},{value:"import { Control } from '@antv/l7';\n",paraId:40,tocIndex:10},{value:"初始化基类",paraId:41,tocIndex:10},{value:"const legend = new Control({\n  position: 'bottomright',\n});\n",paraId:42,tocIndex:10},{value:"设置 ",paraId:43,tocIndex:10},{value:"Control",paraId:43,tocIndex:10},{value:" 展示内容",paraId:43,tocIndex:10},{value:"通过扩展 ",paraId:44,tocIndex:10},{value:"Control",paraId:44,tocIndex:10},{value:" 的 ",paraId:44,tocIndex:10},{value:"onAdd",paraId:44,tocIndex:10},{value:" 方法我们自由定制 ",paraId:44,tocIndex:10},{value:"Control",paraId:44,tocIndex:10},{value:" 需要展示内容和交互。",paraId:44,tocIndex:10},{value:"legend.onAdd = function () {\n  var el = document.createElement('div');\n  el.className = 'infolegend legend';\n  var grades = [0, 10, 20, 50, 100, 200, 500];\n  for (var i = 0; i < grades.length; i++) {\n    el.innerHTML +=\n      '<i style=\"background:' +\n      color[i] +\n      '\"></i> ' +\n      grades[i] +\n      (grades[i + 1] ? '–' + grades[i + 1] + '<br>' : '+');\n  }\n  return el;\n};\n",paraId:45,tocIndex:10},{value:"添加到地图",paraId:46,tocIndex:10},{value:"scene.addControl(legend);\n",paraId:47,tocIndex:10},{value:"查看示例",paraId:48,tocIndex:10},{value:"这里我们介绍了，如何通过自己定义 ",paraId:49,tocIndex:10},{value:"Control",paraId:49,tocIndex:10},{value:" 的方式实现图例，通过自定义 ",paraId:49,tocIndex:10},{value:"Control",paraId:49,tocIndex:10},{value:" 我们很多地图组件，如全屏组件，定位组件，很多业务上需要的组件，有幸运的同学们可以动手尝试一下了。",paraId:49,tocIndex:10},{value:"上面我们可视化的是一个静态数据，但是很多时候我们的数据是随时间变化的，如何进行时序数据的可视化，这里我们介绍两种时序数据可视化方法。",paraId:50,tocIndex:11},{value:"地理数据：",paraId:51,tocIndex:12},{value:"美国各州行政区划数据",paraId:51,tocIndex:12},{value:"\n属性数据：",paraId:51,tocIndex:12},{value:"0908-1008近30天的美国各州新冠确诊数据",paraId:51,tocIndex:12},{value:"。",paraId:51,tocIndex:12},{value:"随着时间的变化，数据肯定发生变化，因此最简单的方式我每个时间更新一下数据即可.",paraId:52,tocIndex:13},{value:"chinaPolygonLayer.setData(newData);\n",paraId:53,tocIndex:13},{value:"完整示例",paraId:54,tocIndex:13},{value:"时序数据的更新很大一部分场景是属性数据的更新，比如各省不同年份的 ",paraId:55,tocIndex:14},{value:"GDP",paraId:55,tocIndex:14},{value:" 数据，空间数据本身没有发生变化（没有增加或者减少也没有更新边界）这种情况对面图层来说可能只需要根据新的数据更新一下就可以实现。当然通过 ",paraId:55,tocIndex:14},{value:"setData",paraId:55,tocIndex:14},{value:" 也可以实现。",paraId:55,tocIndex:14},{value:"L7",paraId:55,tocIndex:14},{value:" 内部实现机制来看 更新 ",paraId:55,tocIndex:14},{value:"color",paraId:55,tocIndex:14},{value:" 的效率要比 ",paraId:55,tocIndex:14},{value:"setData",paraId:55,tocIndex:14},{value:" 效率高的多。",paraId:55,tocIndex:14},{value:"通过更新颜色映射字段，实现数据显示的更新。",paraId:56,tocIndex:14},{value:"const setColor = (d) => {\n  return d > 100000\n    ? color[7]\n    : d > 80000\n      ? color[6]\n      : d > 40000\n        ? color[5]\n        : d > 20000\n          ? color[4]\n          : d > 10000\n            ? color[3]\n            : d > 5000\n              ? color[2]\n              : d > 1000\n                ? color[1]\n                : color[0];\n};\n\nchinaPolygonLayer.color('2020-09-01', setColor);\nchinaPolygonLayer.color('2020-09-02', setColor);\n",paraId:57,tocIndex:14},{value:"注意更新颜色生效，需要调用 ",paraId:58,tocIndex:14},{value:"Scene.render();",paraId:58,tocIndex:14},{value:"。",paraId:58,tocIndex:14},{value:"查看示例",paraId:59,tocIndex:14},{value:"L7",paraId:60,tocIndex:15},{value:" 基础 ",paraId:60,tocIndex:15},{value:"WebGL",paraId:60,tocIndex:15},{value:" 实现绘制简单的点、线、面，比较简单，如果要实现比较复杂的地图标注就比较困难，为了解决这个问题 ",paraId:60,tocIndex:15},{value:"L7",paraId:60,tocIndex:15},{value:" 添加了 ",paraId:60,tocIndex:15},{value:"Marker",paraId:60,tocIndex:15},{value:" 组件，你可以基于 ",paraId:60,tocIndex:15},{value:"DOM",paraId:60,tocIndex:15},{value:" 实现各种复杂的标注。",paraId:60,tocIndex:15},{value:"import { Marker } from '@antv/l7';\n const el = document.createElement('label');\n el.className = 'labelclass';\nel.textContent = nodes[i].v + '℃';\nel.style.background = 'red';\nel.style.borderColor = '#fff;\nconst marker = new Marker({ element: el})\n  .setLnglat({ lng: 112, lat: 30});\nscene.addMarker(marker);\n",paraId:61,tocIndex:15},{value:"查看完整代码",paraId:62,tocIndex:15},{value:"除了地图可视化层之外我们可能需要添加辅助性的地图工具 比如放大缩小，比例尺，图层列表等组件。",paraId:63,tocIndex:16},{value:"import { Scale, Zoom } from '@antv/l7';\nconst zoomControl = new Zoom({ position: 'topright' });\nconst scaleControl = new Scale({ position: 'bottomright' });\n// 添加到地图场景\nscene.addControl(zoomControl);\nscene.addControl(scaleControl);\n",paraId:64,tocIndex:16},{value:"上面介绍的图例就是一个自定义组件，同样我们可以任意组件内容，也可以为组件添加地图交互。\n更多使用方式我们参考 ",paraId:65,tocIndex:17},{value:"L7",paraId:65,tocIndex:17},{value:" 提供默认组件的",paraId:65,tocIndex:17},{value:"源码",paraId:65,tocIndex:17},{value:"不同项目模板在 ",paraId:66,tocIndex:18},{value:"CodeSandbox",paraId:66,tocIndex:18},{value:" 你可以预览，也可以下载到本地。",paraId:66,tocIndex:18},{value:"地址",paraId:67,tocIndex:19},{value:"地址",paraId:68,tocIndex:20},{value:"地址",paraId:69,tocIndex:21},{value:"地址",paraId:70,tocIndex:22}]},86653:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(25038);const d=[{value:"Scale 度量是用于将地图数据值（数字、日期、类别等数据）转成视觉变量（颜色、大小、形状）。Scale 是数据可视化的基本元素，因为它们决定了数据视觉编码的方式。L7 目前支持连续、离散、枚举类型等常用的 Scale。",paraId:0,tocIndex:0},{value:"Range 和 Domain",paraId:1,tocIndex:1},{value:"Domain: 地图数据值的定义区间",paraId:2,tocIndex:1},{value:"Range：视觉值的区间定义",paraId:3,tocIndex:1},{value:"不同 Scale 的差异在于 Domain-> Range 的转换方法不同",paraId:4,tocIndex:1},{value:"数据类",paraId:5,tocIndex:1},{value:"度量类型",paraId:5,tocIndex:1},{value:"连续",paraId:5,tocIndex:1},{value:"linear、log、pow",paraId:5,tocIndex:1},{value:"连续分类",paraId:5,tocIndex:1},{value:"quantize quantile,threshold,diverging",paraId:5,tocIndex:1},{value:"分类 枚举",paraId:5,tocIndex:1},{value:"cat",paraId:5,tocIndex:1},{value:"在使用 L7 过程中，默认情况下不需要进行 Scale 的配置，因为 L7 会根据数据类型对 scale 推断，推断过程如下：",paraId:6,tocIndex:2},{value:"查看用户是否设置了 Scale，如果没有:",paraId:7,tocIndex:2},{value:"判断字段的第一条数据的字段类型，如果数据中不存在对应的字段：",paraId:8,tocIndex:2},{value:"认为是常量为固定值",paraId:9,tocIndex:2},{value:"如果是数字则为 'linear';",paraId:10,tocIndex:2},{value:"如果是字符串类型 'cat';",paraId:11,tocIndex:2},{value:"Cat 指枚举类型，用于展示分类数据，比如农作物种植区分布图，水稻、玉米、大豆等不同类别需要映射为不同的颜色。在 L7 如果判断字段的值为字符串，将认为是 Cat 类型并自动获取类型的唯一值，设置为 domain 。这样三种作物就会被一一映射成对应的颜色。",paraId:12,tocIndex:3},{value:"\nconst data = [\n   {\n   type:'A',\n   x: 110,\n   y:30\n },\n {\n   type:'B',\n   x: 110,\n   y:32\n },\n {\n   type:'C',\n   x: 110,\n   y:31\n }\n ,{\n   type:'D',\n   x: 111,\n   y:33\n }，\n ,{\n   type:'E',\n   x: 112,\n   y:30\n }\n ,{\n   type:'F',\n   x: 110,\n   y:30\n }\n]\nlayer.color('type',['red','white','blue','yellow'])\n",paraId:13,tocIndex:3},{value:"如上面的代码所示，图层没有设置 Scale, L7 根据第一个数据\"A\"的类型 ,推断为枚举类型。同时取出该字段的去重后的所有值 ['A','B','C','D','E','F'] 设置为 scale 的 domain, 那么 range 就是对应的颜色 ['red','white','blue','yellow']。",paraId:14,tocIndex:3},{value:"如果不设置 domain，L7 内部会自动计算 domain，domain 顺序跟数据顺序相关。如果希望固定domain 可自己设置 domain。domain 数值 和 range数值 一一对应。",paraId:15,tocIndex:3},{value:"\nlayer.scale('type', {\n  type: 'cat',\n  domain: ['B', 'A', 'C', 'D'],\n});\nlayer.color('type', ['red', 'white', 'blue', 'yellow']);\n\n",paraId:16,tocIndex:3},{value:"线性是连续数据的映射方法，数据和视觉值是通过线性方法计算的。如数据范围domain [0,1000] 线性映射到 range [red,blue] 渐变色，就是依据线性函完成一一转换。",paraId:17,tocIndex:4},{value:"layer.color('rate', ['#ffffcc', '#b6e2b6', '#64c1c0', '#338cbb', '#253494']);\n",paraId:18,tocIndex:4},{value:"对于连续型\n数据 L7 默认会设置为 linear, domain为数据的min、max值。颜色会根据 range 颜色生成渐变色。linear\n默认可不设置 domain 区间",paraId:19,tocIndex:4},{value:"layer.scale('value', {\n  type: 'linear',\n  domain: [5, 100], // 可定义domain,也可以不设置，自定根据数据计算\n});\n",paraId:20,tocIndex:4},{value:"等间距分类会根据属性值范围划分为若干个大小相等的子范围。相等间隔最适用于常见的数据范围，如百分比和温度。这种方法强调的是某个属性值相对于其他值的量。",paraId:21,tocIndex:5},{value:"等间距分类只与数据 mix、max 有关，如果没有设置 domain,将自动计算数据的 min、max 进行分段，分段个数依据 range 颜色的个数。等间距会出现空类，而且每个分类要素分布不均匀。",paraId:22,tocIndex:5},{value:"layer.color('type', ['red', 'white', 'blue', 'yellow']);\n",paraId:23,tocIndex:5},{value:"你也可以自定义 domain",paraId:24,tocIndex:5},{value:"layer.scale('value', {\n  type: 'quantize',\n  domain: [5, 100],\n});\n\nlayer.color('type', ['red', 'white', 'blue', 'yellow']);\n",paraId:25,tocIndex:5},{value:"等分位要求每个分类区间都含有相等数量的要素。分位数为每个分类分配相等数量数据值，不存在空类，也不存在值过多或过少的类。",paraId:26,tocIndex:6},{value:"等分位与数据的分布相关，需要拿到全量数据才能计算，因此等分位的 scale 不能单独设置 domain，只能自动计算。",paraId:27,tocIndex:6},{value:"layer.scale('value', {\n  type: 'quantile',\n});\n\nlayer.color('value', ['red', 'white', 'blue', 'yellow']);\n",paraId:28,tocIndex:6},{value:"自定义分类可以设定任意分类区间映射到对于视觉变量。domain 仍然是连续的，并根据提供的domain 进行分类。range 属性必须有 N+1 个元素，其中 N 是 domain 的个数。",paraId:29,tocIndex:7},{value:"threshold 为自定义分段，在使用时必须为 Scale 设置 domain, domain可以依据需求任意设置。",paraId:30,tocIndex:7},{value:"layer\n  .scale('rate', {\n    type: 'threshold',\n    domain: [3, 6, 8, 10],\n  })\n  .color('rate', ['#ffffcc', '#b6e2b6', '#64c1c0', '#338cbb', '#253494']);\n",paraId:31,tocIndex:7},{value:"离散分类通常与两种相反的色调一起使用，以显示从负值到中心到正值的变化。这些类型的地图显示了彼此相关的值的大小。",paraId:32,tocIndex:8},{value:"diverging 如果没有设置 domain 会自动根据数据计算min、middle、max 三个值作为domain。range 至少需要设置三个颜色，形成双极色带。",paraId:33,tocIndex:8},{value:"layer.scale('rate', {\n         type: 'diverging'\n         domain: [3, 6, 8, 10], //  the input domain and output range of a diverging scal\n       })\n       .color('rate', ['#ffffcc', '#b6e2b6', '#64c1c0', '#338cbb', '#253494'])\n",paraId:34,tocIndex:8}]},61062:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(59660);const d=[{value:"栅格瓦片图层包括图片栅格和数据栅格，其中图片栅格通常加载 ",paraId:0},{value:"png/jpg",paraId:0},{value:" 图片，数据栅格则加载 ",paraId:0},{value:"tiff/lerc",paraId:0},{value:" 等栅格数据文件.",paraId:0},{value:"// 图片瓦片图层 - 卫星图\nconst layer = new RasterLayer().source(\n  'http://webst0{1-4}.is.autonavi.com/appmaptile?style=6&x={x}&y={y}&z={z}',\n  {\n    parser: {\n      type: 'rasterTile',\n      updateStrategy: 'overlap',\n    },\n  },\n);\n",paraId:1,tocIndex:0},{value:"// 绘制 WMS 格式瓦片\nconst url =\n  'https://pnr.sz.gov.cn/d-suplicmap/dynamap_1/rest/services/LAND_CERTAIN/MapServer/export?F=image&FORMAT=PNG32&TRANSPARENT=true&layers=show:1&SIZE=256,256&BBOX={bbox}&BBOXSR=4326&IMAGESR=3857&DPI=90';\n\nconst layer = new RasterLayer().source(url, {\n  parser: {\n    type: 'rasterTile',\n    tileSize: 256,\n    zoomOffset: 1,\n  },\n});\n",paraId:2,tocIndex:1},{value:"// 绘制 WMTS 格式瓦片\nconst url1 = 'https://t0.tianditu.gov.cn/img_w/wmts?tk=b72aa81ac2b3cae941d1eb213499e15e&';\nconst layer1 = new RasterLayer().source(url1, {\n  parser: {\n    type: 'rasterTile',\n    tileSize: 256,\n    wmtsOptions: {\n      layer: 'img',\n      tileMatrixset: 'w',\n      format: 'tiles',\n    },\n  },\n});\n",paraId:3,tocIndex:2},{value:"const tileSource = new Source(\n  'https://ganos.oss-cn-hangzhou.aliyuncs.com/m2/l7/tiff_jx/{z}/{x}/{y}.tiff',\n  {\n    parser: {\n      type: 'rasterTile',\n      dataType: 'arraybuffer',\n      tileSize: 256,\n      maxZoom: 13.1,\n      format: async (data) => {\n        const tiff = await GeoTIFF.fromArrayBuffer(data);\n        const image = await tiff.getImage();\n        const width = image.getWidth();\n        const height = image.getHeight();\n        const values = await image.readRasters();\n        return { rasterData: values[0], width, height };\n      },\n    },\n  },\n);\n\nlayer.source(tileSource).style({\n  domain: [0.001, 11.001],\n  clampLow: false,\n  rampColors: {\n    colors: colorList,\n    positions,\n  },\n});\n",paraId:4,tocIndex:3},{value:"const url = 'https://gw.alipayobjects.com/zos/raptor/1667832825992/LC08_3857_clip_2.tif';\nconst tiffdata = await getTiffData(url);\nconst layer = new RasterLayer({ zIndex: 10 }).source(\n  [\n    {\n      data: tiffdata,\n      bands: [7, 6, 5].map((v) => v - 1),\n    },\n  ],\n  {\n    parser: {\n      type: 'rasterRgb',\n      format: async (data, bands) => {\n        const tiff = await GeoTIFF.fromArrayBuffer(data);\n        const image1 = await tiff.getImage();\n        const value = await image1.readRasters();\n        return bands.map((band) => {\n          return {\n            rasterData: value[band],\n            width: value.width,\n            height: value.height,\n          };\n        });\n      },\n      operation: 'rgb',\n      extent: [130.39565357746957, 46.905730725742366, 130.73364094187343, 47.10217234153133],\n    },\n  },\n);\n",paraId:5,tocIndex:4}]},75544:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(15188);const d=[{value:"瓦片图层相比于普通的图层而言，在使用上有许多需要注意的地方。",paraId:0},{value:"在初始化瓦片的时候，除了普通图层支持的 ",paraId:1,tocIndex:0},{value:"options",paraId:1,tocIndex:0},{value:" 参数之外，还需要需要我们提前设置矢量数据相关的参数。",paraId:1,tocIndex:0},{value:"featureId",paraId:2,tocIndex:0},{value:": string\n",paraId:2,tocIndex:0},{value:"用于可以自定义指定。用于指定瓦片的拾取高亮。",paraId:3,tocIndex:0},{value:"sourceLayer",paraId:2,tocIndex:0},{value:": string\n",paraId:2,tocIndex:0},{value:"用于必须传入，且要在返回的矢量数据中存在，指定绘制矢量数据中那一图层数据。",paraId:4,tocIndex:0},{value:"const layer = new RasterLayer({\n  featureId: 'id',\n  sourceLayer: 'water',\n});\n",paraId:5,tocIndex:0},{value:"瓦片图层的掩模使用和普通的图层一样，同样在 ",paraId:6,tocIndex:1},{value:"options",paraId:6,tocIndex:1},{value:" 中设置 ",paraId:6,tocIndex:1},{value:"mask、maskfence",paraId:6,tocIndex:1},{value:" 参数即可，不过矢量瓦片图层暂时不支持设置掩模。",paraId:6,tocIndex:1},{value:"fetch('https://gw.alipayobjects.com/os/bmw-prod/fccd80c0-2611-49f9-9a9f-e2a4dd12226f.json')\n  .then((res) => res.json())\n  .then((maskData) => {\n    const layer = new RasterLayer({\n      mask: true,\n      maskfence: maskData,\n    });\n\n    const tileSource = new Source(\n      'https://ganos.oss-cn-hangzhou.aliyuncs.com/m2/l7/tiff_jx/{z}/{x}/{y}.tiff',\n      {\n        parser: {\n          type: 'rasterTile',\n          dataType: 'arraybuffer',\n          tileSize: 256,\n          maxZoom: 13.1,\n          format: async (data) => {\n            const tiff = await GeoTIFF.fromArrayBuffer(data);\n            const image = await tiff.getImage();\n            const width = image.getWidth();\n            const height = image.getHeight();\n            const values = await image.readRasters();\n            return { rasterData: values[0], width, height };\n          },\n        },\n      },\n    );\n    layer.source(tileSource).style({\n      domain: [0.001, 11.001],\n      clampLow: false,\n      rampColors: {\n        colors: colorList,\n        positions,\n      },\n    });\n    scene.addLayer(layer);\n  });\n",paraId:7,tocIndex:1},{value:"在有些场景下，尤其是是矢量瓦片地图的场景，同一份瓦片数据会同时包含多图层的数据，此时我们需要让多图层复用同一个 ",paraId:8,tocIndex:2},{value:"source",paraId:8,tocIndex:2},{value:" 对象。如下图所示，我们使用同一份数据绘制省市的面、边界和名称，此时我们就应该复用 ",paraId:8,tocIndex:2},{value:"source",paraId:8,tocIndex:2},{value:" 对象。",paraId:8,tocIndex:2},{value:"  const tileSource = new Source(\n    'http://localhost:3000/file.mbtiles/{z}/{x}/{y}.pbf',\n    {\n      parser: {\n        type: 'mvt',\n        tileSize: 256,\n        zoomOffset: 0,\n        maxZoom: 9,\n        extent: [-180, -85.051129, 179, 85.051129],\n      },\n    });\n  const option = {\n    featureId: 'NAME_CHN',\n    sourceLayer: 'city'\n  }\n  const linelayer = new LineLayer(option)\n    .source(tileSource)\n    .color('#f00')\n    .size(1)\n    .style({\n      opacity: 0.5,\n    });\n  this.scene.addLayer(linelayer);\n\n  const polygonlayer = new PolygonLayer(option)\n    .source(tileSource)\n    .color('citycode', (v: string) => {\n        return getRandomColor(v);\n      }\n    })\n    .style({\n      opacity: 0.4,\n    })\n    .select(true);\n  this.scene.addLayer(polygonlayer);\n\n  const pointlayer = new PointLayer(option)\n    .source(tileSource)\n    .shape('NAME_CHN', 'text')\n    .color('#f00')\n    .size(12)\n    .style({\n      stroke: '#fff',\n      strokeWidth: 2,\n    });\n\n  this.scene.addLayer(pointlayer);\n",paraId:9,tocIndex:2},{value:"在使用上，瓦片图层绑定事件的操作和普通图层事件保持一致，但是在事件的返回参数中，瓦片图层对分布的数据进行合并操作，以求获取到当前图层的完整数据。",paraId:10,tocIndex:3},{value:"layer.on('click', e => {...})；\n",paraId:11,tocIndex:3}]},47386:function(a,e,n){n.r(e),n.d(e,{texts:function(){return d}});n(66753);const d=[{value:"矢量瓦片通常可以用于大数据量地理数据的渲染，借助瓦片的特性分布请求渲染数据，从而达到减少请求、加载时间的等待，优化使用体验的目的。同时，在不需要全量加载数据的场景下，通过矢量瓦片的形式可以在保证体验的前提下有效减少数据的渲染量，减少渲染压力。",paraId:0},{value:"import { PointLayer } from '@antv/l7';\nconst point = new PointLayer({\n  featureId: 'COLOR',\n  sourceLayer: 'ecoregions2',\n})\n  .source(vectorSource)\n  .shape('circle')\n  .color('red')\n  .size(10);\n",paraId:1,tocIndex:0},{value:"import { LineLayer } from '@antv/l7';\nconst line = new LineLayer({\n  featureId: 'COLOR',\n  sourceLayer: 'ecoregions2',\n})\n  .source(vectorSource)\n  .color('COLOR')\n  .size(2);\n",paraId:2,tocIndex:1},{value:"// 矢量瓦片图层\nimport { PolygonLayer } from '@antv/l7';\nconst polygon = new PolygonLayer({\n  featureId: 'COLOR'，\n  sourceLayer: 'ecoregions2',\n})\n.source(source)\n.color('red');\n",paraId:3,tocIndex:2},{value:"矢量掩模图层一般配合栅格图层使用，对栅格图层进行掩模处理。",paraId:4,tocIndex:3},{value:"import { MaskLayer } from '@antv/l7';\nconst mask = new MaskLayer({sourceLayer: 'ecoregions2' })\n.source( 'https://ganos.oss-cn-hangzhou.aliyuncs.com/m2/rs_l7/{z}/{x}/{y}.pbf' {\n  parser: {\n      type: 'mvt',\n      maxZoom: 9,\n      extent: [-180, -85.051129, 179, 85.051129],\n  }});\n",paraId:5,tocIndex:3},{value:"// 测试瓦片图层\nconst debugerLayer = new TileDebugLayer();\n",paraId:6,tocIndex:4}]}}]);